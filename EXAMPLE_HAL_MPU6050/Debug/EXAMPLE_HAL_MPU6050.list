
EXAMPLE_HAL_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800bca0  0800bca0  0001bca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a4  0800c0a4  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a4  0800c0a4  0001c0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0ac  0800c0ac  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ac  0800c0ac  0001c0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800c0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00001e20  200002c8  200002c8  000202c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200020e8  200020e8  000202c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011c27  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033f8  00000000  00000000  00031f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f98  00000000  00000000  00035358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bb5  00000000  00000000  000362f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002444e  00000000  00000000  00036ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015a10  00000000  00000000  0005b2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8917  00000000  00000000  00070d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005068  00000000  00000000  0013961c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0013e684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc88 	.word	0x0800bc88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800bc88 	.word	0x0800bc88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f000 faf2 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f816 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 f8ac 	bl	800100c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eb4:	f000 f87c 	bl	8000fb0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000eb8:	f007 fb5a 	bl	8008570 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  sensorTest_init();
 8000ebc:	f000 f90c 	bl	80010d8 <sensorTest_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <main+0x34>)
 8000ec6:	f000 fe40 	bl	8001b4a <HAL_GPIO_TogglePin>
	  sensorTest_print_acc_values();
 8000eca:	f000 f911 	bl	80010f0 <sensorTest_print_acc_values>
	  HAL_Delay(100);
 8000ece:	2064      	movs	r0, #100	; 0x64
 8000ed0:	f000 fb50 	bl	8001574 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ed4:	e7f4      	b.n	8000ec0 <main+0x1c>
 8000ed6:	bf00      	nop
 8000ed8:	40020c00 	.word	0x40020c00

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f008 fdd3 	bl	8009a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <SystemClock_Config+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a21      	ldr	r2, [pc, #132]	; (8000fac <SystemClock_Config+0xd0>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <SystemClock_Config+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 f848 	bl	8003ff8 <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f6e:	f000 f8ad 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2302      	movs	r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2105      	movs	r1, #5
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 faa9 	bl	80044e8 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f9c:	f000 f896 	bl	80010cc <Error_Handler>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3750      	adds	r7, #80	; 0x50
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fb6:	4a13      	ldr	r2, [pc, #76]	; (8001004 <MX_I2C1_Init+0x54>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_I2C1_Init+0x58>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_I2C1_Init+0x50>)
 8000fee:	f000 fdc7 	bl	8001b80 <HAL_I2C_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff8:	f000 f868 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200002e4 	.word	0x200002e4
 8001004:	40005400 	.word	0x40005400
 8001008:	000186a0 	.word	0x000186a0

0800100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <MX_GPIO_Init+0xb8>)
 800102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_GPIO_Init+0xb8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_GPIO_Init+0xb8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_GPIO_Init+0xb8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <MX_GPIO_Init+0xbc>)
 800109a:	f000 fd3d 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_GPIO_Init+0xbc>)
 80010b8:	f000 fb92 	bl	80017e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020c00 	.word	0x40020c00

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <sensorTest_init>:
static SensorData_t sensorData;



void sensorTest_init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    MPU6050_initialize(&sensorData, FS_1000, AFS_4G);
 80010dc:	2201      	movs	r2, #1
 80010de:	2102      	movs	r1, #2
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <sensorTest_init+0x14>)
 80010e2:	f005 f85b 	bl	800619c <MPU6050_initialize>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000338 	.word	0x20000338

080010f0 <sensorTest_print_acc_values>:

void sensorTest_print_acc_values(void)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b09f      	sub	sp, #124	; 0x7c
 80010f4:	af04      	add	r7, sp, #16
    char buffer[100];
    int32_t len;

    MPU6050_read_data(&sensorData);
 80010f6:	4811      	ldr	r0, [pc, #68]	; (800113c <sensorTest_print_acc_values+0x4c>)
 80010f8:	f005 f950 	bl	800639c <MPU6050_read_data>

    len = sprintf(buffer,"Acc: X:%f Y:%f Z:%f\n",sensorData.acc.X, sensorData.acc.Y, sensorData.acc.Z );
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <sensorTest_print_acc_values+0x4c>)
 80010fe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <sensorTest_print_acc_values+0x4c>)
 8001104:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <sensorTest_print_acc_values+0x4c>)
 800110a:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800110e:	463e      	mov	r6, r7
 8001110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001114:	e9cd 2300 	strd	r2, r3, [sp]
 8001118:	4622      	mov	r2, r4
 800111a:	462b      	mov	r3, r5
 800111c:	4908      	ldr	r1, [pc, #32]	; (8001140 <sensorTest_print_acc_values+0x50>)
 800111e:	4630      	mov	r0, r6
 8001120:	f008 fc56 	bl	80099d0 <siprintf>
 8001124:	6678      	str	r0, [r7, #100]	; 0x64
    CDC_Transmit_FS((uint8_t *)buffer, len);
 8001126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001128:	b29a      	uxth	r2, r3
 800112a:	463b      	mov	r3, r7
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f007 fadc 	bl	80086ec <CDC_Transmit_FS>
}
 8001134:	bf00      	nop
 8001136:	376c      	adds	r7, #108	; 0x6c
 8001138:	46bd      	mov	sp, r7
 800113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113c:	20000338 	.word	0x20000338
 8001140:	0800bca0 	.word	0x0800bca0

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_MspInit+0x4c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_MspInit+0x4c>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_MspInit+0x4c>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001182:	2007      	movs	r0, #7
 8001184:	f000 faea 	bl	800175c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_I2C_MspInit+0x84>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12b      	bne.n	800120e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d2:	23c0      	movs	r3, #192	; 0xc0
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d6:	2312      	movs	r3, #18
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e2:	2304      	movs	r3, #4
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_I2C_MspInit+0x8c>)
 80011ee:	f000 faf7 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_I2C_MspInit+0x88>)
 80011fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_I2C_MspInit+0x88>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40005400 	.word	0x40005400
 800121c:	40023800 	.word	0x40023800
 8001220:	40020400 	.word	0x40020400

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f960 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <OTG_FS_IRQHandler+0x10>)
 800127e:	f001 fd8e 	bl	8002d9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20001870 	.word	0x20001870

0800128c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return 1;
 8001290:	2301      	movs	r3, #1
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <_kill>:

int _kill(int pid, int sig)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a6:	f008 fc49 	bl	8009b3c <__errno>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2216      	movs	r2, #22
 80012ae:	601a      	str	r2, [r3, #0]
  return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_exit>:

void _exit (int status)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffe7 	bl	800129c <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ce:	e7fe      	b.n	80012ce <_exit+0x12>

080012d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
  }

  return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e009      	b.n	8001330 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <_write+0x12>
  }
  return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
  return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f008 fbae 	bl	8009b3c <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20020000 	.word	0x20020000
 800140c:	00000400 	.word	0x00000400
 8001410:	20000388 	.word	0x20000388
 8001414:	200020e8 	.word	0x200020e8

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f008 fb6d 	bl	8009b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff fd19 	bl	8000ea4 <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001480:	0800c0b4 	.word	0x0800c0b4
  ldr r2, =_sbss
 8001484:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001488:	200020e8 	.word	0x200020e8

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f94f 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fe3e 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f967 	bl	80017c6 <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f92f 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000008 	.word	0x20000008
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	2000038c 	.word	0x2000038c

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	2000038c 	.word	0x2000038c

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff29 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff3e 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff8e 	bl	80016b0 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5d 	bl	800165c <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff31 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa2 	bl	8001718 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e16b      	b.n	8001ad4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 815a 	bne.w	8001ace <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80b4 	beq.w	8001ace <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b60      	ldr	r3, [pc, #384]	; (8001aec <HAL_GPIO_Init+0x30c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <HAL_GPIO_Init+0x30c>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_GPIO_Init+0x30c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a5b      	ldr	r2, [pc, #364]	; (8001af0 <HAL_GPIO_Init+0x310>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x314>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <HAL_GPIO_Init+0x318>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d025      	beq.n	8001a02 <HAL_GPIO_Init+0x222>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a50      	ldr	r2, [pc, #320]	; (8001afc <HAL_GPIO_Init+0x31c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_Init+0x21e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4f      	ldr	r2, [pc, #316]	; (8001b00 <HAL_GPIO_Init+0x320>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0x21a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <HAL_GPIO_Init+0x324>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x216>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <HAL_GPIO_Init+0x328>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x212>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <HAL_GPIO_Init+0x32c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x20e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_GPIO_Init+0x330>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x20a>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e00e      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019ea:	2308      	movs	r3, #8
 80019ec:	e00c      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019ee:	2306      	movs	r3, #6
 80019f0:	e00a      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019f2:	2305      	movs	r3, #5
 80019f4:	e008      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x228>
 8001a06:	2300      	movs	r3, #0
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f002 0203 	and.w	r2, r2, #3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x310>)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4a:	4a32      	ldr	r2, [pc, #200]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a50:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9e:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac8:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	f67f ae90 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40021c00 	.word	0x40021c00
 8001b14:	40013c00 	.word	0x40013c00

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b5c:	887a      	ldrh	r2, [r7, #2]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	041a      	lsls	r2, r3, #16
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	619a      	str	r2, [r3, #24]
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e12b      	b.n	8001dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff faf4 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be4:	f002 fe78 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8001be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a81      	ldr	r2, [pc, #516]	; (8001df4 <HAL_I2C_Init+0x274>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d807      	bhi.n	8001c04 <HAL_I2C_Init+0x84>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a80      	ldr	r2, [pc, #512]	; (8001df8 <HAL_I2C_Init+0x278>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bf94      	ite	ls
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	2300      	movhi	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	e006      	b.n	8001c12 <HAL_I2C_Init+0x92>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a7d      	ldr	r2, [pc, #500]	; (8001dfc <HAL_I2C_Init+0x27c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	bf94      	ite	ls
 8001c0c:	2301      	movls	r3, #1
 8001c0e:	2300      	movhi	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0e7      	b.n	8001dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4a78      	ldr	r2, [pc, #480]	; (8001e00 <HAL_I2C_Init+0x280>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	0c9b      	lsrs	r3, r3, #18
 8001c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4a6a      	ldr	r2, [pc, #424]	; (8001df4 <HAL_I2C_Init+0x274>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d802      	bhi.n	8001c54 <HAL_I2C_Init+0xd4>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3301      	adds	r3, #1
 8001c52:	e009      	b.n	8001c68 <HAL_I2C_Init+0xe8>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_I2C_Init+0x284>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	3301      	adds	r3, #1
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	495c      	ldr	r1, [pc, #368]	; (8001df4 <HAL_I2C_Init+0x274>)
 8001c84:	428b      	cmp	r3, r1
 8001c86:	d819      	bhi.n	8001cbc <HAL_I2C_Init+0x13c>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_I2C_Init+0x138>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1e59      	subs	r1, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb6:	e051      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e04f      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d111      	bne.n	8001ce8 <HAL_I2C_Init+0x168>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1e58      	subs	r0, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6859      	ldr	r1, [r3, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e012      	b.n	8001d0e <HAL_I2C_Init+0x18e>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e58      	subs	r0, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	0099      	lsls	r1, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Init+0x196>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e022      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10e      	bne.n	8001d3c <HAL_I2C_Init+0x1bc>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1e58      	subs	r0, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	440b      	add	r3, r1
 8001d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d30:	3301      	adds	r3, #1
 8001d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3a:	e00f      	b.n	8001d5c <HAL_I2C_Init+0x1dc>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1e58      	subs	r0, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	0099      	lsls	r1, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	6809      	ldr	r1, [r1, #0]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6911      	ldr	r1, [r2, #16]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68d2      	ldr	r2, [r2, #12]
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	000186a0 	.word	0x000186a0
 8001df8:	001e847f 	.word	0x001e847f
 8001dfc:	003d08ff 	.word	0x003d08ff
 8001e00:	431bde83 	.word	0x431bde83
 8001e04:	10624dd3 	.word	0x10624dd3

08001e08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	817b      	strh	r3, [r7, #10]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	813b      	strh	r3, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e22:	f7ff fb9b 	bl	800155c <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	f040 80d9 	bne.w	8001fe8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2319      	movs	r3, #25
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	496d      	ldr	r1, [pc, #436]	; (8001ff4 <HAL_I2C_Mem_Write+0x1ec>)
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fc7f 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0cc      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Mem_Write+0x56>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e0c5      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d007      	beq.n	8001e84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2221      	movs	r2, #33	; 0x21
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a4d      	ldr	r2, [pc, #308]	; (8001ff8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ec6:	88f8      	ldrh	r0, [r7, #6]
 8001ec8:	893a      	ldrh	r2, [r7, #8]
 8001eca:	8979      	ldrh	r1, [r7, #10]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fab6 	bl	8002448 <I2C_RequestMemoryWrite>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d052      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e081      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fd00 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00d      	beq.n	8001f12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d107      	bne.n	8001f0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e06b      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	781a      	ldrb	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d11b      	bne.n	8001f88 <HAL_I2C_Mem_Write+0x180>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d017      	beq.n	8001f88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1aa      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fcec 	bl	8002972 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d107      	bne.n	8001fb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e016      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	00100002 	.word	0x00100002
 8001ff8:	ffff0000 	.word	0xffff0000

08001ffc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002016:	f7ff faa1 	bl	800155c <HAL_GetTick>
 800201a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b20      	cmp	r3, #32
 8002026:	f040 8208 	bne.w	800243a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2319      	movs	r3, #25
 8002030:	2201      	movs	r2, #1
 8002032:	497b      	ldr	r1, [pc, #492]	; (8002220 <HAL_I2C_Mem_Read+0x224>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fb85 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	e1fb      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Mem_Read+0x56>
 800204e:	2302      	movs	r3, #2
 8002050:	e1f4      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d007      	beq.n	8002078 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2222      	movs	r2, #34	; 0x22
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	; 0x40
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a5b      	ldr	r2, [pc, #364]	; (8002224 <HAL_I2C_Mem_Read+0x228>)
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020ba:	88f8      	ldrh	r0, [r7, #6]
 80020bc:	893a      	ldrh	r2, [r7, #8]
 80020be:	8979      	ldrh	r1, [r7, #10]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4603      	mov	r3, r0
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa52 	bl	8002574 <I2C_RequestMemoryRead>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1b0      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d113      	bne.n	800210a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e184      	b.n	8002414 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	2b01      	cmp	r3, #1
 8002110:	d11b      	bne.n	800214a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e164      	b.n	8002414 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	2b02      	cmp	r3, #2
 8002150:	d11b      	bne.n	800218a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002160:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	e144      	b.n	8002414 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021a0:	e138      	b.n	8002414 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	f200 80f1 	bhi.w	800238e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d123      	bne.n	80021fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fc1b 	bl	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e139      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021fa:	e10b      	b.n	8002414 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	2b02      	cmp	r3, #2
 8002202:	d14e      	bne.n	80022a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220a:	2200      	movs	r2, #0
 800220c:	4906      	ldr	r1, [pc, #24]	; (8002228 <HAL_I2C_Mem_Read+0x22c>)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fa98 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e10e      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
 800221e:	bf00      	nop
 8002220:	00100002 	.word	0x00100002
 8002224:	ffff0000 	.word	0xffff0000
 8002228:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a0:	e0b8      	b.n	8002414 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	2200      	movs	r2, #0
 80022aa:	4966      	ldr	r1, [pc, #408]	; (8002444 <HAL_I2C_Mem_Read+0x448>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fa49 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0bf      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	2200      	movs	r2, #0
 8002306:	494f      	ldr	r1, [pc, #316]	; (8002444 <HAL_I2C_Mem_Read+0x448>)
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fa1b 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e091      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800238c:	e042      	b.n	8002414 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fb2e 	bl	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e04c      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d118      	bne.n	8002414 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	f47f aec2 	bne.w	80021a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3728      	adds	r7, #40	; 0x28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	00010004 	.word	0x00010004

08002448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4603      	mov	r3, r0
 8002458:	817b      	strh	r3, [r7, #10]
 800245a:	460b      	mov	r3, r1
 800245c:	813b      	strh	r3, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	2200      	movs	r2, #0
 800247a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f960 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002498:	d103      	bne.n	80024a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e05f      	b.n	8002566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	492d      	ldr	r1, [pc, #180]	; (8002570 <I2C_RequestMemoryWrite+0x128>)
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f998 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e04c      	b.n	8002566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	6a39      	ldr	r1, [r7, #32]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fa02 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00d      	beq.n	800250e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d107      	bne.n	800250a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e02b      	b.n	8002566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002514:	893b      	ldrh	r3, [r7, #8]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	611a      	str	r2, [r3, #16]
 800251e:	e021      	b.n	8002564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002520:	893b      	ldrh	r3, [r7, #8]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	b29b      	uxth	r3, r3
 8002526:	b2da      	uxtb	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002530:	6a39      	ldr	r1, [r7, #32]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9dc 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b04      	cmp	r3, #4
 8002544:	d107      	bne.n	8002556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e005      	b.n	8002566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800255a:	893b      	ldrh	r3, [r7, #8]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	00010002 	.word	0x00010002

08002574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	817b      	strh	r3, [r7, #10]
 8002586:	460b      	mov	r3, r1
 8002588:	813b      	strh	r3, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800259c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f8c2 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d4:	d103      	bne.n	80025de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0aa      	b.n	8002738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025e2:	897b      	ldrh	r3, [r7, #10]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	4952      	ldr	r1, [pc, #328]	; (8002740 <I2C_RequestMemoryRead+0x1cc>)
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f8fa 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e097      	b.n	8002738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	6a39      	ldr	r1, [r7, #32]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f964 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b04      	cmp	r3, #4
 8002634:	d107      	bne.n	8002646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e076      	b.n	8002738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002650:	893b      	ldrh	r3, [r7, #8]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e021      	b.n	80026a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800265c:	893b      	ldrh	r3, [r7, #8]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	b29b      	uxth	r3, r3
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	6a39      	ldr	r1, [r7, #32]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f93e 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00d      	beq.n	8002696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b04      	cmp	r3, #4
 8002680:	d107      	bne.n	8002692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e050      	b.n	8002738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002696:	893b      	ldrh	r3, [r7, #8]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	6a39      	ldr	r1, [r7, #32]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f923 	bl	80028f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00d      	beq.n	80026cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d107      	bne.n	80026c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e035      	b.n	8002738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f82b 	bl	8002744 <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002702:	d103      	bne.n	800270c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e013      	b.n	8002738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	6a3a      	ldr	r2, [r7, #32]
 8002724:	4906      	ldr	r1, [pc, #24]	; (8002740 <I2C_RequestMemoryRead+0x1cc>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f863 	bl	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	00010002 	.word	0x00010002

08002744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002754:	e025      	b.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d021      	beq.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fefd 	bl	800155c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e023      	b.n	80027ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10d      	bne.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	e00c      	b.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d0b6      	beq.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002800:	e051      	b.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d123      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800282a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e046      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d021      	beq.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe fe7b 	bl	800155c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e020      	b.n	80028e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10c      	bne.n	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e00b      	b.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	43da      	mvns	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d18d      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fc:	e02d      	b.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f8ce 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e02d      	b.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d021      	beq.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7fe fe21 	bl	800155c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d116      	bne.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e007      	b.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d1ca      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b084      	sub	sp, #16
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800297e:	e02d      	b.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f88d 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e02d      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d021      	beq.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe fde0 	bl	800155c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d302      	bcc.n	80029ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d1ca      	bne.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a00:	e042      	b.n	8002a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d119      	bne.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0210 	mvn.w	r2, #16
 8002a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e029      	b.n	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a44:	f7fe fd8a 	bl	800155c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e007      	b.n	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d1b5      	bne.n	8002a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d11b      	bne.n	8002af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f043 0204 	orr.w	r2, r3, #4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b00:	b08f      	sub	sp, #60	; 0x3c
 8002b02:	af0a      	add	r7, sp, #40	; 0x28
 8002b04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e10f      	b.n	8002d30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 ff26 	bl	800897c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2203      	movs	r2, #3
 8002b34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 ffeb 	bl	8004b2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	687e      	ldr	r6, [r7, #4]
 8002b5c:	466d      	mov	r5, sp
 8002b5e:	f106 0410 	add.w	r4, r6, #16
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b72:	1d33      	adds	r3, r6, #4
 8002b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f001 fec2 	bl	8004900 <USB_CoreInit>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0d0      	b.n	8002d30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 ffd9 	bl	8004b4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e04a      	b.n	8002c36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333d      	adds	r3, #61	; 0x3d
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	333c      	adds	r3, #60	; 0x3c
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	b298      	uxth	r0, r3
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3344      	adds	r3, #68	; 0x44
 8002bdc:	4602      	mov	r2, r0
 8002bde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3340      	adds	r3, #64	; 0x40
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3348      	adds	r3, #72	; 0x48
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334c      	adds	r3, #76	; 0x4c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3354      	adds	r3, #84	; 0x54
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	3301      	adds	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3af      	bcc.n	8002ba0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e044      	b.n	8002cd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3b5      	bcc.n	8002c46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	687e      	ldr	r6, [r7, #4]
 8002ce2:	466d      	mov	r5, sp
 8002ce4:	f106 0410 	add.w	r4, r6, #16
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf8:	1d33      	adds	r3, r6, #4
 8002cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	f001 ff71 	bl	8004be4 <USB_DevInit>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e00d      	b.n	8002d30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 f8c0 	bl	8005eae <USB_DevDisconnect>

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_PCD_Start+0x1c>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e020      	b.n	8002d96 <HAL_PCD_Start+0x5e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d109      	bne.n	8002d78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d005      	beq.n	8002d78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fec3 	bl	8004b08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 f870 	bl	8005e6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b08d      	sub	sp, #52	; 0x34
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 f92e 	bl	8006016 <USB_GetMode>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 848a 	bne.w	80036d6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 f892 	bl	8005ef0 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8480 	beq.w	80036d4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 f87f 	bl	8005ef0 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f002 0202 	and.w	r2, r2, #2
 8002e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 f86d 	bl	8005ef0 <USB_ReadInterrupts>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d161      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0210 	bic.w	r2, r2, #16
 8002e2e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	0c5b      	lsrs	r3, r3, #17
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d124      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d035      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6a38      	ldr	r0, [r7, #32]
 8002e7c:	f002 fea4 	bl	8005bc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	441a      	add	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9e:	441a      	add	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
 8002ea4:	e016      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	0c5b      	lsrs	r3, r3, #17
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d110      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eb8:	2208      	movs	r2, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6a38      	ldr	r0, [r7, #32]
 8002ebe:	f002 fe83 	bl	8005bc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ece:	441a      	add	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0210 	orr.w	r2, r2, #16
 8002ee2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 f801 	bl	8005ef0 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ef8:	f040 80a7 	bne.w	800304a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 f806 	bl	8005f16 <USB_ReadDevAllOutEpInterrupt>
 8002f0a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f0c:	e099      	b.n	8003042 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808e 	beq.w	8003036 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 f82a 	bl	8005f7e <USB_ReadDevOutEPInterrupt>
 8002f2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	2301      	movs	r3, #1
 8002f46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fec2 	bl	8003cd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f66:	461a      	mov	r2, r3
 8002f68:	2308      	movs	r3, #8
 8002f6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 ff98 	bl	8003ea4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d030      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d109      	bne.n	8002fba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	78db      	ldrb	r3, [r3, #3]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f005 fdcf 	bl	8008b88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2320      	movs	r3, #32
 8003016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302e:	461a      	mov	r2, r3
 8003030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003034:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	3301      	adds	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f47f af62 	bne.w	8002f0e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f002 ff4e 	bl	8005ef0 <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800305e:	f040 80db 	bne.w	8003218 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f002 ff6f 	bl	8005f4a <USB_ReadDevAllInEpInterrupt>
 800306c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003072:	e0cd      	b.n	8003210 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80c2 	beq.w	8003204 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f002 ff95 	bl	8005fba <USB_ReadDevInEPInterrupt>
 8003090:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d057      	beq.n	800314c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	2201      	movs	r2, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69f9      	ldr	r1, [r7, #28]
 80030b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030bc:	4013      	ands	r3, r2
 80030be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030cc:	461a      	mov	r2, r3
 80030ce:	2301      	movs	r3, #1
 80030d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d132      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	; 0x4c
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4403      	add	r3, r0
 80030fa:	3348      	adds	r3, #72	; 0x48
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4419      	add	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4403      	add	r3, r0
 800310e:	334c      	adds	r3, #76	; 0x4c
 8003110:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d113      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3354      	adds	r3, #84	; 0x54
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003138:	461a      	mov	r2, r3
 800313a:	2101      	movs	r1, #1
 800313c:	f002 ff9c 	bl	8006078 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	b2db      	uxtb	r3, r3
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f005 fc99 	bl	8008a7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003162:	461a      	mov	r2, r3
 8003164:	2308      	movs	r3, #8
 8003166:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317e:	461a      	mov	r2, r3
 8003180:	2310      	movs	r3, #16
 8003182:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	461a      	mov	r2, r3
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d023      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ac:	6a38      	ldr	r0, [r7, #32]
 80031ae:	f001 fe7d 	bl	8004eac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	3338      	adds	r3, #56	; 0x38
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	78db      	ldrb	r3, [r3, #3]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d108      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f005 fce6 	bl	8008bac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ec:	461a      	mov	r2, r3
 80031ee:	2302      	movs	r3, #2
 80031f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fcdb 	bl	8003bba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	3301      	adds	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f47f af2e 	bne.w	8003074 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f002 fe67 	bl	8005ef0 <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800322c:	d122      	bne.n	8003274 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003254:	2100      	movs	r1, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fec2 	bl	8003fe0 <HAL_PCDEx_LPM_Callback>
 800325c:	e002      	b.n	8003264 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f005 fc84 	bl	8008b6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fe39 	bl	8005ef0 <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003288:	d112      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f005 fc40 	bl	8008b20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fe1b 	bl	8005ef0 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	f040 80b7 	bne.w	8003436 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2110      	movs	r1, #16
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fde2 	bl	8004eac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ec:	e046      	b.n	800337c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	461a      	mov	r2, r3
 80032fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003300:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	440a      	add	r2, r1
 8003318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800331c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003320:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003334:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003346:	0151      	lsls	r1, r2, #5
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	440a      	add	r2, r1
 800334c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003354:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	440a      	add	r2, r1
 800336c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003370:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003374:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	3301      	adds	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	429a      	cmp	r2, r3
 8003384:	d3b3      	bcc.n	80032ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003398:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b2:	f043 030b 	orr.w	r3, r3, #11
 80033b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c8:	f043 030b 	orr.w	r3, r3, #11
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	e015      	b.n	80033fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f6:	f043 030b 	orr.w	r3, r3, #11
 80033fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800340e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003420:	461a      	mov	r2, r3
 8003422:	f002 fe29 	bl	8006078 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f002 fd58 	bl	8005ef0 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344a:	d124      	bne.n	8003496 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f002 fdee 	bl	8006032 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fda3 	bl	8004fa6 <USB_GetDevSpeed>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681c      	ldr	r4, [r3, #0]
 800346c:	f001 fa28 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	4620      	mov	r0, r4
 800347c:	f001 faa2 	bl	80049c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f005 fb24 	bl	8008ace <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f002 fd28 	bl	8005ef0 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d10a      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f005 fb01 	bl	8008ab2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f002 0208 	and.w	r2, r2, #8
 80034be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 fd13 	bl	8005ef0 <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d122      	bne.n	800351a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e0:	2301      	movs	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	e014      	b.n	8003510 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb27 	bl	8003b58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	429a      	cmp	r2, r3
 8003518:	d3e5      	bcc.n	80034e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fce6 	bl	8005ef0 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d13b      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003530:	2301      	movs	r3, #1
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	e02b      	b.n	800358e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3340      	adds	r3, #64	; 0x40
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d115      	bne.n	8003588 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800355c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	da12      	bge.n	8003588 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333f      	adds	r3, #63	; 0x3f
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fae8 	bl	8003b58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	3301      	adds	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	429a      	cmp	r2, r3
 8003596:	d3ce      	bcc.n	8003536 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f002 fc9f 	bl	8005ef0 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035bc:	d155      	bne.n	800366a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035be:	2301      	movs	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e045      	b.n	8003650 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d12e      	bne.n	800364a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da2b      	bge.n	800364a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003602:	429a      	cmp	r2, r3
 8003604:	d121      	bne.n	800364a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003646:	6053      	str	r3, [r2, #4]
            break;
 8003648:	e007      	b.n	800365a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	3301      	adds	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003656:	429a      	cmp	r2, r3
 8003658:	d3b4      	bcc.n	80035c4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f002 fc3e 	bl	8005ef0 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d10a      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f005 faa5 	bl	8008bd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f002 fc28 	bl	8005ef0 <USB_ReadInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d115      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f005 fa95 	bl	8008bec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e000      	b.n	80036d6 <HAL_PCD_IRQHandler+0x938>
      return;
 80036d4:	bf00      	nop
    }
  }
}
 80036d6:	3734      	adds	r7, #52	; 0x34
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd90      	pop	{r4, r7, pc}

080036dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_PCD_SetAddress+0x1a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e013      	b.n	800371e <HAL_PCD_SetAddress+0x42>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f002 fb86 	bl	8005e20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	4608      	mov	r0, r1
 8003730:	4611      	mov	r1, r2
 8003732:	461a      	mov	r2, r3
 8003734:	4603      	mov	r3, r0
 8003736:	70fb      	strb	r3, [r7, #3]
 8003738:	460b      	mov	r3, r1
 800373a:	803b      	strh	r3, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da0f      	bge.n	800376c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 020f 	and.w	r2, r3, #15
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3338      	adds	r3, #56	; 0x38
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	705a      	strb	r2, [r3, #1]
 800376a:	e00f      	b.n	800378c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 020f 	and.w	r2, r3, #15
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003798:	883a      	ldrh	r2, [r7, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	78ba      	ldrb	r2, [r7, #2]
 80037a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037b6:	78bb      	ldrb	r3, [r7, #2]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d102      	bne.n	80037c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_PCD_EP_Open+0xaa>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e00e      	b.n	80037ee <HAL_PCD_EP_Open+0xc8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fc06 	bl	8004ff0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037ec:	7afb      	ldrb	r3, [r7, #11]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da0f      	bge.n	800382a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	705a      	strb	r2, [r3, #1]
 8003828:	e00f      	b.n	800384a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_PCD_EP_Close+0x6e>
 8003860:	2302      	movs	r3, #2
 8003862:	e00e      	b.n	8003882 <HAL_PCD_EP_Close+0x8c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	4618      	mov	r0, r3
 8003874:	f001 fc44 	bl	8005100 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	460b      	mov	r3, r1
 8003898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	3304      	adds	r3, #4
 80038b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d102      	bne.n	80038e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6979      	ldr	r1, [r7, #20]
 80038fe:	f001 ff23 	bl	8005748 <USB_EP0StartXfer>
 8003902:	e008      	b.n	8003916 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	f001 fcd1 	bl	80052b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 020f 	and.w	r2, r3, #15
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	460b      	mov	r3, r1
 800395e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	f003 020f 	and.w	r2, r3, #15
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	3338      	adds	r3, #56	; 0x38
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	3304      	adds	r3, #4
 8003976:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2201      	movs	r2, #1
 800398e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003990:	7afb      	ldrb	r3, [r7, #11]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	b2da      	uxtb	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d102      	bne.n	80039aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	6979      	ldr	r1, [r7, #20]
 80039c2:	f001 fec1 	bl	8005748 <USB_EP0StartXfer>
 80039c6:	e008      	b.n	80039da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	6979      	ldr	r1, [r7, #20]
 80039d6:	f001 fc6f 	bl	80052b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d901      	bls.n	8003a02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e050      	b.n	8003aa4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0f      	bge.n	8003a2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	3338      	adds	r3, #56	; 0x38
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	705a      	strb	r2, [r3, #1]
 8003a28:	e00d      	b.n	8003a46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_PCD_EP_SetStall+0x82>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e01e      	b.n	8003aa4 <HAL_PCD_EP_SetStall+0xc0>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f002 f8ff 	bl	8005c78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	b2d9      	uxtb	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a94:	461a      	mov	r2, r3
 8003a96:	f002 faef 	bl	8006078 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d901      	bls.n	8003aca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e042      	b.n	8003b50 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da0f      	bge.n	8003af2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 020f 	and.w	r2, r3, #15
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	3338      	adds	r3, #56	; 0x38
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	705a      	strb	r2, [r3, #1]
 8003af0:	e00f      	b.n	8003b12 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_PCD_EP_ClrStall+0x86>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e00e      	b.n	8003b50 <HAL_PCD_EP_ClrStall+0xa4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 f907 	bl	8005d54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da0c      	bge.n	8003b86 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	3338      	adds	r3, #56	; 0x38
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e00c      	b.n	8003ba0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 020f 	and.w	r2, r3, #15
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 ff26 	bl	80059f8 <USB_EPStopXfer>
 8003bac:	4603      	mov	r3, r0
 8003bae:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08a      	sub	sp, #40	; 0x28
 8003bbe:	af02      	add	r7, sp, #8
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	3338      	adds	r3, #56	; 0x38
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1a      	ldr	r2, [r3, #32]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d901      	bls.n	8003bf2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06c      	b.n	8003ccc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d902      	bls.n	8003c0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3303      	adds	r3, #3
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c16:	e02b      	b.n	8003c70 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d902      	bls.n	8003c34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3303      	adds	r3, #3
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6919      	ldr	r1, [r3, #16]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4603      	mov	r3, r0
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f001 ff7a 	bl	8005b4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	441a      	add	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d809      	bhi.n	8003c9a <PCD_WriteEmptyTxFifo+0xe0>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1a      	ldr	r2, [r3, #32]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d203      	bcs.n	8003c9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1be      	bne.n	8003c18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d811      	bhi.n	8003cca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2201      	movs	r2, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	333c      	adds	r3, #60	; 0x3c
 8003cec:	3304      	adds	r3, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d17b      	bne.n	8003e02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d015      	beq.n	8003d40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4a61      	ldr	r2, [pc, #388]	; (8003e9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	f240 80b9 	bls.w	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80b3 	beq.w	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3c:	6093      	str	r3, [r2, #8]
 8003d3e:	e0a7      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	461a      	mov	r2, r3
 8003d58:	2320      	movs	r3, #32
 8003d5a:	6093      	str	r3, [r2, #8]
 8003d5c:	e098      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 8093 	bne.w	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4a4b      	ldr	r2, [pc, #300]	; (8003e9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d90f      	bls.n	8003d92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8e:	6093      	str	r3, [r2, #8]
 8003d90:	e07e      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	0159      	lsls	r1, r3, #5
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	440b      	add	r3, r1
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d114      	bne.n	8003df4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2101      	movs	r1, #1
 8003de0:	f002 f94a 	bl	8006078 <USB_EP0_OutStart>
 8003de4:	e006      	b.n	8003df4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	441a      	add	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f004 fe24 	bl	8008a48 <HAL_PCD_DataOutStageCallback>
 8003e00:	e046      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d124      	bne.n	8003e54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	461a      	mov	r2, r3
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	6093      	str	r3, [r2, #8]
 8003e28:	e032      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	461a      	mov	r2, r3
 8003e42:	2320      	movs	r3, #32
 8003e44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f004 fdfb 	bl	8008a48 <HAL_PCD_DataOutStageCallback>
 8003e52:	e01d      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d114      	bne.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f002 f8fa 	bl	8006078 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f004 fddc 	bl	8008a48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	4f54300a 	.word	0x4f54300a
 8003ea0:	4f54310a 	.word	0x4f54310a

08003ea4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	333c      	adds	r3, #60	; 0x3c
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <PCD_EP_OutSetupPacket_int+0x88>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d90e      	bls.n	8003ef8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f004 fd93 	bl	8008a24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d90c      	bls.n	8003f20 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	f002 f8ac 	bl	8006078 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	4f54300a 	.word	0x4f54300a

08003f30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d107      	bne.n	8003f5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f4e:	883b      	ldrh	r3, [r7, #0]
 8003f50:	0419      	lsls	r1, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f5c:	e028      	b.n	8003fb0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	4413      	add	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e00d      	b.n	8003f8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	3340      	adds	r3, #64	; 0x40
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	4413      	add	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3ec      	bcc.n	8003f72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f98:	883b      	ldrh	r3, [r7, #0]
 8003f9a:	0418      	lsls	r0, r3, #16
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	4302      	orrs	r2, r0
 8003fa8:	3340      	adds	r3, #64	; 0x40
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e267      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d075      	beq.n	8004102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004016:	4b88      	ldr	r3, [pc, #544]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d00c      	beq.n	800403c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402a:	2b08      	cmp	r3, #8
 800402c:	d112      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402e:	4b82      	ldr	r3, [pc, #520]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403a:	d10b      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	4b7e      	ldr	r3, [pc, #504]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05b      	beq.n	8004100 <HAL_RCC_OscConfig+0x108>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d157      	bne.n	8004100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e242      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d106      	bne.n	800406c <HAL_RCC_OscConfig+0x74>
 800405e:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a75      	ldr	r2, [pc, #468]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x98>
 8004076:	4b70      	ldr	r3, [pc, #448]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6f      	ldr	r2, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6c      	ldr	r2, [pc, #432]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 8004090:	4b69      	ldr	r3, [pc, #420]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a68      	ldr	r2, [pc, #416]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b66      	ldr	r3, [pc, #408]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a65      	ldr	r2, [pc, #404]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fd fa54 	bl	800155c <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fd fa50 	bl	800155c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e207      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b5b      	ldr	r3, [pc, #364]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xc0>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fd fa40 	bl	800155c <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fd fa3c 	bl	800155c <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1f3      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	4b51      	ldr	r3, [pc, #324]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0xe8>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d063      	beq.n	80041d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410e:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004122:	2b08      	cmp	r3, #8
 8004124:	d11c      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004126:	4b44      	ldr	r3, [pc, #272]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e1c7      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4937      	ldr	r1, [pc, #220]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	e03a      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	4b34      	ldr	r3, [pc, #208]	; (800423c <HAL_RCC_OscConfig+0x244>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd f9f5 	bl	800155c <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004176:	f7fd f9f1 	bl	800155c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1a8      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b28      	ldr	r3, [pc, #160]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4925      	ldr	r1, [pc, #148]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	e015      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCC_OscConfig+0x244>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd f9d4 	bl	800155c <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b8:	f7fd f9d0 	bl	800155c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e187      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d036      	beq.n	8004250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <HAL_RCC_OscConfig+0x248>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fd f9b4 	bl	800155c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f8:	f7fd f9b0 	bl	800155c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e167      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x200>
 8004216:	e01b      	b.n	8004250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_OscConfig+0x248>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fd f99d 	bl	800155c <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	e00e      	b.n	8004244 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004226:	f7fd f999 	bl	800155c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d907      	bls.n	8004244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e150      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
 8004238:	40023800 	.word	0x40023800
 800423c:	42470000 	.word	0x42470000
 8004240:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	4b88      	ldr	r3, [pc, #544]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ea      	bne.n	8004226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8097 	beq.w	800438c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004262:	4b81      	ldr	r3, [pc, #516]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	4b7d      	ldr	r3, [pc, #500]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	4a7c      	ldr	r2, [pc, #496]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
 800427e:	4b7a      	ldr	r3, [pc, #488]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	4b77      	ldr	r3, [pc, #476]	; (800446c <HAL_RCC_OscConfig+0x474>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d118      	bne.n	80042cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429a:	4b74      	ldr	r3, [pc, #464]	; (800446c <HAL_RCC_OscConfig+0x474>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a73      	ldr	r2, [pc, #460]	; (800446c <HAL_RCC_OscConfig+0x474>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a6:	f7fd f959 	bl	800155c <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ae:	f7fd f955 	bl	800155c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e10c      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_RCC_OscConfig+0x474>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x2ea>
 80042d4:	4b64      	ldr	r3, [pc, #400]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a63      	ldr	r2, [pc, #396]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
 80042e0:	e01c      	b.n	800431c <HAL_RCC_OscConfig+0x324>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x30c>
 80042ea:	4b5f      	ldr	r3, [pc, #380]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a5e      	ldr	r2, [pc, #376]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
 80042f6:	4b5c      	ldr	r3, [pc, #368]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a5b      	ldr	r2, [pc, #364]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0x324>
 8004304:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a57      	ldr	r2, [pc, #348]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
 8004310:	4b55      	ldr	r3, [pc, #340]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a54      	ldr	r2, [pc, #336]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004316:	f023 0304 	bic.w	r3, r3, #4
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd f91a 	bl	800155c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fd f916 	bl	800155c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0cb      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	4b49      	ldr	r3, [pc, #292]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ee      	beq.n	800432c <HAL_RCC_OscConfig+0x334>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004350:	f7fd f904 	bl	800155c <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fd f900 	bl	800155c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e0b5      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436e:	4b3e      	ldr	r3, [pc, #248]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ee      	bne.n	8004358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800437a:	7dfb      	ldrb	r3, [r7, #23]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004380:	4b39      	ldr	r3, [pc, #228]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80a1 	beq.w	80044d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004396:	4b34      	ldr	r3, [pc, #208]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d05c      	beq.n	800445c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d141      	bne.n	800442e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b31      	ldr	r3, [pc, #196]	; (8004470 <HAL_RCC_OscConfig+0x478>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7fd f8d4 	bl	800155c <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fd f8d0 	bl	800155c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e087      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	491b      	ldr	r1, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x478>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fd f8a9 	bl	800155c <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fd f8a5 	bl	800155c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e05c      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x416>
 800442c:	e054      	b.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_RCC_OscConfig+0x478>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fd f892 	bl	800155c <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fd f88e 	bl	800155c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e045      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x444>
 800445a:	e03d      	b.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e038      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
 8004468:	40023800 	.word	0x40023800
 800446c:	40007000 	.word	0x40007000
 8004470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_RCC_OscConfig+0x4ec>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d028      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d121      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d11a      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	3b01      	subs	r3, #1
 80044be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d107      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800

080044e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0cc      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d90c      	bls.n	8004524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b8      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800455e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	494d      	ldr	r1, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d044      	beq.n	8004608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d119      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e067      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4934      	ldr	r1, [pc, #208]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d8:	f7fc ffc0 	bl	800155c <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fc ffbc 	bl	800155c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d20c      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e032      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4916      	ldr	r1, [pc, #88]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800466e:	f000 f821 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490a      	ldr	r1, [pc, #40]	; (80046a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc ff20 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023c00 	.word	0x40023c00
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0800bd18 	.word	0x0800bd18
 80046ac:	20000000 	.word	0x20000000
 80046b0:	20000004 	.word	0x20000004

080046b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b8:	b094      	sub	sp, #80	; 0x50
 80046ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	647b      	str	r3, [r7, #68]	; 0x44
 80046c0:	2300      	movs	r3, #0
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c4:	2300      	movs	r3, #0
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046cc:	4b79      	ldr	r3, [pc, #484]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d00d      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x40>
 80046d8:	2b08      	cmp	r3, #8
 80046da:	f200 80e1 	bhi.w	80048a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x34>
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x3a>
 80046e6:	e0db      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b73      	ldr	r3, [pc, #460]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80046ec:	e0db      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ee:	4b73      	ldr	r3, [pc, #460]	; (80048bc <HAL_RCC_GetSysClockFreq+0x208>)
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046f2:	e0d8      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f4:	4b6f      	ldr	r3, [pc, #444]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046fe:	4b6d      	ldr	r3, [pc, #436]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d063      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	2200      	movs	r2, #0
 8004712:	63bb      	str	r3, [r7, #56]	; 0x38
 8004714:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471c:	633b      	str	r3, [r7, #48]	; 0x30
 800471e:	2300      	movs	r3, #0
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
 8004722:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004726:	4622      	mov	r2, r4
 8004728:	462b      	mov	r3, r5
 800472a:	f04f 0000 	mov.w	r0, #0
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	0159      	lsls	r1, r3, #5
 8004734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004738:	0150      	lsls	r0, r2, #5
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4621      	mov	r1, r4
 8004740:	1a51      	subs	r1, r2, r1
 8004742:	6139      	str	r1, [r7, #16]
 8004744:	4629      	mov	r1, r5
 8004746:	eb63 0301 	sbc.w	r3, r3, r1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004758:	4659      	mov	r1, fp
 800475a:	018b      	lsls	r3, r1, #6
 800475c:	4651      	mov	r1, sl
 800475e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004762:	4651      	mov	r1, sl
 8004764:	018a      	lsls	r2, r1, #6
 8004766:	4651      	mov	r1, sl
 8004768:	ebb2 0801 	subs.w	r8, r2, r1
 800476c:	4659      	mov	r1, fp
 800476e:	eb63 0901 	sbc.w	r9, r3, r1
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004786:	4690      	mov	r8, r2
 8004788:	4699      	mov	r9, r3
 800478a:	4623      	mov	r3, r4
 800478c:	eb18 0303 	adds.w	r3, r8, r3
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	462b      	mov	r3, r5
 8004794:	eb49 0303 	adc.w	r3, r9, r3
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047a6:	4629      	mov	r1, r5
 80047a8:	024b      	lsls	r3, r1, #9
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047b0:	4621      	mov	r1, r4
 80047b2:	024a      	lsls	r2, r1, #9
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047c4:	f7fc f9f0 	bl	8000ba8 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d0:	e058      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d2:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	2200      	movs	r2, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	4611      	mov	r1, r2
 80047de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047e2:	623b      	str	r3, [r7, #32]
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047ec:	4642      	mov	r2, r8
 80047ee:	464b      	mov	r3, r9
 80047f0:	f04f 0000 	mov.w	r0, #0
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	0159      	lsls	r1, r3, #5
 80047fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047fe:	0150      	lsls	r0, r2, #5
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4641      	mov	r1, r8
 8004806:	ebb2 0a01 	subs.w	sl, r2, r1
 800480a:	4649      	mov	r1, r9
 800480c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800481c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004824:	ebb2 040a 	subs.w	r4, r2, sl
 8004828:	eb63 050b 	sbc.w	r5, r3, fp
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	00eb      	lsls	r3, r5, #3
 8004836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800483a:	00e2      	lsls	r2, r4, #3
 800483c:	4614      	mov	r4, r2
 800483e:	461d      	mov	r5, r3
 8004840:	4643      	mov	r3, r8
 8004842:	18e3      	adds	r3, r4, r3
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	464b      	mov	r3, r9
 8004848:	eb45 0303 	adc.w	r3, r5, r3
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800485a:	4629      	mov	r1, r5
 800485c:	028b      	lsls	r3, r1, #10
 800485e:	4621      	mov	r1, r4
 8004860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004864:	4621      	mov	r1, r4
 8004866:	028a      	lsls	r2, r1, #10
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486e:	2200      	movs	r2, #0
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	61fa      	str	r2, [r7, #28]
 8004874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004878:	f7fc f996 	bl	8000ba8 <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4613      	mov	r3, r2
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	3301      	adds	r3, #1
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800489e:	e002      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3750      	adds	r7, #80	; 0x50
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
 80048b8:	00f42400 	.word	0x00f42400
 80048bc:	007a1200 	.word	0x007a1200

080048c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000000 	.word	0x20000000

080048d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048dc:	f7ff fff0 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0a9b      	lsrs	r3, r3, #10
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	0800bd28 	.word	0x0800bd28

08004900 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004900:	b084      	sub	sp, #16
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	f107 001c 	add.w	r0, r7, #28
 800490e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	2b01      	cmp	r3, #1
 8004916:	d122      	bne.n	800495e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800492c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f001 fbee 	bl	8006134 <USB_CoreReset>
 8004958:	4603      	mov	r3, r0
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e01a      	b.n	8004994 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f001 fbe2 	bl	8006134 <USB_CoreReset>
 8004970:	4603      	mov	r3, r0
 8004972:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
 8004986:	e005      	b.n	8004994 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	2b01      	cmp	r3, #1
 8004998:	d10b      	bne.n	80049b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f043 0206 	orr.w	r2, r3, #6
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049be:	b004      	add	sp, #16
 80049c0:	4770      	bx	lr
	...

080049c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d165      	bne.n	8004aa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4a41      	ldr	r2, [pc, #260]	; (8004ae0 <USB_SetTurnaroundTime+0x11c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d906      	bls.n	80049ee <USB_SetTurnaroundTime+0x2a>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a40      	ldr	r2, [pc, #256]	; (8004ae4 <USB_SetTurnaroundTime+0x120>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d202      	bcs.n	80049ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049e8:	230f      	movs	r3, #15
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e062      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4a3c      	ldr	r2, [pc, #240]	; (8004ae4 <USB_SetTurnaroundTime+0x120>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d306      	bcc.n	8004a04 <USB_SetTurnaroundTime+0x40>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a3b      	ldr	r2, [pc, #236]	; (8004ae8 <USB_SetTurnaroundTime+0x124>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d202      	bcs.n	8004a04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049fe:	230e      	movs	r3, #14
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e057      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <USB_SetTurnaroundTime+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d306      	bcc.n	8004a1a <USB_SetTurnaroundTime+0x56>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4a37      	ldr	r2, [pc, #220]	; (8004aec <USB_SetTurnaroundTime+0x128>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d202      	bcs.n	8004a1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a14:	230d      	movs	r3, #13
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e04c      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a33      	ldr	r2, [pc, #204]	; (8004aec <USB_SetTurnaroundTime+0x128>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d306      	bcc.n	8004a30 <USB_SetTurnaroundTime+0x6c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4a32      	ldr	r2, [pc, #200]	; (8004af0 <USB_SetTurnaroundTime+0x12c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d802      	bhi.n	8004a30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e041      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a2f      	ldr	r2, [pc, #188]	; (8004af0 <USB_SetTurnaroundTime+0x12c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d906      	bls.n	8004a46 <USB_SetTurnaroundTime+0x82>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a2e      	ldr	r2, [pc, #184]	; (8004af4 <USB_SetTurnaroundTime+0x130>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d802      	bhi.n	8004a46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a40:	230b      	movs	r3, #11
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e036      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <USB_SetTurnaroundTime+0x130>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d906      	bls.n	8004a5c <USB_SetTurnaroundTime+0x98>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <USB_SetTurnaroundTime+0x134>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d802      	bhi.n	8004a5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a56:	230a      	movs	r3, #10
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e02b      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <USB_SetTurnaroundTime+0x134>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d906      	bls.n	8004a72 <USB_SetTurnaroundTime+0xae>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a25      	ldr	r2, [pc, #148]	; (8004afc <USB_SetTurnaroundTime+0x138>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d202      	bcs.n	8004a72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a6c:	2309      	movs	r3, #9
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e020      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4a21      	ldr	r2, [pc, #132]	; (8004afc <USB_SetTurnaroundTime+0x138>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d306      	bcc.n	8004a88 <USB_SetTurnaroundTime+0xc4>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <USB_SetTurnaroundTime+0x13c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d802      	bhi.n	8004a88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a82:	2308      	movs	r3, #8
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e015      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <USB_SetTurnaroundTime+0x13c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d906      	bls.n	8004a9e <USB_SetTurnaroundTime+0xda>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <USB_SetTurnaroundTime+0x140>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d202      	bcs.n	8004a9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a98:	2307      	movs	r3, #7
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e00a      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a9e:	2306      	movs	r3, #6
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e007      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004aaa:	2309      	movs	r3, #9
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e001      	b.n	8004ab4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ab0:	2309      	movs	r3, #9
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	029b      	lsls	r3, r3, #10
 8004ac8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	00d8acbf 	.word	0x00d8acbf
 8004ae4:	00e4e1c0 	.word	0x00e4e1c0
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	01067380 	.word	0x01067380
 8004af0:	011a499f 	.word	0x011a499f
 8004af4:	01312cff 	.word	0x01312cff
 8004af8:	014ca43f 	.word	0x014ca43f
 8004afc:	016e3600 	.word	0x016e3600
 8004b00:	01a6ab1f 	.word	0x01a6ab1f
 8004b04:	01e84800 	.word	0x01e84800

08004b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0201 	bic.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d115      	bne.n	8004b9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	f7fc fcfa 	bl	8001574 <HAL_Delay>
      ms++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 fa45 	bl	8006016 <USB_GetMode>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d01e      	beq.n	8004bd0 <USB_SetCurrentMode+0x84>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b31      	cmp	r3, #49	; 0x31
 8004b96:	d9f0      	bls.n	8004b7a <USB_SetCurrentMode+0x2e>
 8004b98:	e01a      	b.n	8004bd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d115      	bne.n	8004bcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bac:	2001      	movs	r0, #1
 8004bae:	f7fc fce1 	bl	8001574 <HAL_Delay>
      ms++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 fa2c 	bl	8006016 <USB_GetMode>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <USB_SetCurrentMode+0x84>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b31      	cmp	r3, #49	; 0x31
 8004bc8:	d9f0      	bls.n	8004bac <USB_SetCurrentMode+0x60>
 8004bca:	e001      	b.n	8004bd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e005      	b.n	8004bdc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b32      	cmp	r3, #50	; 0x32
 8004bd4:	d101      	bne.n	8004bda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004be4:	b084      	sub	sp, #16
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	e009      	b.n	8004c18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3340      	adds	r3, #64	; 0x40
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3301      	adds	r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b0e      	cmp	r3, #14
 8004c1c:	d9f2      	bls.n	8004c04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11c      	bne.n	8004c5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c32:	f043 0302 	orr.w	r3, r3, #2
 8004c36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c5c:	e00b      	b.n	8004c76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c88:	4619      	mov	r1, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c90:	461a      	mov	r2, r3
 8004c92:	680b      	ldr	r3, [r1, #0]
 8004c94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10c      	bne.n	8004cb6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f965 	bl	8004f74 <USB_SetDevSpeed>
 8004caa:	e008      	b.n	8004cbe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cac:	2101      	movs	r1, #1
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f960 	bl	8004f74 <USB_SetDevSpeed>
 8004cb4:	e003      	b.n	8004cbe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cb6:	2103      	movs	r1, #3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f95b 	bl	8004f74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cbe:	2110      	movs	r1, #16
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8f3 	bl	8004eac <USB_FlushTxFifo>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f91f 	bl	8004f14 <USB_FlushRxFifo>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	e043      	b.n	8004d92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d20:	d118      	bne.n	8004d54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	461a      	mov	r2, r3
 8004d36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	e013      	b.n	8004d66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e008      	b.n	8004d66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	461a      	mov	r2, r3
 8004d74:	2300      	movs	r3, #0
 8004d76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	461a      	mov	r2, r3
 8004d86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d3b7      	bcc.n	8004d0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	e043      	b.n	8004e28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db6:	d118      	bne.n	8004dea <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e013      	b.n	8004dfc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de0:	461a      	mov	r2, r3
 8004de2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	e008      	b.n	8004dfc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	461a      	mov	r2, r3
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	3301      	adds	r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3b7      	bcc.n	8004da0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d105      	bne.n	8004e64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f043 0210 	orr.w	r2, r3, #16
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699a      	ldr	r2, [r3, #24]
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <USB_DevInit+0x2c4>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f043 0208 	orr.w	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e90:	f043 0304 	orr.w	r3, r3, #4
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ea4:	b004      	add	sp, #16
 8004ea6:	4770      	bx	lr
 8004ea8:	803c3800 	.word	0x803c3800

08004eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <USB_FlushTxFifo+0x64>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e01b      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	daf2      	bge.n	8004eba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	019b      	lsls	r3, r3, #6
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <USB_FlushTxFifo+0x64>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e006      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d0f0      	beq.n	8004ee4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	00030d40 	.word	0x00030d40

08004f14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <USB_FlushRxFifo+0x5c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e018      	b.n	8004f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	daf2      	bge.n	8004f20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2210      	movs	r2, #16
 8004f42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <USB_FlushRxFifo+0x5c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e006      	b.n	8004f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d0f0      	beq.n	8004f44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	00030d40 	.word	0x00030d40

08004f74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0306 	and.w	r3, r3, #6
 8004fbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
 8004fca:	e00a      	b.n	8004fe2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d002      	beq.n	8004fd8 <USB_GetDevSpeed+0x32>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d102      	bne.n	8004fde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	75fb      	strb	r3, [r7, #23]
 8004fdc:	e001      	b.n	8004fe2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fde:	230f      	movs	r3, #15
 8004fe0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d13a      	bne.n	8005082 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	b29b      	uxth	r3, r3
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800502a:	4313      	orrs	r3, r2
 800502c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d155      	bne.n	80050f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	791b      	ldrb	r3, [r3, #4]
 800505e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005060:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	059b      	lsls	r3, r3, #22
 8005066:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005068:	4313      	orrs	r3, r2
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e036      	b.n	80050f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11a      	bne.n	80050f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	791b      	ldrb	r3, [r3, #4]
 80050d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050d6:	430b      	orrs	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d161      	bne.n	80051e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005132:	d11f      	bne.n	8005174 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005152:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005172:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	2101      	movs	r1, #1
 8005186:	fa01 f303 	lsl.w	r3, r1, r3
 800518a:	b29b      	uxth	r3, r3
 800518c:	43db      	mvns	r3, r3
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005194:	4013      	ands	r3, r2
 8005196:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f303 	lsl.w	r3, r1, r3
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b8:	4013      	ands	r3, r2
 80051ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	0159      	lsls	r1, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	440b      	add	r3, r1
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	4619      	mov	r1, r3
 80051d8:	4b35      	ldr	r3, [pc, #212]	; (80052b0 <USB_DeactivateEndpoint+0x1b0>)
 80051da:	4013      	ands	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
 80051de:	e060      	b.n	80052a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f6:	d11f      	bne.n	8005238 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005212:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005216:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	440a      	add	r2, r1
 800522e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005236:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	43db      	mvns	r3, r3
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005258:	4013      	ands	r3, r2
 800525a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	2101      	movs	r1, #1
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	43db      	mvns	r3, r3
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800527c:	4013      	ands	r3, r2
 800527e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0159      	lsls	r1, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	440b      	add	r3, r1
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	4619      	mov	r1, r3
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <USB_DeactivateEndpoint+0x1b4>)
 800529e:	4013      	ands	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	ec337800 	.word	0xec337800
 80052b4:	eff37800 	.word	0xeff37800

080052b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	; 0x28
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	f040 815c 	bne.w	8005592 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d132      	bne.n	8005348 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005340:	0cdb      	lsrs	r3, r3, #19
 8005342:	04db      	lsls	r3, r3, #19
 8005344:	6113      	str	r3, [r2, #16]
 8005346:	e074      	b.n	8005432 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005362:	0cdb      	lsrs	r3, r3, #19
 8005364:	04db      	lsls	r3, r3, #19
 8005366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800538a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6999      	ldr	r1, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	440b      	add	r3, r1
 80053a4:	1e59      	subs	r1, r3, #1
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053b0:	4b9d      	ldr	r3, [pc, #628]	; (8005628 <USB_EPStartXfer+0x370>)
 80053b2:	400b      	ands	r3, r1
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	0148      	lsls	r0, r1, #5
 80053b8:	69f9      	ldr	r1, [r7, #28]
 80053ba:	4401      	add	r1, r0
 80053bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053c0:	4313      	orrs	r3, r2
 80053c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	0148      	lsls	r0, r1, #5
 80053de:	69f9      	ldr	r1, [r7, #28]
 80053e0:	4401      	add	r1, r0
 80053e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053e6:	4313      	orrs	r3, r2
 80053e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	791b      	ldrb	r3, [r3, #4]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d11f      	bne.n	8005432 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005410:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005430:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d14b      	bne.n	80054d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	461a      	mov	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	791b      	ldrb	r3, [r3, #4]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d128      	bne.n	80054ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d110      	bne.n	800548e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005486:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e00f      	b.n	80054ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e133      	b.n	8005738 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	791b      	ldrb	r3, [r3, #4]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d015      	beq.n	8005524 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 811b 	beq.w	8005738 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	2101      	movs	r1, #1
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	69f9      	ldr	r1, [r7, #28]
 800551a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800551e:	4313      	orrs	r3, r2
 8005520:	634b      	str	r3, [r1, #52]	; 0x34
 8005522:	e109      	b.n	8005738 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d110      	bne.n	8005556 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	e00f      	b.n	8005576 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005574:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6919      	ldr	r1, [r3, #16]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781a      	ldrb	r2, [r3, #0]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	b298      	uxth	r0, r3
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4603      	mov	r3, r0
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fade 	bl	8005b4c <USB_WritePacket>
 8005590:	e0d2      	b.n	8005738 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ac:	0cdb      	lsrs	r3, r3, #19
 80055ae:	04db      	lsls	r3, r3, #19
 80055b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d126      	bne.n	800562c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	0148      	lsls	r0, r1, #5
 80055f8:	69f9      	ldr	r1, [r7, #28]
 80055fa:	4401      	add	r1, r0
 80055fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005600:	4313      	orrs	r3, r2
 8005602:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	440a      	add	r2, r1
 800561a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005622:	6113      	str	r3, [r2, #16]
 8005624:	e03a      	b.n	800569c <USB_EPStartXfer+0x3e4>
 8005626:	bf00      	nop
 8005628:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	699a      	ldr	r2, [r3, #24]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4413      	add	r3, r2
 8005636:	1e5a      	subs	r2, r3, #1
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	8afa      	ldrh	r2, [r7, #22]
 8005648:	fb03 f202 	mul.w	r2, r3, r2
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	8afb      	ldrh	r3, [r7, #22]
 8005660:	04d9      	lsls	r1, r3, #19
 8005662:	4b38      	ldr	r3, [pc, #224]	; (8005744 <USB_EPStartXfer+0x48c>)
 8005664:	400b      	ands	r3, r1
 8005666:	69b9      	ldr	r1, [r7, #24]
 8005668:	0148      	lsls	r0, r1, #5
 800566a:	69f9      	ldr	r1, [r7, #28]
 800566c:	4401      	add	r1, r0
 800566e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005672:	4313      	orrs	r3, r2
 8005674:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	0148      	lsls	r0, r1, #5
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	4401      	add	r1, r0
 8005694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d10d      	bne.n	80056be <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6919      	ldr	r1, [r3, #16]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	460a      	mov	r2, r1
 80056bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	791b      	ldrb	r3, [r3, #4]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d128      	bne.n	8005718 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d110      	bne.n	80056f8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e00f      	b.n	8005718 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005716:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	1ff80000 	.word	0x1ff80000

08005748 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b01      	cmp	r3, #1
 8005766:	f040 80ce 	bne.w	8005906 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d132      	bne.n	80057d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005790:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d0:	0cdb      	lsrs	r3, r3, #19
 80057d2:	04db      	lsls	r3, r3, #19
 80057d4:	6113      	str	r3, [r2, #16]
 80057d6:	e04e      	b.n	8005876 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f2:	0cdb      	lsrs	r3, r3, #19
 80057f4:	04db      	lsls	r3, r3, #19
 80057f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005816:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800581a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d903      	bls.n	8005830 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800584e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005866:	6939      	ldr	r1, [r7, #16]
 8005868:	0148      	lsls	r0, r1, #5
 800586a:	6979      	ldr	r1, [r7, #20]
 800586c:	4401      	add	r1, r0
 800586e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005872:	4313      	orrs	r3, r2
 8005874:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11e      	bne.n	80058ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005890:	461a      	mov	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	e097      	b.n	80059ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8083 	beq.w	80059ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	2101      	movs	r1, #1
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	6979      	ldr	r1, [r7, #20]
 80058fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005900:	4313      	orrs	r3, r2
 8005902:	634b      	str	r3, [r1, #52]	; 0x34
 8005904:	e071      	b.n	80059ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005920:	0cdb      	lsrs	r3, r3, #19
 8005922:	04db      	lsls	r3, r3, #19
 8005924:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005940:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005944:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005948:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005980:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005998:	6939      	ldr	r1, [r7, #16]
 800599a:	0148      	lsls	r0, r1, #5
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	4401      	add	r1, r0
 80059a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10d      	bne.n	80059ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6919      	ldr	r1, [r3, #16]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	460a      	mov	r2, r1
 80059c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d14a      	bne.n	8005aac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a2e:	f040 8086 	bne.w	8005b3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d902      	bls.n	8005a90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a8e:	e056      	b.n	8005b3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa8:	d0e7      	beq.n	8005a7a <USB_EPStopXfer+0x82>
 8005aaa:	e048      	b.n	8005b3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac4:	d13b      	bne.n	8005b3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	7812      	ldrb	r2, [r2, #0]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ae8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d902      	bls.n	8005b24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	75fb      	strb	r3, [r7, #23]
          break;
 8005b22:	e00c      	b.n	8005b3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3c:	d0e7      	beq.n	8005b0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b089      	sub	sp, #36	; 0x24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	4611      	mov	r1, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	71fb      	strb	r3, [r7, #7]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d123      	bne.n	8005bba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b72:	88bb      	ldrh	r3, [r7, #4]
 8005b74:	3303      	adds	r3, #3
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e018      	b.n	8005bb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	031a      	lsls	r2, r3, #12
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	3301      	adds	r3, #1
 8005b98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d3e2      	bcc.n	8005b80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3724      	adds	r7, #36	; 0x24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b08b      	sub	sp, #44	; 0x2c
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	089b      	lsrs	r3, r3, #2
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bee:	2300      	movs	r3, #0
 8005bf0:	623b      	str	r3, [r7, #32]
 8005bf2:	e014      	b.n	8005c1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	3301      	adds	r3, #1
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	3301      	adds	r3, #1
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	3301      	adds	r3, #1
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	3301      	adds	r3, #1
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d3e6      	bcc.n	8005bf4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c26:	8bfb      	ldrh	r3, [r7, #30]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01e      	beq.n	8005c6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c36:	461a      	mov	r2, r3
 8005c38:	f107 0310 	add.w	r3, r7, #16
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	701a      	strb	r2, [r3, #0]
      i++;
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	3301      	adds	r3, #1
 8005c56:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c5e:	8bfb      	ldrh	r3, [r7, #30]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c64:	8bfb      	ldrh	r3, [r7, #30]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1ea      	bne.n	8005c40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	372c      	adds	r7, #44	; 0x2c
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d12c      	bne.n	8005cee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	db12      	blt.n	8005ccc <USB_EPSetStall+0x54>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00f      	beq.n	8005ccc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	e02b      	b.n	8005d46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db12      	blt.n	8005d26 <USB_EPSetStall+0xae>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d128      	bne.n	8005dc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	791b      	ldrb	r3, [r3, #4]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d003      	beq.n	8005da0 <USB_EPClearStall+0x4c>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	791b      	ldrb	r3, [r3, #4]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d138      	bne.n	8005e12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	e027      	b.n	8005e12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005de0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	791b      	ldrb	r3, [r3, #4]
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d003      	beq.n	8005df2 <USB_EPClearStall+0x9e>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	791b      	ldrb	r3, [r3, #4]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d10f      	bne.n	8005e12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e9a:	f023 0302 	bic.w	r3, r3, #2
 8005e9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ec8:	f023 0303 	bic.w	r3, r3, #3
 8005ecc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4013      	ands	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f08:	68fb      	ldr	r3, [r7, #12]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	0c1b      	lsrs	r3, r3, #16
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	b29b      	uxth	r3, r3
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fac:	68bb      	ldr	r3, [r7, #8]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b087      	sub	sp, #28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	01db      	lsls	r3, r3, #7
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4013      	ands	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006008:	68bb      	ldr	r3, [r7, #8]
}
 800600a:	4618      	mov	r0, r3
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0301 	and.w	r3, r3, #1
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006050:	f023 0307 	bic.w	r3, r3, #7
 8006054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	460b      	mov	r3, r1
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	333c      	adds	r3, #60	; 0x3c
 800608e:	3304      	adds	r3, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4a26      	ldr	r2, [pc, #152]	; (8006130 <USB_EP0_OutStart+0xb8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d90a      	bls.n	80060b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ac:	d101      	bne.n	80060b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e037      	b.n	8006122 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	461a      	mov	r2, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e0:	f043 0318 	orr.w	r3, r3, #24
 80060e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80060f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10f      	bne.n	8006120 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	461a      	mov	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800611e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	4f54300a 	.word	0x4f54300a

08006134 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a13      	ldr	r2, [pc, #76]	; (8006198 <USB_CoreReset+0x64>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e01b      	b.n	800618a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	daf2      	bge.n	8006140 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f043 0201 	orr.w	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3301      	adds	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a09      	ldr	r2, [pc, #36]	; (8006198 <USB_CoreReset+0x64>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d901      	bls.n	800617c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e006      	b.n	800618a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	d0f0      	beq.n	800616a <USB_CoreReset+0x36>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	00030d40 	.word	0x00030d40

0800619c <MPU6050_initialize>:

static sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange);
static sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange);

sensor_status_e MPU6050_initialize( SensorData_t *pSensor, fs_sel_e gyroConfig, afs_sel_e acc_config )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
 80061a8:	4613      	mov	r3, r2
 80061aa:	70bb      	strb	r3, [r7, #2]
    sensor_status_e retVal;

    retVal = MPU6050_set_gyro_range( pSensor, gyroConfig );
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f819 	bl	80061e8 <MPU6050_set_gyro_range>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]

    if (retVal == SENSOR_OK) {
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10e      	bne.n	80061de <MPU6050_initialize+0x42>
        retVal = MPU6050_set_acc_range( pSensor, acc_config );
 80061c0:	78bb      	ldrb	r3, [r7, #2]
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f86b 	bl	80062a0 <MPU6050_set_acc_range>
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]

        if (retVal == SENSOR_OK) {
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <MPU6050_initialize+0x42>
            retVal = MPU6050_set_sleep_mode( SLEEPMODE_OFF );
 80061d4:	2000      	movs	r0, #0
 80061d6:	f000 f8b7 	bl	8006348 <MPU6050_set_sleep_mode>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
        }
    }


    return retVal;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <MPU6050_set_gyro_range>:

sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_GYRO_CONFIG );
 80061f4:	211b      	movs	r1, #27
 80061f6:	20d2      	movs	r0, #210	; 0xd2
 80061f8:	f000 f97e 	bl	80064f8 <sensor_read_register8>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73bb      	strb	r3, [r7, #14]

	configReg |= ((uint32_t)gyroRange << MPU_REG_GYRO_CONFIG_GYRO_RANGE_BITS_POSITION );
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	b2da      	uxtb	r2, r3
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	4313      	orrs	r3, r2
 800620a:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_GYRO_CONFIG, configReg);
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	461a      	mov	r2, r3
 8006210:	211b      	movs	r1, #27
 8006212:	20d2      	movs	r0, #210	; 0xd2
 8006214:	f000 f996 	bl	8006544 <sensor_write_register8>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]

	switch (gyroRange)
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	2b03      	cmp	r3, #3
 8006220:	d826      	bhi.n	8006270 <MPU6050_set_gyro_range+0x88>
 8006222:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <MPU6050_set_gyro_range+0x40>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	08006239 	.word	0x08006239
 800622c:	08006247 	.word	0x08006247
 8006230:	08006255 	.word	0x08006255
 8006234:	08006263 	.word	0x08006263
	{
	 case FS_250:  pSensor->gyro_co = 131.0; break;
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	a311      	add	r3, pc, #68	; (adr r3, 8006280 <MPU6050_set_gyro_range+0x98>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006244:	e017      	b.n	8006276 <MPU6050_set_gyro_range+0x8e>
	 case FS_500:  pSensor->gyro_co = 65.5; break;
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	a30f      	add	r3, pc, #60	; (adr r3, 8006288 <MPU6050_set_gyro_range+0xa0>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006252:	e010      	b.n	8006276 <MPU6050_set_gyro_range+0x8e>
	 case FS_1000: pSensor->gyro_co = 32.8; break;
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	a30e      	add	r3, pc, #56	; (adr r3, 8006290 <MPU6050_set_gyro_range+0xa8>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006260:	e009      	b.n	8006276 <MPU6050_set_gyro_range+0x8e>
	 case FS_2000: pSensor->gyro_co = 16.4; break;
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	a30c      	add	r3, pc, #48	; (adr r3, 8006298 <MPU6050_set_gyro_range+0xb0>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 800626e:	e002      	b.n	8006276 <MPU6050_set_gyro_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
 8006274:	bf00      	nop
	}

	return retVal;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	00000000 	.word	0x00000000
 8006284:	40606000 	.word	0x40606000
 8006288:	00000000 	.word	0x00000000
 800628c:	40506000 	.word	0x40506000
 8006290:	66666666 	.word	0x66666666
 8006294:	40406666 	.word	0x40406666
 8006298:	66666666 	.word	0x66666666
 800629c:	40306666 	.word	0x40306666

080062a0 <MPU6050_set_acc_range>:

sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_CONFIG );
 80062ac:	211c      	movs	r1, #28
 80062ae:	20d2      	movs	r0, #210	; 0xd2
 80062b0:	f000 f922 	bl	80064f8 <sensor_read_register8>
 80062b4:	4603      	mov	r3, r0
 80062b6:	73bb      	strb	r3, [r7, #14]

	configReg |= ( (uint32_t) accRange << MPU_REG_ACC_CONFIG_ACC_RANGE_BITS_POSITION );
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_CONFIG, configReg);
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	461a      	mov	r2, r3
 80062c8:	211c      	movs	r1, #28
 80062ca:	20d2      	movs	r0, #210	; 0xd2
 80062cc:	f000 f93a 	bl	8006544 <sensor_write_register8>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]

	switch (accRange)
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d826      	bhi.n	8006328 <MPU6050_set_acc_range+0x88>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <MPU6050_set_acc_range+0x40>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	080062ff 	.word	0x080062ff
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	0800631b 	.word	0x0800631b
	{
	 case AFS_2G:  pSensor->acc_co = 16384; break;
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	4b10      	ldr	r3, [pc, #64]	; (8006338 <MPU6050_set_acc_range+0x98>)
 80062f8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80062fc:	e017      	b.n	800632e <MPU6050_set_acc_range+0x8e>
	 case AFS_4G:  pSensor->acc_co = 8192; break;
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	4b0d      	ldr	r3, [pc, #52]	; (800633c <MPU6050_set_acc_range+0x9c>)
 8006306:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800630a:	e010      	b.n	800632e <MPU6050_set_acc_range+0x8e>
	 case AFS_8G:  pSensor->acc_co = 4096; break;
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <MPU6050_set_acc_range+0xa0>)
 8006314:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8006318:	e009      	b.n	800632e <MPU6050_set_acc_range+0x8e>
	 case AFS_16G: pSensor->acc_co = 2048; break;
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	4b08      	ldr	r3, [pc, #32]	; (8006344 <MPU6050_set_acc_range+0xa4>)
 8006322:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8006326:	e002      	b.n	800632e <MPU6050_set_acc_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
 800632c:	bf00      	nop
	}

	return retVal;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40d00000 	.word	0x40d00000
 800633c:	40c00000 	.word	0x40c00000
 8006340:	40b00000 	.word	0x40b00000
 8006344:	40a00000 	.word	0x40a00000

08006348 <MPU6050_set_sleep_mode>:
	id = sensor_read_register8(MPU6050_I2C_ADRESS_AD1,MPU_REG_WHO_AM_I );
	return id;
}

sensor_status_e MPU6050_set_sleep_mode(sleepmode_e sleepmode)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
	sensor_status_e retVal;
	uint8_t powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_PWR_MGMT_1 );
 8006352:	216b      	movs	r1, #107	; 0x6b
 8006354:	20d2      	movs	r0, #210	; 0xd2
 8006356:	f000 f8cf 	bl	80064f8 <sensor_read_register8>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]

	if(SLEEPMODE_ON == sleepmode) {
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d104      	bne.n	800636e <MPU6050_set_sleep_mode+0x26>
		SET_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e003      	b.n	8006376 <MPU6050_set_sleep_mode+0x2e>
	}
	else {
		CLEAR_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006374:	73fb      	strb	r3, [r7, #15]
	}
	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_PWR_MGMT_1, powerReg);
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	461a      	mov	r2, r3
 800637a:	216b      	movs	r1, #107	; 0x6b
 800637c:	20d2      	movs	r0, #210	; 0xd2
 800637e:	f000 f8e1 	bl	8006544 <sensor_write_register8>
 8006382:	4603      	mov	r3, r0
 8006384:	73bb      	strb	r3, [r7, #14]

	powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD1, MPU_REG_PWR_MGMT_1 );
 8006386:	216b      	movs	r1, #107	; 0x6b
 8006388:	20d2      	movs	r0, #210	; 0xd2
 800638a:	f000 f8b5 	bl	80064f8 <sensor_read_register8>
 800638e:	4603      	mov	r3, r0
 8006390:	73fb      	strb	r3, [r7, #15]

	return retVal;
 8006392:	7bbb      	ldrb	r3, [r7, #14]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <MPU6050_read_data>:


sensor_status_e MPU6050_read_data(SensorData_t *pSensorData)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	sensor_status_e retVal;
	uint8_t buffer[14];
	retVal =  sensor_read_bytes(MPU6050_I2C_ADRESS_AD1, MPU_REG_ACCEL_XOUT_H, buffer, 14);
 80063a4:	f107 0208 	add.w	r2, r7, #8
 80063a8:	230e      	movs	r3, #14
 80063aa:	213b      	movs	r1, #59	; 0x3b
 80063ac:	20d2      	movs	r0, #210	; 0xd2
 80063ae:	f000 f8ef 	bl	8006590 <sensor_read_bytes>
 80063b2:	4603      	mov	r3, r0
 80063b4:	75fb      	strb	r3, [r7, #23]

    if (retVal == SENSOR_OK) {
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 8098 	bne.w	80064ee <MPU6050_read_data+0x152>
        pSensorData->accRaw.X = (int16_t) ((buffer[0] << 8) | buffer[1]);
 80063be:	7a3b      	ldrb	r3, [r7, #8]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	b21a      	sxth	r2, r3
 80063c4:	7a7b      	ldrb	r3, [r7, #9]
 80063c6:	b21b      	sxth	r3, r3
 80063c8:	4313      	orrs	r3, r2
 80063ca:	b21a      	sxth	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	801a      	strh	r2, [r3, #0]
        pSensorData->accRaw.Y = (int16_t) ((buffer[2] << 8) | buffer[3]);
 80063d0:	7abb      	ldrb	r3, [r7, #10]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	b21a      	sxth	r2, r3
 80063d6:	7afb      	ldrb	r3, [r7, #11]
 80063d8:	b21b      	sxth	r3, r3
 80063da:	4313      	orrs	r3, r2
 80063dc:	b21a      	sxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	805a      	strh	r2, [r3, #2]
        pSensorData->accRaw.Z = (int16_t) ((buffer[4] << 8) | buffer[5]);
 80063e2:	7b3b      	ldrb	r3, [r7, #12]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	b21a      	sxth	r2, r3
 80063e8:	7b7b      	ldrb	r3, [r7, #13]
 80063ea:	b21b      	sxth	r3, r3
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b21a      	sxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	809a      	strh	r2, [r3, #4]

        pSensorData->gyroRaw.X = (int16_t) ((buffer[8] << 8) | buffer[9]);
 80063f4:	7c3b      	ldrb	r3, [r7, #16]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	b21a      	sxth	r2, r3
 80063fa:	7c7b      	ldrb	r3, [r7, #17]
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	4313      	orrs	r3, r2
 8006400:	b21a      	sxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	80da      	strh	r2, [r3, #6]
        pSensorData->gyroRaw.Y = (int16_t) ((buffer[10] << 8) | buffer[11]);
 8006406:	7cbb      	ldrb	r3, [r7, #18]
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	b21a      	sxth	r2, r3
 800640c:	7cfb      	ldrb	r3, [r7, #19]
 800640e:	b21b      	sxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b21a      	sxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	811a      	strh	r2, [r3, #8]
        pSensorData->gyroRaw.Z = (int16_t) ((buffer[12] << 8) | buffer[13]);
 8006418:	7d3b      	ldrb	r3, [r7, #20]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	b21a      	sxth	r2, r3
 800641e:	7d7b      	ldrb	r3, [r7, #21]
 8006420:	b21b      	sxth	r3, r3
 8006422:	4313      	orrs	r3, r2
 8006424:	b21a      	sxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	815a      	strh	r2, [r3, #10]

        pSensorData->acc.X = pSensorData->accRaw.X / pSensorData->acc_co;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006430:	4618      	mov	r0, r3
 8006432:	f7fa f877 	bl	8000524 <__aeabi_i2d>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800643c:	f7fa fa06 	bl	800084c <__aeabi_ddiv>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pSensorData->acc.Y = pSensorData->accRaw.Y / pSensorData->acc_co;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006450:	4618      	mov	r0, r3
 8006452:	f7fa f867 	bl	8000524 <__aeabi_i2d>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800645c:	f7fa f9f6 	bl	800084c <__aeabi_ddiv>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	e9c1 2306 	strd	r2, r3, [r1, #24]
        pSensorData->acc.Z = pSensorData->accRaw.Z / pSensorData->acc_co;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	f7fa f857 	bl	8000524 <__aeabi_i2d>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800647c:	f7fa f9e6 	bl	800084c <__aeabi_ddiv>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	e9c1 2308 	strd	r2, r3, [r1, #32]

        pSensorData->gyro.X = pSensorData->gyroRaw.X / pSensorData->gyro_co;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006490:	4618      	mov	r0, r3
 8006492:	f7fa f847 	bl	8000524 <__aeabi_i2d>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800649c:	f7fa f9d6 	bl	800084c <__aeabi_ddiv>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pSensorData->gyro.Y = pSensorData->gyroRaw.Y / pSensorData->gyro_co;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fa f837 	bl	8000524 <__aeabi_i2d>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80064bc:	f7fa f9c6 	bl	800084c <__aeabi_ddiv>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        pSensorData->gyro.Z = pSensorData->gyroRaw.Z / pSensorData->gyro_co;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fa f827 	bl	8000524 <__aeabi_i2d>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80064dc:	f7fa f9b6 	bl	800084c <__aeabi_ddiv>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        return retVal;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	e000      	b.n	80064f0 <MPU6050_read_data+0x154>
    } else {
        return SENSOR_ERROR;
 80064ee:	2301      	movs	r3, #1
    }
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <sensor_read_register8>:

	}
}

uint8_t sensor_read_register8(uint8_t chipAdd, uint8_t regAdd)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	4603      	mov	r3, r0
 8006500:	460a      	mov	r2, r1
 8006502:	71fb      	strb	r3, [r7, #7]
 8006504:	4613      	mov	r3, r2
 8006506:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read( &hi2c1, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, &data, I2C_DATA_SIZE_1_BYTE, I2C_TIMEOUT );
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	b299      	uxth	r1, r3
 800650c:	79bb      	ldrb	r3, [r7, #6]
 800650e:	b29a      	uxth	r2, r3
 8006510:	2364      	movs	r3, #100	; 0x64
 8006512:	9302      	str	r3, [sp, #8]
 8006514:	2301      	movs	r3, #1
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	f107 030e 	add.w	r3, r7, #14
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	2301      	movs	r3, #1
 8006520:	4807      	ldr	r0, [pc, #28]	; (8006540 <sensor_read_register8+0x48>)
 8006522:	f7fb fd6b 	bl	8001ffc <HAL_I2C_Mem_Read>
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != status) {
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <sensor_read_register8+0x3c>
		return 0;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <sensor_read_register8+0x3e>
	} else {
		return data;
 8006534:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200002e4 	.word	0x200002e4

08006544 <sensor_write_register8>:
		return retVal;
	}
}

sensor_status_e sensor_write_register8(uint8_t chipAdd, uint8_t regAdd, uint8_t value)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af04      	add	r7, sp, #16
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
 800654e:	460b      	mov	r3, r1
 8006550:	71bb      	strb	r3, [r7, #6]
 8006552:	4613      	mov	r3, r2
 8006554:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write( &hi2c1, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, &value, I2C_DATA_SIZE_1_BYTE, I2C_TIMEOUT );
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	b299      	uxth	r1, r3
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	b29a      	uxth	r2, r3
 800655e:	2364      	movs	r3, #100	; 0x64
 8006560:	9302      	str	r3, [sp, #8]
 8006562:	2301      	movs	r3, #1
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	1d7b      	adds	r3, r7, #5
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	2301      	movs	r3, #1
 800656c:	4807      	ldr	r0, [pc, #28]	; (800658c <sensor_write_register8+0x48>)
 800656e:	f7fb fc4b 	bl	8001e08 <HAL_I2C_Mem_Write>
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]

    if (HAL_OK != status) {
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <sensor_write_register8+0x3c>
        return SENSOR_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <sensor_write_register8+0x3e>
    } else {
        return SENSOR_OK;
 8006580:	2300      	movs	r3, #0
    }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200002e4 	.word	0x200002e4

08006590 <sensor_read_bytes>:
	}
}


sensor_status_e sensor_read_bytes(uint8_t chipAdd, uint8_t regAdd, uint8_t *pBuffer, uint8_t size)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af04      	add	r7, sp, #16
 8006596:	603a      	str	r2, [r7, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]
 800659e:	460b      	mov	r3, r1
 80065a0:	71bb      	strb	r3, [r7, #6]
 80065a2:	4613      	mov	r3, r2
 80065a4:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&hi2c1, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, pBuffer, size, I2C_TIMEOUT);
 80065a6:	79fb      	ldrb	r3, [r7, #7]
 80065a8:	b299      	uxth	r1, r3
 80065aa:	79bb      	ldrb	r3, [r7, #6]
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	797b      	ldrb	r3, [r7, #5]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2064      	movs	r0, #100	; 0x64
 80065b4:	9002      	str	r0, [sp, #8]
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	2301      	movs	r3, #1
 80065be:	4807      	ldr	r0, [pc, #28]	; (80065dc <sensor_read_bytes+0x4c>)
 80065c0:	f7fb fd1c 	bl	8001ffc <HAL_I2C_Mem_Read>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != status) {
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <sensor_read_bytes+0x42>
		return SENSOR_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <sensor_read_bytes+0x44>
	} else {
		return SENSOR_OK;
 80065d2:	2300      	movs	r3, #0
	}
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	200002e4 	.word	0x200002e4

080065e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065f0:	f002 fc94 	bl	8008f1c <USBD_static_malloc>
 80065f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32b0      	adds	r2, #176	; 0xb0
 8006606:	2100      	movs	r1, #0
 8006608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800660c:	2302      	movs	r3, #2
 800660e:	e0d4      	b.n	80067ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006610:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f003 fa3d 	bl	8009a96 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32b0      	adds	r2, #176	; 0xb0
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32b0      	adds	r2, #176	; 0xb0
 8006636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1b      	ldrb	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d138      	bne.n	80066ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006648:	4b5e      	ldr	r3, [pc, #376]	; (80067c4 <USBD_CDC_Init+0x1e4>)
 800664a:	7819      	ldrb	r1, [r3, #0]
 800664c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006650:	2202      	movs	r2, #2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 fb3f 	bl	8008cd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006658:	4b5a      	ldr	r3, [pc, #360]	; (80067c4 <USBD_CDC_Init+0x1e4>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 020f 	and.w	r2, r3, #15
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3324      	adds	r3, #36	; 0x24
 800666e:	2201      	movs	r2, #1
 8006670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006672:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <USBD_CDC_Init+0x1e8>)
 8006674:	7819      	ldrb	r1, [r3, #0]
 8006676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800667a:	2202      	movs	r2, #2
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f002 fb2a 	bl	8008cd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006682:	4b51      	ldr	r3, [pc, #324]	; (80067c8 <USBD_CDC_Init+0x1e8>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 020f 	and.w	r2, r3, #15
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800669a:	2201      	movs	r2, #1
 800669c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800669e:	4b4b      	ldr	r3, [pc, #300]	; (80067cc <USBD_CDC_Init+0x1ec>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f003 020f 	and.w	r2, r3, #15
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	3326      	adds	r3, #38	; 0x26
 80066b4:	2210      	movs	r2, #16
 80066b6:	801a      	strh	r2, [r3, #0]
 80066b8:	e035      	b.n	8006726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066ba:	4b42      	ldr	r3, [pc, #264]	; (80067c4 <USBD_CDC_Init+0x1e4>)
 80066bc:	7819      	ldrb	r1, [r3, #0]
 80066be:	2340      	movs	r3, #64	; 0x40
 80066c0:	2202      	movs	r2, #2
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f002 fb07 	bl	8008cd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066c8:	4b3e      	ldr	r3, [pc, #248]	; (80067c4 <USBD_CDC_Init+0x1e4>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f003 020f 	and.w	r2, r3, #15
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	3324      	adds	r3, #36	; 0x24
 80066de:	2201      	movs	r2, #1
 80066e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066e2:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <USBD_CDC_Init+0x1e8>)
 80066e4:	7819      	ldrb	r1, [r3, #0]
 80066e6:	2340      	movs	r3, #64	; 0x40
 80066e8:	2202      	movs	r2, #2
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f002 faf3 	bl	8008cd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066f0:	4b35      	ldr	r3, [pc, #212]	; (80067c8 <USBD_CDC_Init+0x1e8>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 020f 	and.w	r2, r3, #15
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006708:	2201      	movs	r2, #1
 800670a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800670c:	4b2f      	ldr	r3, [pc, #188]	; (80067cc <USBD_CDC_Init+0x1ec>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3326      	adds	r3, #38	; 0x26
 8006722:	2210      	movs	r2, #16
 8006724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006726:	4b29      	ldr	r3, [pc, #164]	; (80067cc <USBD_CDC_Init+0x1ec>)
 8006728:	7819      	ldrb	r1, [r3, #0]
 800672a:	2308      	movs	r3, #8
 800672c:	2203      	movs	r2, #3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fad1 	bl	8008cd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006734:	4b25      	ldr	r3, [pc, #148]	; (80067cc <USBD_CDC_Init+0x1ec>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3324      	adds	r3, #36	; 0x24
 800674a:	2201      	movs	r2, #1
 800674c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	33b0      	adds	r3, #176	; 0xb0
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006784:	2302      	movs	r3, #2
 8006786:	e018      	b.n	80067ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	7c1b      	ldrb	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006790:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <USBD_CDC_Init+0x1e8>)
 8006792:	7819      	ldrb	r1, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800679a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 fb88 	bl	8008eb4 <USBD_LL_PrepareReceive>
 80067a4:	e008      	b.n	80067b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a6:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <USBD_CDC_Init+0x1e8>)
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 fb7e 	bl	8008eb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000093 	.word	0x20000093
 80067c8:	20000094 	.word	0x20000094
 80067cc:	20000095 	.word	0x20000095

080067d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067dc:	4b3a      	ldr	r3, [pc, #232]	; (80068c8 <USBD_CDC_DeInit+0xf8>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f002 fa9d 	bl	8008d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067e8:	4b37      	ldr	r3, [pc, #220]	; (80068c8 <USBD_CDC_DeInit+0xf8>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3324      	adds	r3, #36	; 0x24
 80067fe:	2200      	movs	r2, #0
 8006800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006802:	4b32      	ldr	r3, [pc, #200]	; (80068cc <USBD_CDC_DeInit+0xfc>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f002 fa8a 	bl	8008d22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800680e:	4b2f      	ldr	r3, [pc, #188]	; (80068cc <USBD_CDC_DeInit+0xfc>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	f003 020f 	and.w	r2, r3, #15
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006826:	2200      	movs	r2, #0
 8006828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800682a:	4b29      	ldr	r3, [pc, #164]	; (80068d0 <USBD_CDC_DeInit+0x100>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 fa76 	bl	8008d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006836:	4b26      	ldr	r3, [pc, #152]	; (80068d0 <USBD_CDC_DeInit+0x100>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3324      	adds	r3, #36	; 0x24
 800684c:	2200      	movs	r2, #0
 800684e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006850:	4b1f      	ldr	r3, [pc, #124]	; (80068d0 <USBD_CDC_DeInit+0x100>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 020f 	and.w	r2, r3, #15
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	3326      	adds	r3, #38	; 0x26
 8006866:	2200      	movs	r2, #0
 8006868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	32b0      	adds	r2, #176	; 0xb0
 8006874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01f      	beq.n	80068bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	33b0      	adds	r3, #176	; 0xb0
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	32b0      	adds	r2, #176	; 0xb0
 800689a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 fb4a 	bl	8008f38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32b0      	adds	r2, #176	; 0xb0
 80068ae:	2100      	movs	r1, #0
 80068b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000093 	.word	0x20000093
 80068cc:	20000094 	.word	0x20000094
 80068d0:	20000095 	.word	0x20000095

080068d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32b0      	adds	r2, #176	; 0xb0
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006900:	2303      	movs	r3, #3
 8006902:	e0bf      	b.n	8006a84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800690c:	2b00      	cmp	r3, #0
 800690e:	d050      	beq.n	80069b2 <USBD_CDC_Setup+0xde>
 8006910:	2b20      	cmp	r3, #32
 8006912:	f040 80af 	bne.w	8006a74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88db      	ldrh	r3, [r3, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d03a      	beq.n	8006994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b25b      	sxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	da1b      	bge.n	8006960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	33b0      	adds	r3, #176	; 0xb0
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800693e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	88d2      	ldrh	r2, [r2, #6]
 8006944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	88db      	ldrh	r3, [r3, #6]
 800694a:	2b07      	cmp	r3, #7
 800694c:	bf28      	it	cs
 800694e:	2307      	movcs	r3, #7
 8006950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	89fa      	ldrh	r2, [r7, #14]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fd89 	bl	8008470 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800695e:	e090      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	785a      	ldrb	r2, [r3, #1]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b3f      	cmp	r3, #63	; 0x3f
 8006970:	d803      	bhi.n	800697a <USBD_CDC_Setup+0xa6>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	e000      	b.n	800697c <USBD_CDC_Setup+0xa8>
 800697a:	2240      	movs	r2, #64	; 0x40
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006982:	6939      	ldr	r1, [r7, #16]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800698a:	461a      	mov	r2, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fd9b 	bl	80084c8 <USBD_CtlPrepareRx>
      break;
 8006992:	e076      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	33b0      	adds	r3, #176	; 0xb0
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	7850      	ldrb	r0, [r2, #1]
 80069aa:	2200      	movs	r2, #0
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	4798      	blx	r3
      break;
 80069b0:	e067      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b0b      	cmp	r3, #11
 80069b8:	d851      	bhi.n	8006a5e <USBD_CDC_Setup+0x18a>
 80069ba:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <USBD_CDC_Setup+0xec>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	08006a6d 	.word	0x08006a6d
 80069c8:	08006a5f 	.word	0x08006a5f
 80069cc:	08006a5f 	.word	0x08006a5f
 80069d0:	08006a5f 	.word	0x08006a5f
 80069d4:	08006a5f 	.word	0x08006a5f
 80069d8:	08006a5f 	.word	0x08006a5f
 80069dc:	08006a5f 	.word	0x08006a5f
 80069e0:	08006a5f 	.word	0x08006a5f
 80069e4:	08006a5f 	.word	0x08006a5f
 80069e8:	08006a1b 	.word	0x08006a1b
 80069ec:	08006a45 	.word	0x08006a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d107      	bne.n	8006a0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069fc:	f107 030a 	add.w	r3, r7, #10
 8006a00:	2202      	movs	r2, #2
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fd33 	bl	8008470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a0a:	e032      	b.n	8006a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fcbd 	bl	800838e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	75fb      	strb	r3, [r7, #23]
          break;
 8006a18:	e02b      	b.n	8006a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d107      	bne.n	8006a36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a26:	f107 030d 	add.w	r3, r7, #13
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fd1e 	bl	8008470 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a34:	e01d      	b.n	8006a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fca8 	bl	800838e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	75fb      	strb	r3, [r7, #23]
          break;
 8006a42:	e016      	b.n	8006a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d00f      	beq.n	8006a70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fc9b 	bl	800838e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a5c:	e008      	b.n	8006a70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fc94 	bl	800838e <USBD_CtlError>
          ret = USBD_FAIL;
 8006a66:	2303      	movs	r3, #3
 8006a68:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6a:	e002      	b.n	8006a72 <USBD_CDC_Setup+0x19e>
          break;
 8006a6c:	bf00      	nop
 8006a6e:	e008      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>
          break;
 8006a70:	bf00      	nop
      }
      break;
 8006a72:	e006      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fc89 	bl	800838e <USBD_CtlError>
      ret = USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a80:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32b0      	adds	r2, #176	; 0xb0
 8006aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e065      	b.n	8006b82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	32b0      	adds	r2, #176	; 0xb0
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	f003 020f 	and.w	r2, r3, #15
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3318      	adds	r3, #24
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02f      	beq.n	8006b40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	3318      	adds	r3, #24
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	f003 010f 	and.w	r1, r3, #15
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	460b      	mov	r3, r1
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	440b      	add	r3, r1
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4403      	add	r3, r0
 8006b08:	3348      	adds	r3, #72	; 0x48
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d112      	bne.n	8006b40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	f003 020f 	and.w	r2, r3, #15
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3318      	adds	r3, #24
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b32:	78f9      	ldrb	r1, [r7, #3]
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f002 f99a 	bl	8008e72 <USBD_LL_Transmit>
 8006b3e:	e01f      	b.n	8006b80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	33b0      	adds	r3, #176	; 0xb0
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	33b0      	adds	r3, #176	; 0xb0
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b7c:	78fa      	ldrb	r2, [r7, #3]
 8006b7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32b0      	adds	r2, #176	; 0xb0
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	32b0      	adds	r2, #176	; 0xb0
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e01a      	b.n	8006bf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f002 f998 	bl	8008ef6 <USBD_LL_GetRxDataSize>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	33b0      	adds	r3, #176	; 0xb0
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bec:	4611      	mov	r1, r2
 8006bee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	32b0      	adds	r2, #176	; 0xb0
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e025      	b.n	8006c68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	33b0      	adds	r3, #176	; 0xb0
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01a      	beq.n	8006c66 <USBD_CDC_EP0_RxReady+0x6c>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c36:	2bff      	cmp	r3, #255	; 0xff
 8006c38:	d015      	beq.n	8006c66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	33b0      	adds	r3, #176	; 0xb0
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c5a:	b292      	uxth	r2, r2
 8006c5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c78:	2182      	movs	r1, #130	; 0x82
 8006c7a:	4818      	ldr	r0, [pc, #96]	; (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c7c:	f000 fd4f 	bl	800771e <USBD_GetEpDesc>
 8006c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c82:	2101      	movs	r1, #1
 8006c84:	4815      	ldr	r0, [pc, #84]	; (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c86:	f000 fd4a 	bl	800771e <USBD_GetEpDesc>
 8006c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c8c:	2181      	movs	r1, #129	; 0x81
 8006c8e:	4813      	ldr	r0, [pc, #76]	; (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c90:	f000 fd45 	bl	800771e <USBD_GetEpDesc>
 8006c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb0:	711a      	strb	r2, [r3, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc4:	711a      	strb	r2, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2243      	movs	r2, #67	; 0x43
 8006cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cd0:	4b02      	ldr	r3, [pc, #8]	; (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000050 	.word	0x20000050

08006ce0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ce8:	2182      	movs	r1, #130	; 0x82
 8006cea:	4818      	ldr	r0, [pc, #96]	; (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cec:	f000 fd17 	bl	800771e <USBD_GetEpDesc>
 8006cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4815      	ldr	r0, [pc, #84]	; (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cf6:	f000 fd12 	bl	800771e <USBD_GetEpDesc>
 8006cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cfc:	2181      	movs	r1, #129	; 0x81
 8006cfe:	4813      	ldr	r0, [pc, #76]	; (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d00:	f000 fd0d 	bl	800771e <USBD_GetEpDesc>
 8006d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2210      	movs	r2, #16
 8006d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	711a      	strb	r2, [r3, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f042 0202 	orr.w	r2, r2, #2
 8006d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	711a      	strb	r2, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f042 0202 	orr.w	r2, r2, #2
 8006d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2243      	movs	r2, #67	; 0x43
 8006d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d40:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000050 	.word	0x20000050

08006d50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d58:	2182      	movs	r1, #130	; 0x82
 8006d5a:	4818      	ldr	r0, [pc, #96]	; (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d5c:	f000 fcdf 	bl	800771e <USBD_GetEpDesc>
 8006d60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d62:	2101      	movs	r1, #1
 8006d64:	4815      	ldr	r0, [pc, #84]	; (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d66:	f000 fcda 	bl	800771e <USBD_GetEpDesc>
 8006d6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d6c:	2181      	movs	r1, #129	; 0x81
 8006d6e:	4813      	ldr	r0, [pc, #76]	; (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d70:	f000 fcd5 	bl	800771e <USBD_GetEpDesc>
 8006d74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2210      	movs	r2, #16
 8006d80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d90:	711a      	strb	r2, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da4:	711a      	strb	r2, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2243      	movs	r2, #67	; 0x43
 8006dae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006db0:	4b02      	ldr	r3, [pc, #8]	; (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000050 	.word	0x20000050

08006dc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	220a      	movs	r2, #10
 8006dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dce:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	2000000c 	.word	0x2000000c

08006de0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e009      	b.n	8006e08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	33b0      	adds	r3, #176	; 0xb0
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	32b0      	adds	r2, #176	; 0xb0
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e008      	b.n	8006e4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	32b0      	adds	r2, #176	; 0xb0
 8006e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e004      	b.n	8006e86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32b0      	adds	r2, #176	; 0xb0
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006eac:	2301      	movs	r3, #1
 8006eae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	; 0xb0
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e025      	b.n	8006f12 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d11f      	bne.n	8006f10 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ed8:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <USBD_CDC_TransmitPacket+0x88>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f003 020f 	and.w	r2, r3, #15
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4403      	add	r3, r0
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <USBD_CDC_TransmitPacket+0x88>)
 8006ef8:	7819      	ldrb	r1, [r3, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 ffb3 	bl	8008e72 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000093 	.word	0x20000093

08006f20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	32b0      	adds	r2, #176	; 0xb0
 8006f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	32b0      	adds	r2, #176	; 0xb0
 8006f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e018      	b.n	8006f80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7c1b      	ldrb	r3, [r3, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <USBD_CDC_ReceivePacket+0x68>)
 8006f58:	7819      	ldrb	r1, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 ffa5 	bl	8008eb4 <USBD_LL_PrepareReceive>
 8006f6a:	e008      	b.n	8006f7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <USBD_CDC_ReceivePacket+0x68>)
 8006f6e:	7819      	ldrb	r1, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f76:	2340      	movs	r3, #64	; 0x40
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 ff9b 	bl	8008eb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000094 	.word	0x20000094

08006f8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e01f      	b.n	8006fe4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	79fa      	ldrb	r2, [r7, #7]
 8006fd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 fe15 	bl	8008c08 <USBD_LL_Init>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007000:	2303      	movs	r3, #3
 8007002:	e025      	b.n	8007050 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	32ae      	adds	r2, #174	; 0xae
 8007016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00f      	beq.n	8007040 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32ae      	adds	r2, #174	; 0xae
 800702a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	f107 020e 	add.w	r2, r7, #14
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	4602      	mov	r2, r0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fe1d 	bl	8008ca0 <USBD_LL_Start>
 8007066:	4603      	mov	r3, r0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007078:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d009      	beq.n	80070b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	4611      	mov	r1, r2
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	4798      	blx	r3
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	4611      	mov	r1, r2
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f001 f908 	bl	800831a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007118:	461a      	mov	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	2b02      	cmp	r3, #2
 800712c:	d01a      	beq.n	8007164 <USBD_LL_SetupStage+0x72>
 800712e:	2b02      	cmp	r3, #2
 8007130:	d822      	bhi.n	8007178 <USBD_LL_SetupStage+0x86>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <USBD_LL_SetupStage+0x4a>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d00a      	beq.n	8007150 <USBD_LL_SetupStage+0x5e>
 800713a:	e01d      	b.n	8007178 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fb5f 	bl	8007808 <USBD_StdDevReq>
 800714a:	4603      	mov	r3, r0
 800714c:	73fb      	strb	r3, [r7, #15]
      break;
 800714e:	e020      	b.n	8007192 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fbc7 	bl	80078ec <USBD_StdItfReq>
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
      break;
 8007162:	e016      	b.n	8007192 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc29 	bl	80079c4 <USBD_StdEPReq>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
      break;
 8007176:	e00c      	b.n	8007192 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800717e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 fdea 	bl	8008d60 <USBD_LL_StallEP>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
      break;
 8007190:	bf00      	nop
  }

  return ret;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	460b      	mov	r3, r1
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071ae:	7afb      	ldrb	r3, [r7, #11]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d16e      	bne.n	8007292 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	f040 8098 	bne.w	80072f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d913      	bls.n	80071fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	1ad2      	subs	r2, r2, r3
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	4293      	cmp	r3, r2
 80071ec:	bf28      	it	cs
 80071ee:	4613      	movcs	r3, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	6879      	ldr	r1, [r7, #4]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 f984 	bl	8008502 <USBD_CtlContinueRx>
 80071fa:	e07d      	b.n	80072f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	2b02      	cmp	r3, #2
 8007208:	d014      	beq.n	8007234 <USBD_LL_DataOutStage+0x98>
 800720a:	2b02      	cmp	r3, #2
 800720c:	d81d      	bhi.n	800724a <USBD_LL_DataOutStage+0xae>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <USBD_LL_DataOutStage+0x7c>
 8007212:	2b01      	cmp	r3, #1
 8007214:	d003      	beq.n	800721e <USBD_LL_DataOutStage+0x82>
 8007216:	e018      	b.n	800724a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	75bb      	strb	r3, [r7, #22]
            break;
 800721c:	e018      	b.n	8007250 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007224:	b2db      	uxtb	r3, r3
 8007226:	4619      	mov	r1, r3
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fa5e 	bl	80076ea <USBD_CoreFindIF>
 800722e:	4603      	mov	r3, r0
 8007230:	75bb      	strb	r3, [r7, #22]
            break;
 8007232:	e00d      	b.n	8007250 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800723a:	b2db      	uxtb	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fa60 	bl	8007704 <USBD_CoreFindEP>
 8007244:	4603      	mov	r3, r0
 8007246:	75bb      	strb	r3, [r7, #22]
            break;
 8007248:	e002      	b.n	8007250 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	75bb      	strb	r3, [r7, #22]
            break;
 800724e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007250:	7dbb      	ldrb	r3, [r7, #22]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d119      	bne.n	800728a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b03      	cmp	r3, #3
 8007260:	d113      	bne.n	800728a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007262:	7dba      	ldrb	r2, [r7, #22]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	32ae      	adds	r2, #174	; 0xae
 8007268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007272:	7dba      	ldrb	r2, [r7, #22]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800727a:	7dba      	ldrb	r2, [r7, #22]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	32ae      	adds	r2, #174	; 0xae
 8007280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f001 f94a 	bl	8008524 <USBD_CtlSendStatus>
 8007290:	e032      	b.n	80072f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007298:	b2db      	uxtb	r3, r3
 800729a:	4619      	mov	r1, r3
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fa31 	bl	8007704 <USBD_CoreFindEP>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072a6:	7dbb      	ldrb	r3, [r7, #22]
 80072a8:	2bff      	cmp	r3, #255	; 0xff
 80072aa:	d025      	beq.n	80072f8 <USBD_LL_DataOutStage+0x15c>
 80072ac:	7dbb      	ldrb	r3, [r7, #22]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d122      	bne.n	80072f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d117      	bne.n	80072ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072be:	7dba      	ldrb	r2, [r7, #22]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	32ae      	adds	r2, #174	; 0xae
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00f      	beq.n	80072ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072ce:	7dba      	ldrb	r2, [r7, #22]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072d6:	7dba      	ldrb	r2, [r7, #22]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	32ae      	adds	r2, #174	; 0xae
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	7afa      	ldrb	r2, [r7, #11]
 80072e4:	4611      	mov	r1, r2
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	4798      	blx	r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	e000      	b.n	80072fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b086      	sub	sp, #24
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	460b      	mov	r3, r1
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d16f      	bne.n	80073f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3314      	adds	r3, #20
 800731a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007322:	2b02      	cmp	r3, #2
 8007324:	d15a      	bne.n	80073dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	429a      	cmp	r2, r3
 8007330:	d914      	bls.n	800735c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	461a      	mov	r2, r3
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 f8ac 	bl	80084a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800734e:	2300      	movs	r3, #0
 8007350:	2200      	movs	r2, #0
 8007352:	2100      	movs	r1, #0
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f001 fdad 	bl	8008eb4 <USBD_LL_PrepareReceive>
 800735a:	e03f      	b.n	80073dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	429a      	cmp	r2, r3
 8007366:	d11c      	bne.n	80073a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007370:	429a      	cmp	r2, r3
 8007372:	d316      	bcc.n	80073a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800737e:	429a      	cmp	r2, r3
 8007380:	d20f      	bcs.n	80073a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 f88d 	bl	80084a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007394:	2300      	movs	r3, #0
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f001 fd8a 	bl	8008eb4 <USBD_LL_PrepareReceive>
 80073a0:	e01c      	b.n	80073dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d10f      	bne.n	80073ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ce:	2180      	movs	r1, #128	; 0x80
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f001 fcc5 	bl	8008d60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f001 f8b7 	bl	800854a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d03a      	beq.n	800745c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fe42 	bl	8007070 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073f4:	e032      	b.n	800745c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4619      	mov	r1, r3
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f97f 	bl	8007704 <USBD_CoreFindEP>
 8007406:	4603      	mov	r3, r0
 8007408:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2bff      	cmp	r3, #255	; 0xff
 800740e:	d025      	beq.n	800745c <USBD_LL_DataInStage+0x15a>
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d122      	bne.n	800745c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b03      	cmp	r3, #3
 8007420:	d11c      	bne.n	800745c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007422:	7dfa      	ldrb	r2, [r7, #23]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	32ae      	adds	r2, #174	; 0xae
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d014      	beq.n	800745c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007432:	7dfa      	ldrb	r2, [r7, #23]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800743a:	7dfa      	ldrb	r2, [r7, #23]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	32ae      	adds	r2, #174	; 0xae
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	7afa      	ldrb	r2, [r7, #11]
 8007448:	4611      	mov	r1, r2
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	4798      	blx	r3
 800744e:	4603      	mov	r3, r0
 8007450:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007452:	7dbb      	ldrb	r3, [r7, #22]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007458:	7dbb      	ldrb	r3, [r7, #22]
 800745a:	e000      	b.n	800745e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d014      	beq.n	80074cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00e      	beq.n	80074cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6852      	ldr	r2, [r2, #4]
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	4611      	mov	r1, r2
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074c8:	2303      	movs	r3, #3
 80074ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074cc:	2340      	movs	r3, #64	; 0x40
 80074ce:	2200      	movs	r2, #0
 80074d0:	2100      	movs	r1, #0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fbff 	bl	8008cd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2240      	movs	r2, #64	; 0x40
 80074e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	2200      	movs	r2, #0
 80074ec:	2180      	movs	r1, #128	; 0x80
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fbf1 	bl	8008cd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2240      	movs	r2, #64	; 0x40
 80074fe:	621a      	str	r2, [r3, #32]

  return ret;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	78fa      	ldrb	r2, [r7, #3]
 800751a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	b2da      	uxtb	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2204      	movs	r2, #4
 8007544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b04      	cmp	r3, #4
 8007568:	d106      	bne.n	8007578 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b03      	cmp	r3, #3
 8007598:	d110      	bne.n	80075bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	32ae      	adds	r2, #174	; 0xae
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01c      	b.n	8007622 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d115      	bne.n	8007620 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	; 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	32ae      	adds	r2, #174	; 0xae
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	e01c      	b.n	8007686 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b03      	cmp	r3, #3
 8007656:	d115      	bne.n	8007684 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32ae      	adds	r2, #174	; 0xae
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32ae      	adds	r2, #174	; 0xae
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	4611      	mov	r1, r2
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00e      	beq.n	80076e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6852      	ldr	r2, [r2, #4]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	4611      	mov	r1, r2
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007710:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	429a      	cmp	r2, r3
 8007744:	d920      	bls.n	8007788 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800774e:	e013      	b.n	8007778 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007750:	f107 030a 	add.w	r3, r7, #10
 8007754:	4619      	mov	r1, r3
 8007756:	6978      	ldr	r0, [r7, #20]
 8007758:	f000 f81b 	bl	8007792 <USBD_GetNextDesc>
 800775c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	2b05      	cmp	r3, #5
 8007764:	d108      	bne.n	8007778 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	789b      	ldrb	r3, [r3, #2]
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	429a      	cmp	r2, r3
 8007772:	d008      	beq.n	8007786 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007774:	2300      	movs	r3, #0
 8007776:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	b29a      	uxth	r2, r3
 800777e:	897b      	ldrh	r3, [r7, #10]
 8007780:	429a      	cmp	r2, r3
 8007782:	d8e5      	bhi.n	8007750 <USBD_GetEpDesc+0x32>
 8007784:	e000      	b.n	8007788 <USBD_GetEpDesc+0x6a>
          break;
 8007786:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007788:	693b      	ldr	r3, [r7, #16]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	4413      	add	r3, r2
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077be:	68fb      	ldr	r3, [r7, #12]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	3301      	adds	r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077ea:	8a3b      	ldrh	r3, [r7, #16]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	b21a      	sxth	r2, r3
 80077f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b21b      	sxth	r3, r3
 80077f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077fa:	89fb      	ldrh	r3, [r7, #14]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d005      	beq.n	800782e <USBD_StdDevReq+0x26>
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d857      	bhi.n	80078d6 <USBD_StdDevReq+0xce>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00f      	beq.n	800784a <USBD_StdDevReq+0x42>
 800782a:	2b20      	cmp	r3, #32
 800782c:	d153      	bne.n	80078d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	32ae      	adds	r2, #174	; 0xae
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
      break;
 8007848:	e04a      	b.n	80078e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b09      	cmp	r3, #9
 8007850:	d83b      	bhi.n	80078ca <USBD_StdDevReq+0xc2>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <USBD_StdDevReq+0x50>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	080078ad 	.word	0x080078ad
 800785c:	080078c1 	.word	0x080078c1
 8007860:	080078cb 	.word	0x080078cb
 8007864:	080078b7 	.word	0x080078b7
 8007868:	080078cb 	.word	0x080078cb
 800786c:	0800788b 	.word	0x0800788b
 8007870:	08007881 	.word	0x08007881
 8007874:	080078cb 	.word	0x080078cb
 8007878:	080078a3 	.word	0x080078a3
 800787c:	08007895 	.word	0x08007895
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa3c 	bl	8007d00 <USBD_GetDescriptor>
          break;
 8007888:	e024      	b.n	80078d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fba1 	bl	8007fd4 <USBD_SetAddress>
          break;
 8007892:	e01f      	b.n	80078d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fbe0 	bl	800805c <USBD_SetConfig>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
          break;
 80078a0:	e018      	b.n	80078d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fc83 	bl	80081b0 <USBD_GetConfig>
          break;
 80078aa:	e013      	b.n	80078d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fcb4 	bl	800821c <USBD_GetStatus>
          break;
 80078b4:	e00e      	b.n	80078d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fce3 	bl	8008284 <USBD_SetFeature>
          break;
 80078be:	e009      	b.n	80078d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fd07 	bl	80082d6 <USBD_ClrFeature>
          break;
 80078c8:	e004      	b.n	80078d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fd5e 	bl	800838e <USBD_CtlError>
          break;
 80078d2:	bf00      	nop
      }
      break;
 80078d4:	e004      	b.n	80078e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fd58 	bl	800838e <USBD_CtlError>
      break;
 80078de:	bf00      	nop
  }

  return ret;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop

080078ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007902:	2b40      	cmp	r3, #64	; 0x40
 8007904:	d005      	beq.n	8007912 <USBD_StdItfReq+0x26>
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d852      	bhi.n	80079b0 <USBD_StdItfReq+0xc4>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <USBD_StdItfReq+0x26>
 800790e:	2b20      	cmp	r3, #32
 8007910:	d14e      	bne.n	80079b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	b2db      	uxtb	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	2b02      	cmp	r3, #2
 800791e:	d840      	bhi.n	80079a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	889b      	ldrh	r3, [r3, #4]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b01      	cmp	r3, #1
 8007928:	d836      	bhi.n	8007998 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	889b      	ldrh	r3, [r3, #4]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff fed9 	bl	80076ea <USBD_CoreFindIF>
 8007938:	4603      	mov	r3, r0
 800793a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2bff      	cmp	r3, #255	; 0xff
 8007940:	d01d      	beq.n	800797e <USBD_StdItfReq+0x92>
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11a      	bne.n	800797e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007948:	7bba      	ldrb	r2, [r7, #14]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	32ae      	adds	r2, #174	; 0xae
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00f      	beq.n	8007978 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007958:	7bba      	ldrb	r2, [r7, #14]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007960:	7bba      	ldrb	r2, [r7, #14]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	32ae      	adds	r2, #174	; 0xae
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007976:	e004      	b.n	8007982 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007978:	2303      	movs	r3, #3
 800797a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800797c:	e001      	b.n	8007982 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d110      	bne.n	80079ac <USBD_StdItfReq+0xc0>
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10d      	bne.n	80079ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fdc7 	bl	8008524 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007996:	e009      	b.n	80079ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fcf7 	bl	800838e <USBD_CtlError>
          break;
 80079a0:	e004      	b.n	80079ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fcf2 	bl	800838e <USBD_CtlError>
          break;
 80079aa:	e000      	b.n	80079ae <USBD_StdItfReq+0xc2>
          break;
 80079ac:	bf00      	nop
      }
      break;
 80079ae:	e004      	b.n	80079ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fceb 	bl	800838e <USBD_CtlError>
      break;
 80079b8:	bf00      	nop
  }

  return ret;
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	889b      	ldrh	r3, [r3, #4]
 80079d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d007      	beq.n	80079f4 <USBD_StdEPReq+0x30>
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	f200 817f 	bhi.w	8007ce8 <USBD_StdEPReq+0x324>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d02a      	beq.n	8007a44 <USBD_StdEPReq+0x80>
 80079ee:	2b20      	cmp	r3, #32
 80079f0:	f040 817a 	bne.w	8007ce8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fe83 	bl	8007704 <USBD_CoreFindEP>
 80079fe:	4603      	mov	r3, r0
 8007a00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a02:	7b7b      	ldrb	r3, [r7, #13]
 8007a04:	2bff      	cmp	r3, #255	; 0xff
 8007a06:	f000 8174 	beq.w	8007cf2 <USBD_StdEPReq+0x32e>
 8007a0a:	7b7b      	ldrb	r3, [r7, #13]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 8170 	bne.w	8007cf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a12:	7b7a      	ldrb	r2, [r7, #13]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a1a:	7b7a      	ldrb	r2, [r7, #13]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	32ae      	adds	r2, #174	; 0xae
 8007a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8163 	beq.w	8007cf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a2c:	7b7a      	ldrb	r2, [r7, #13]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	32ae      	adds	r2, #174	; 0xae
 8007a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a42:	e156      	b.n	8007cf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d008      	beq.n	8007a5e <USBD_StdEPReq+0x9a>
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	f300 8145 	bgt.w	8007cdc <USBD_StdEPReq+0x318>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 809b 	beq.w	8007b8e <USBD_StdEPReq+0x1ca>
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d03c      	beq.n	8007ad6 <USBD_StdEPReq+0x112>
 8007a5c:	e13e      	b.n	8007cdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d002      	beq.n	8007a70 <USBD_StdEPReq+0xac>
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d016      	beq.n	8007a9c <USBD_StdEPReq+0xd8>
 8007a6e:	e02c      	b.n	8007aca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00d      	beq.n	8007a92 <USBD_StdEPReq+0xce>
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b80      	cmp	r3, #128	; 0x80
 8007a7a:	d00a      	beq.n	8007a92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f96d 	bl	8008d60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a86:	2180      	movs	r1, #128	; 0x80
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 f969 	bl	8008d60 <USBD_LL_StallEP>
 8007a8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a90:	e020      	b.n	8007ad4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fc7a 	bl	800838e <USBD_CtlError>
              break;
 8007a9a:	e01b      	b.n	8007ad4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	885b      	ldrh	r3, [r3, #2]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10e      	bne.n	8007ac2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00b      	beq.n	8007ac2 <USBD_StdEPReq+0xfe>
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d008      	beq.n	8007ac2 <USBD_StdEPReq+0xfe>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	88db      	ldrh	r3, [r3, #6]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f94f 	bl	8008d60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fd2e 	bl	8008524 <USBD_CtlSendStatus>

              break;
 8007ac8:	e004      	b.n	8007ad4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fc5e 	bl	800838e <USBD_CtlError>
              break;
 8007ad2:	bf00      	nop
          }
          break;
 8007ad4:	e107      	b.n	8007ce6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d002      	beq.n	8007ae8 <USBD_StdEPReq+0x124>
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d016      	beq.n	8007b14 <USBD_StdEPReq+0x150>
 8007ae6:	e04b      	b.n	8007b80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <USBD_StdEPReq+0x146>
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b80      	cmp	r3, #128	; 0x80
 8007af2:	d00a      	beq.n	8007b0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f931 	bl	8008d60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007afe:	2180      	movs	r1, #128	; 0x80
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f92d 	bl	8008d60 <USBD_LL_StallEP>
 8007b06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b08:	e040      	b.n	8007b8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fc3e 	bl	800838e <USBD_CtlError>
              break;
 8007b12:	e03b      	b.n	8007b8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	885b      	ldrh	r3, [r3, #2]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d136      	bne.n	8007b8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d004      	beq.n	8007b30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f937 	bl	8008d9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fcf7 	bl	8008524 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff fde2 	bl	8007704 <USBD_CoreFindEP>
 8007b40:	4603      	mov	r3, r0
 8007b42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b44:	7b7b      	ldrb	r3, [r7, #13]
 8007b46:	2bff      	cmp	r3, #255	; 0xff
 8007b48:	d01f      	beq.n	8007b8a <USBD_StdEPReq+0x1c6>
 8007b4a:	7b7b      	ldrb	r3, [r7, #13]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11c      	bne.n	8007b8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b50:	7b7a      	ldrb	r2, [r7, #13]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b58:	7b7a      	ldrb	r2, [r7, #13]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32ae      	adds	r2, #174	; 0xae
 8007b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d010      	beq.n	8007b8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b68:	7b7a      	ldrb	r2, [r7, #13]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	32ae      	adds	r2, #174	; 0xae
 8007b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b7e:	e004      	b.n	8007b8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fc03 	bl	800838e <USBD_CtlError>
              break;
 8007b88:	e000      	b.n	8007b8c <USBD_StdEPReq+0x1c8>
              break;
 8007b8a:	bf00      	nop
          }
          break;
 8007b8c:	e0ab      	b.n	8007ce6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d002      	beq.n	8007ba0 <USBD_StdEPReq+0x1dc>
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d032      	beq.n	8007c04 <USBD_StdEPReq+0x240>
 8007b9e:	e097      	b.n	8007cd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <USBD_StdEPReq+0x1f2>
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b80      	cmp	r3, #128	; 0x80
 8007baa:	d004      	beq.n	8007bb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fbed 	bl	800838e <USBD_CtlError>
                break;
 8007bb4:	e091      	b.n	8007cda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da0b      	bge.n	8007bd6 <USBD_StdEPReq+0x212>
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	3310      	adds	r3, #16
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	e00b      	b.n	8007bee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bdc:	4613      	mov	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	3304      	adds	r3, #4
 8007bee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fc37 	bl	8008470 <USBD_CtlSendData>
              break;
 8007c02:	e06a      	b.n	8007cda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da11      	bge.n	8007c30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	f003 020f 	and.w	r2, r3, #15
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	3324      	adds	r3, #36	; 0x24
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d117      	bne.n	8007c56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fbb0 	bl	800838e <USBD_CtlError>
                  break;
 8007c2e:	e054      	b.n	8007cda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	f003 020f 	and.w	r2, r3, #15
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fb9d 	bl	800838e <USBD_CtlError>
                  break;
 8007c54:	e041      	b.n	8007cda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	da0b      	bge.n	8007c76 <USBD_StdEPReq+0x2b2>
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	3310      	adds	r3, #16
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	3304      	adds	r3, #4
 8007c74:	e00b      	b.n	8007c8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <USBD_StdEPReq+0x2d8>
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	2b80      	cmp	r3, #128	; 0x80
 8007c9a:	d103      	bne.n	8007ca4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e00e      	b.n	8007cc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 f897 	bl	8008ddc <USBD_LL_IsStallEP>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e002      	b.n	8007cc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fbd1 	bl	8008470 <USBD_CtlSendData>
              break;
 8007cce:	e004      	b.n	8007cda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fb5b 	bl	800838e <USBD_CtlError>
              break;
 8007cd8:	bf00      	nop
          }
          break;
 8007cda:	e004      	b.n	8007ce6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fb55 	bl	800838e <USBD_CtlError>
          break;
 8007ce4:	bf00      	nop
      }
      break;
 8007ce6:	e005      	b.n	8007cf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fb4f 	bl	800838e <USBD_CtlError>
      break;
 8007cf0:	e000      	b.n	8007cf4 <USBD_StdEPReq+0x330>
      break;
 8007cf2:	bf00      	nop
  }

  return ret;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	2b06      	cmp	r3, #6
 8007d22:	f200 8128 	bhi.w	8007f76 <USBD_GetDescriptor+0x276>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <USBD_GetDescriptor+0x2c>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d61 	.word	0x08007d61
 8007d34:	08007da1 	.word	0x08007da1
 8007d38:	08007f77 	.word	0x08007f77
 8007d3c:	08007f77 	.word	0x08007f77
 8007d40:	08007f17 	.word	0x08007f17
 8007d44:	08007f43 	.word	0x08007f43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
      break;
 8007d5e:	e112      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7c1b      	ldrb	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10d      	bne.n	8007d84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	f107 0208 	add.w	r2, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	2202      	movs	r2, #2
 8007d80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d82:	e100      	b.n	8007f86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	f107 0208 	add.w	r2, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	e0f2      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	f200 80ac 	bhi.w	8007f04 <USBD_GetDescriptor+0x204>
 8007dac:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <USBD_GetDescriptor+0xb4>)
 8007dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db2:	bf00      	nop
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007e01 	.word	0x08007e01
 8007dbc:	08007e35 	.word	0x08007e35
 8007dc0:	08007e69 	.word	0x08007e69
 8007dc4:	08007e9d 	.word	0x08007e9d
 8007dc8:	08007ed1 	.word	0x08007ed1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dee:	e091      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 facb 	bl	800838e <USBD_CtlError>
            err++;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfe:	e089      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e22:	e077      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fab1 	bl	800838e <USBD_CtlError>
            err++;
 8007e2c:	7afb      	ldrb	r3, [r7, #11]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	72fb      	strb	r3, [r7, #11]
          break;
 8007e32:	e06f      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e56:	e05d      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa97 	bl	800838e <USBD_CtlError>
            err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
          break;
 8007e66:	e055      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7c12      	ldrb	r2, [r2, #16]
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8a:	e043      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa7d 	bl	800838e <USBD_CtlError>
            err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9a:	e03b      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ebe:	e029      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa63 	bl	800838e <USBD_CtlError>
            err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ece:	e021      	b.n	8007f14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c12      	ldrb	r2, [r2, #16]
 8007ee8:	f107 0108 	add.w	r1, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef2:	e00f      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa49 	bl	800838e <USBD_CtlError>
            err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
          break;
 8007f02:	e007      	b.n	8007f14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa41 	bl	800838e <USBD_CtlError>
          err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f12:	bf00      	nop
      }
      break;
 8007f14:	e037      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7c1b      	ldrb	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	f107 0208 	add.w	r2, r7, #8
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4798      	blx	r3
 8007f2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f30:	e029      	b.n	8007f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fa2a 	bl	800838e <USBD_CtlError>
        err++;
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f40:	e021      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7c1b      	ldrb	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10d      	bne.n	8007f66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	f107 0208 	add.w	r2, r7, #8
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
 8007f5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	2207      	movs	r2, #7
 8007f62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f64:	e00f      	b.n	8007f86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa10 	bl	800838e <USBD_CtlError>
        err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
      break;
 8007f74:	e007      	b.n	8007f86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa08 	bl	800838e <USBD_CtlError>
      err++;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	3301      	adds	r3, #1
 8007f82:	72fb      	strb	r3, [r7, #11]
      break;
 8007f84:	bf00      	nop
  }

  if (err != 0U)
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11e      	bne.n	8007fca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	88db      	ldrh	r3, [r3, #6]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d016      	beq.n	8007fc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f94:	893b      	ldrh	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00e      	beq.n	8007fb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88da      	ldrh	r2, [r3, #6]
 8007f9e:	893b      	ldrh	r3, [r7, #8]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bf28      	it	cs
 8007fa4:	4613      	movcs	r3, r2
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007faa:	893b      	ldrh	r3, [r7, #8]
 8007fac:	461a      	mov	r2, r3
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fa5d 	bl	8008470 <USBD_CtlSendData>
 8007fb6:	e009      	b.n	8007fcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f9e7 	bl	800838e <USBD_CtlError>
 8007fc0:	e004      	b.n	8007fcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 faae 	bl	8008524 <USBD_CtlSendStatus>
 8007fc8:	e000      	b.n	8007fcc <USBD_GetDescriptor+0x2cc>
    return;
 8007fca:	bf00      	nop
  }
}
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop

08007fd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d131      	bne.n	800804a <USBD_SetAddress+0x76>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d12d      	bne.n	800804a <USBD_SetAddress+0x76>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	885b      	ldrh	r3, [r3, #2]
 8007ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ff4:	d829      	bhi.n	800804a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b03      	cmp	r3, #3
 800800c:	d104      	bne.n	8008018 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f9bc 	bl	800838e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008016:	e01d      	b.n	8008054 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7bfa      	ldrb	r2, [r7, #15]
 800801c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 ff05 	bl	8008e34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fa7a 	bl	8008524 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	e009      	b.n	8008054 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008048:	e004      	b.n	8008054 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f99e 	bl	800838e <USBD_CtlError>
  }
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	885b      	ldrh	r3, [r3, #2]
 800806e:	b2da      	uxtb	r2, r3
 8008070:	4b4e      	ldr	r3, [pc, #312]	; (80081ac <USBD_SetConfig+0x150>)
 8008072:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008074:	4b4d      	ldr	r3, [pc, #308]	; (80081ac <USBD_SetConfig+0x150>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d905      	bls.n	8008088 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f985 	bl	800838e <USBD_CtlError>
    return USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	e08c      	b.n	80081a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	d002      	beq.n	800809a <USBD_SetConfig+0x3e>
 8008094:	2b03      	cmp	r3, #3
 8008096:	d029      	beq.n	80080ec <USBD_SetConfig+0x90>
 8008098:	e075      	b.n	8008186 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800809a:	4b44      	ldr	r3, [pc, #272]	; (80081ac <USBD_SetConfig+0x150>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d020      	beq.n	80080e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080a2:	4b42      	ldr	r3, [pc, #264]	; (80081ac <USBD_SetConfig+0x150>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080ac:	4b3f      	ldr	r3, [pc, #252]	; (80081ac <USBD_SetConfig+0x150>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fe ffe7 	bl	8007086 <USBD_SetClassConfig>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f962 	bl	800838e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2202      	movs	r2, #2
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080d2:	e065      	b.n	80081a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa25 	bl	8008524 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2203      	movs	r2, #3
 80080de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080e2:	e05d      	b.n	80081a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fa1d 	bl	8008524 <USBD_CtlSendStatus>
      break;
 80080ea:	e059      	b.n	80081a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080ec:	4b2f      	ldr	r3, [pc, #188]	; (80081ac <USBD_SetConfig+0x150>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d112      	bne.n	800811a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080fc:	4b2b      	ldr	r3, [pc, #172]	; (80081ac <USBD_SetConfig+0x150>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008106:	4b29      	ldr	r3, [pc, #164]	; (80081ac <USBD_SetConfig+0x150>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fe ffd6 	bl	80070be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa06 	bl	8008524 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008118:	e042      	b.n	80081a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800811a:	4b24      	ldr	r3, [pc, #144]	; (80081ac <USBD_SetConfig+0x150>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d02a      	beq.n	800817e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7fe ffc4 	bl	80070be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008136:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <USBD_SetConfig+0x150>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008140:	4b1a      	ldr	r3, [pc, #104]	; (80081ac <USBD_SetConfig+0x150>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fe ff9d 	bl	8007086 <USBD_SetClassConfig>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00f      	beq.n	8008176 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f918 	bl	800838e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7fe ffa9 	bl	80070be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008174:	e014      	b.n	80081a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9d4 	bl	8008524 <USBD_CtlSendStatus>
      break;
 800817c:	e010      	b.n	80081a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9d0 	bl	8008524 <USBD_CtlSendStatus>
      break;
 8008184:	e00c      	b.n	80081a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f900 	bl	800838e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800818e:	4b07      	ldr	r3, [pc, #28]	; (80081ac <USBD_SetConfig+0x150>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fe ff92 	bl	80070be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800819a:	2303      	movs	r3, #3
 800819c:	73fb      	strb	r3, [r7, #15]
      break;
 800819e:	bf00      	nop
  }

  return ret;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000390 	.word	0x20000390

080081b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	88db      	ldrh	r3, [r3, #6]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d004      	beq.n	80081cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f8e2 	bl	800838e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081ca:	e023      	b.n	8008214 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	dc02      	bgt.n	80081de <USBD_GetConfig+0x2e>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dc03      	bgt.n	80081e4 <USBD_GetConfig+0x34>
 80081dc:	e015      	b.n	800820a <USBD_GetConfig+0x5a>
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d00b      	beq.n	80081fa <USBD_GetConfig+0x4a>
 80081e2:	e012      	b.n	800820a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3308      	adds	r3, #8
 80081ee:	2201      	movs	r2, #1
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f93c 	bl	8008470 <USBD_CtlSendData>
        break;
 80081f8:	e00c      	b.n	8008214 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3304      	adds	r3, #4
 80081fe:	2201      	movs	r2, #1
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f934 	bl	8008470 <USBD_CtlSendData>
        break;
 8008208:	e004      	b.n	8008214 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f8be 	bl	800838e <USBD_CtlError>
        break;
 8008212:	bf00      	nop
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822c:	b2db      	uxtb	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	2b02      	cmp	r3, #2
 8008232:	d81e      	bhi.n	8008272 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	88db      	ldrh	r3, [r3, #6]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d004      	beq.n	8008246 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8a5 	bl	800838e <USBD_CtlError>
        break;
 8008244:	e01a      	b.n	800827c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f043 0202 	orr.w	r2, r3, #2
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	330c      	adds	r3, #12
 8008266:	2202      	movs	r2, #2
 8008268:	4619      	mov	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f900 	bl	8008470 <USBD_CtlSendData>
      break;
 8008270:	e004      	b.n	800827c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f88a 	bl	800838e <USBD_CtlError>
      break;
 800827a:	bf00      	nop
  }
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d107      	bne.n	80082a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f940 	bl	8008524 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082a4:	e013      	b.n	80082ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d10b      	bne.n	80082c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	889b      	ldrh	r3, [r3, #4]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f930 	bl	8008524 <USBD_CtlSendStatus>
}
 80082c4:	e003      	b.n	80082ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f860 	bl	800838e <USBD_CtlError>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d80b      	bhi.n	8008306 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	885b      	ldrh	r3, [r3, #2]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10c      	bne.n	8008310 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f910 	bl	8008524 <USBD_CtlSendStatus>
      }
      break;
 8008304:	e004      	b.n	8008310 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f840 	bl	800838e <USBD_CtlError>
      break;
 800830e:	e000      	b.n	8008312 <USBD_ClrFeature+0x3c>
      break;
 8008310:	bf00      	nop
  }
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	781a      	ldrb	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3301      	adds	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff fa41 	bl	80077cc <SWAPBYTE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3301      	adds	r3, #1
 8008356:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff fa34 	bl	80077cc <SWAPBYTE>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3301      	adds	r3, #1
 8008376:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff fa27 	bl	80077cc <SWAPBYTE>
 800837e:	4603      	mov	r3, r0
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	80da      	strh	r2, [r3, #6]
}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008398:	2180      	movs	r1, #128	; 0x80
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fce0 	bl	8008d60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fcdc 	bl	8008d60 <USBD_LL_StallEP>
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d036      	beq.n	8008434 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f000 f836 	bl	800843c <USBD_GetLen>
 80083d0:	4603      	mov	r3, r0
 80083d2:	3301      	adds	r3, #1
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	4413      	add	r3, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7812      	ldrb	r2, [r2, #0]
 80083e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	3301      	adds	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	4413      	add	r3, r2
 80083f6:	2203      	movs	r2, #3
 80083f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	3301      	adds	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008400:	e013      	b.n	800842a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	4413      	add	r3, r2
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	7812      	ldrb	r2, [r2, #0]
 800840c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	613b      	str	r3, [r7, #16]
    idx++;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	3301      	adds	r3, #1
 8008418:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4413      	add	r3, r2
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
    idx++;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	3301      	adds	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e7      	bne.n	8008402 <USBD_GetString+0x52>
 8008432:	e000      	b.n	8008436 <USBD_GetString+0x86>
    return;
 8008434:	bf00      	nop
  }
}
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800844c:	e005      	b.n	800845a <USBD_GetLen+0x1e>
  {
    len++;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	3301      	adds	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	3301      	adds	r3, #1
 8008458:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f5      	bne.n	800844e <USBD_GetLen+0x12>
  }

  return len;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2202      	movs	r2, #2
 8008480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fceb 	bl	8008e72 <USBD_LL_Transmit>

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	2100      	movs	r1, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fcda 	bl	8008e72 <USBD_LL_Transmit>

  return USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2203      	movs	r2, #3
 80084d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	2100      	movs	r1, #0
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 fcde 	bl	8008eb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	2100      	movs	r1, #0
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fccd 	bl	8008eb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2204      	movs	r2, #4
 8008530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008534:	2300      	movs	r3, #0
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fc99 	bl	8008e72 <USBD_LL_Transmit>

  return USBD_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2205      	movs	r2, #5
 8008556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800855a:	2300      	movs	r3, #0
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fca7 	bl	8008eb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008574:	2200      	movs	r2, #0
 8008576:	4912      	ldr	r1, [pc, #72]	; (80085c0 <MX_USB_DEVICE_Init+0x50>)
 8008578:	4812      	ldr	r0, [pc, #72]	; (80085c4 <MX_USB_DEVICE_Init+0x54>)
 800857a:	f7fe fd07 	bl	8006f8c <USBD_Init>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008584:	f7f8 fda2 	bl	80010cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008588:	490f      	ldr	r1, [pc, #60]	; (80085c8 <MX_USB_DEVICE_Init+0x58>)
 800858a:	480e      	ldr	r0, [pc, #56]	; (80085c4 <MX_USB_DEVICE_Init+0x54>)
 800858c:	f7fe fd2e 	bl	8006fec <USBD_RegisterClass>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008596:	f7f8 fd99 	bl	80010cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800859a:	490c      	ldr	r1, [pc, #48]	; (80085cc <MX_USB_DEVICE_Init+0x5c>)
 800859c:	4809      	ldr	r0, [pc, #36]	; (80085c4 <MX_USB_DEVICE_Init+0x54>)
 800859e:	f7fe fc1f 	bl	8006de0 <USBD_CDC_RegisterInterface>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085a8:	f7f8 fd90 	bl	80010cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085ac:	4805      	ldr	r0, [pc, #20]	; (80085c4 <MX_USB_DEVICE_Init+0x54>)
 80085ae:	f7fe fd53 	bl	8007058 <USBD_Start>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085b8:	f7f8 fd88 	bl	80010cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085bc:	bf00      	nop
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	200000ac 	.word	0x200000ac
 80085c4:	20000394 	.word	0x20000394
 80085c8:	20000018 	.word	0x20000018
 80085cc:	20000098 	.word	0x20000098

080085d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085d4:	2200      	movs	r2, #0
 80085d6:	4905      	ldr	r1, [pc, #20]	; (80085ec <CDC_Init_FS+0x1c>)
 80085d8:	4805      	ldr	r0, [pc, #20]	; (80085f0 <CDC_Init_FS+0x20>)
 80085da:	f7fe fc1b 	bl	8006e14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085de:	4905      	ldr	r1, [pc, #20]	; (80085f4 <CDC_Init_FS+0x24>)
 80085e0:	4803      	ldr	r0, [pc, #12]	; (80085f0 <CDC_Init_FS+0x20>)
 80085e2:	f7fe fc39 	bl	8006e58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000e70 	.word	0x20000e70
 80085f0:	20000394 	.word	0x20000394
 80085f4:	20000670 	.word	0x20000670

080085f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085fe:	4618      	mov	r0, r3
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
 8008614:	4613      	mov	r3, r2
 8008616:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	2b23      	cmp	r3, #35	; 0x23
 800861c:	d84a      	bhi.n	80086b4 <CDC_Control_FS+0xac>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <CDC_Control_FS+0x1c>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	080086b5 	.word	0x080086b5
 8008628:	080086b5 	.word	0x080086b5
 800862c:	080086b5 	.word	0x080086b5
 8008630:	080086b5 	.word	0x080086b5
 8008634:	080086b5 	.word	0x080086b5
 8008638:	080086b5 	.word	0x080086b5
 800863c:	080086b5 	.word	0x080086b5
 8008640:	080086b5 	.word	0x080086b5
 8008644:	080086b5 	.word	0x080086b5
 8008648:	080086b5 	.word	0x080086b5
 800864c:	080086b5 	.word	0x080086b5
 8008650:	080086b5 	.word	0x080086b5
 8008654:	080086b5 	.word	0x080086b5
 8008658:	080086b5 	.word	0x080086b5
 800865c:	080086b5 	.word	0x080086b5
 8008660:	080086b5 	.word	0x080086b5
 8008664:	080086b5 	.word	0x080086b5
 8008668:	080086b5 	.word	0x080086b5
 800866c:	080086b5 	.word	0x080086b5
 8008670:	080086b5 	.word	0x080086b5
 8008674:	080086b5 	.word	0x080086b5
 8008678:	080086b5 	.word	0x080086b5
 800867c:	080086b5 	.word	0x080086b5
 8008680:	080086b5 	.word	0x080086b5
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086b5 	.word	0x080086b5
 800868c:	080086b5 	.word	0x080086b5
 8008690:	080086b5 	.word	0x080086b5
 8008694:	080086b5 	.word	0x080086b5
 8008698:	080086b5 	.word	0x080086b5
 800869c:	080086b5 	.word	0x080086b5
 80086a0:	080086b5 	.word	0x080086b5
 80086a4:	080086b5 	.word	0x080086b5
 80086a8:	080086b5 	.word	0x080086b5
 80086ac:	080086b5 	.word	0x080086b5
 80086b0:	080086b5 	.word	0x080086b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086b4:	bf00      	nop
  }

  return (USBD_OK);
 80086b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	4805      	ldr	r0, [pc, #20]	; (80086e8 <CDC_Receive_FS+0x24>)
 80086d2:	f7fe fbc1 	bl	8006e58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086d6:	4804      	ldr	r0, [pc, #16]	; (80086e8 <CDC_Receive_FS+0x24>)
 80086d8:	f7fe fc22 	bl	8006f20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000394 	.word	0x20000394

080086ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086fc:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <CDC_Transmit_FS+0x48>)
 80086fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008702:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800870e:	2301      	movs	r3, #1
 8008710:	e00b      	b.n	800872a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008712:	887b      	ldrh	r3, [r7, #2]
 8008714:	461a      	mov	r2, r3
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4806      	ldr	r0, [pc, #24]	; (8008734 <CDC_Transmit_FS+0x48>)
 800871a:	f7fe fb7b 	bl	8006e14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800871e:	4805      	ldr	r0, [pc, #20]	; (8008734 <CDC_Transmit_FS+0x48>)
 8008720:	f7fe fbb8 	bl	8006e94 <USBD_CDC_TransmitPacket>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20000394 	.word	0x20000394

08008738 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800874a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2212      	movs	r2, #18
 800876c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800876e:	4b03      	ldr	r3, [pc, #12]	; (800877c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	200000c8 	.word	0x200000c8

08008780 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2204      	movs	r2, #4
 8008790:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008792:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	200000dc 	.word	0x200000dc

080087a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d105      	bne.n	80087c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4907      	ldr	r1, [pc, #28]	; (80087d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80087ba:	4808      	ldr	r0, [pc, #32]	; (80087dc <USBD_FS_ProductStrDescriptor+0x38>)
 80087bc:	f7ff fdf8 	bl	80083b0 <USBD_GetString>
 80087c0:	e004      	b.n	80087cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4904      	ldr	r1, [pc, #16]	; (80087d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80087c6:	4805      	ldr	r0, [pc, #20]	; (80087dc <USBD_FS_ProductStrDescriptor+0x38>)
 80087c8:	f7ff fdf2 	bl	80083b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001670 	.word	0x20001670
 80087dc:	0800bcd0 	.word	0x0800bcd0

080087e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	6039      	str	r1, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	4904      	ldr	r1, [pc, #16]	; (8008800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087f0:	4804      	ldr	r0, [pc, #16]	; (8008804 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087f2:	f7ff fddd 	bl	80083b0 <USBD_GetString>
  return USBD_StrDesc;
 80087f6:	4b02      	ldr	r3, [pc, #8]	; (8008800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20001670 	.word	0x20001670
 8008804:	0800bce8 	.word	0x0800bce8

08008808 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	4603      	mov	r3, r0
 8008810:	6039      	str	r1, [r7, #0]
 8008812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	221a      	movs	r2, #26
 8008818:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800881a:	f000 f843 	bl	80088a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800881e:	4b02      	ldr	r3, [pc, #8]	; (8008828 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	200000e0 	.word	0x200000e0

0800882c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	6039      	str	r1, [r7, #0]
 8008836:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d105      	bne.n	800884a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	4907      	ldr	r1, [pc, #28]	; (8008860 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008842:	4808      	ldr	r0, [pc, #32]	; (8008864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008844:	f7ff fdb4 	bl	80083b0 <USBD_GetString>
 8008848:	e004      	b.n	8008854 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	4904      	ldr	r1, [pc, #16]	; (8008860 <USBD_FS_ConfigStrDescriptor+0x34>)
 800884e:	4805      	ldr	r0, [pc, #20]	; (8008864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008850:	f7ff fdae 	bl	80083b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008854:	4b02      	ldr	r3, [pc, #8]	; (8008860 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20001670 	.word	0x20001670
 8008864:	0800bcfc 	.word	0x0800bcfc

08008868 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	4907      	ldr	r1, [pc, #28]	; (800889c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800887e:	4808      	ldr	r0, [pc, #32]	; (80088a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008880:	f7ff fd96 	bl	80083b0 <USBD_GetString>
 8008884:	e004      	b.n	8008890 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4904      	ldr	r1, [pc, #16]	; (800889c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800888a:	4805      	ldr	r0, [pc, #20]	; (80088a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800888c:	f7ff fd90 	bl	80083b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20001670 	.word	0x20001670
 80088a0:	0800bd08 	.word	0x0800bd08

080088a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088aa:	4b0f      	ldr	r3, [pc, #60]	; (80088e8 <Get_SerialNum+0x44>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088b0:	4b0e      	ldr	r3, [pc, #56]	; (80088ec <Get_SerialNum+0x48>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088b6:	4b0e      	ldr	r3, [pc, #56]	; (80088f0 <Get_SerialNum+0x4c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4413      	add	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088ca:	2208      	movs	r2, #8
 80088cc:	4909      	ldr	r1, [pc, #36]	; (80088f4 <Get_SerialNum+0x50>)
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 f814 	bl	80088fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088d4:	2204      	movs	r2, #4
 80088d6:	4908      	ldr	r1, [pc, #32]	; (80088f8 <Get_SerialNum+0x54>)
 80088d8:	68b8      	ldr	r0, [r7, #8]
 80088da:	f000 f80f 	bl	80088fc <IntToUnicode>
  }
}
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	1fff7a10 	.word	0x1fff7a10
 80088ec:	1fff7a14 	.word	0x1fff7a14
 80088f0:	1fff7a18 	.word	0x1fff7a18
 80088f4:	200000e2 	.word	0x200000e2
 80088f8:	200000f2 	.word	0x200000f2

080088fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800890e:	2300      	movs	r3, #0
 8008910:	75fb      	strb	r3, [r7, #23]
 8008912:	e027      	b.n	8008964 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	0f1b      	lsrs	r3, r3, #28
 8008918:	2b09      	cmp	r3, #9
 800891a:	d80b      	bhi.n	8008934 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	0f1b      	lsrs	r3, r3, #28
 8008920:	b2da      	uxtb	r2, r3
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	4619      	mov	r1, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	440b      	add	r3, r1
 800892c:	3230      	adds	r2, #48	; 0x30
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	e00a      	b.n	800894a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	0f1b      	lsrs	r3, r3, #28
 8008938:	b2da      	uxtb	r2, r3
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	4619      	mov	r1, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	440b      	add	r3, r1
 8008944:	3237      	adds	r2, #55	; 0x37
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	3301      	adds	r3, #1
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	4413      	add	r3, r2
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	3301      	adds	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]
 8008964:	7dfa      	ldrb	r2, [r7, #23]
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	429a      	cmp	r2, r3
 800896a:	d3d3      	bcc.n	8008914 <IntToUnicode+0x18>
  }
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
	...

0800897c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	; 0x28
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008984:	f107 0314 	add.w	r3, r7, #20
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	605a      	str	r2, [r3, #4]
 800898e:	609a      	str	r2, [r3, #8]
 8008990:	60da      	str	r2, [r3, #12]
 8008992:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800899c:	d13a      	bne.n	8008a14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800899e:	2300      	movs	r3, #0
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	6313      	str	r3, [r2, #48]	; 0x30
 80089ae:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80089be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089c0:	2302      	movs	r3, #2
 80089c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c8:	2303      	movs	r3, #3
 80089ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089cc:	230a      	movs	r3, #10
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	4619      	mov	r1, r3
 80089d6:	4812      	ldr	r0, [pc, #72]	; (8008a20 <HAL_PCD_MspInit+0xa4>)
 80089d8:	f7f8 ff02 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089dc:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e0:	4a0e      	ldr	r2, [pc, #56]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e6:	6353      	str	r3, [r2, #52]	; 0x34
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f0:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089f6:	6453      	str	r3, [r2, #68]	; 0x44
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <HAL_PCD_MspInit+0xa0>)
 80089fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	2043      	movs	r0, #67	; 0x43
 8008a0a:	f7f8 feb2 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a0e:	2043      	movs	r0, #67	; 0x43
 8008a10:	f7f8 fecb 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a14:	bf00      	nop
 8008a16:	3728      	adds	r7, #40	; 0x28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	40023800 	.word	0x40023800
 8008a20:	40020000 	.word	0x40020000

08008a24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f7fe fb59 	bl	80070f2 <USBD_LL_SetupStage>
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	4619      	mov	r1, r3
 8008a72:	f7fe fb93 	bl	800719c <USBD_LL_DataOutStage>
}
 8008a76:	bf00      	nop
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a90:	78fa      	ldrb	r2, [r7, #3]
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	334c      	adds	r3, #76	; 0x4c
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	f7fe fc2c 	bl	8007302 <USBD_LL_DataInStage>
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fd60 	bl	8007586 <USBD_LL_SOF>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d102      	bne.n	8008ae8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
 8008ae6:	e008      	b.n	8008afa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d102      	bne.n	8008af6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
 8008af4:	e001      	b.n	8008afa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008af6:	f7f8 fae9 	bl	80010cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b00:	7bfa      	ldrb	r2, [r7, #15]
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fd00 	bl	800750a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fca8 	bl	8007466 <USBD_LL_Reset>
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fcfb 	bl	800752a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b54:	4b04      	ldr	r3, [pc, #16]	; (8008b68 <HAL_PCD_SuspendCallback+0x48>)
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	4a03      	ldr	r2, [pc, #12]	; (8008b68 <HAL_PCD_SuspendCallback+0x48>)
 8008b5a:	f043 0306 	orr.w	r3, r3, #6
 8008b5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed00 	.word	0xe000ed00

08008b6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fceb 	bl	8007556 <USBD_LL_Resume>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b9a:	78fa      	ldrb	r2, [r7, #3]
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fd43 	bl	800762a <USBD_LL_IsoOUTIncomplete>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fcff 	bl	80075c6 <USBD_LL_IsoINIncomplete>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fd55 	bl	800768e <USBD_LL_DevConnected>
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe fd52 	bl	80076a4 <USBD_LL_DevDisconnected>
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d13c      	bne.n	8008c92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c18:	4a20      	ldr	r2, [pc, #128]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a1e      	ldr	r2, [pc, #120]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c28:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c30:	4b1a      	ldr	r3, [pc, #104]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c32:	2204      	movs	r2, #4
 8008c34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c36:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c38:	2202      	movs	r2, #2
 8008c3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c3c:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c42:	4b16      	ldr	r3, [pc, #88]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c44:	2202      	movs	r2, #2
 8008c46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c48:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c54:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c60:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c66:	480d      	ldr	r0, [pc, #52]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c68:	f7f9 ff49 	bl	8002afe <HAL_PCD_Init>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c72:	f7f8 fa2b 	bl	80010cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c76:	2180      	movs	r1, #128	; 0x80
 8008c78:	4808      	ldr	r0, [pc, #32]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c7a:	f7fb f9a0 	bl	8003fbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c7e:	2240      	movs	r2, #64	; 0x40
 8008c80:	2100      	movs	r1, #0
 8008c82:	4806      	ldr	r0, [pc, #24]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c84:	f7fb f954 	bl	8003f30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c88:	2280      	movs	r2, #128	; 0x80
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	4803      	ldr	r0, [pc, #12]	; (8008c9c <USBD_LL_Init+0x94>)
 8008c8e:	f7fb f94f 	bl	8003f30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20001870 	.word	0x20001870

08008ca0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fa f83e 	bl	8002d38 <HAL_PCD_Start>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 f942 	bl	8008f4c <USBD_Get_USB_Status>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	4608      	mov	r0, r1
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	70fb      	strb	r3, [r7, #3]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70bb      	strb	r3, [r7, #2]
 8008cec:	4613      	mov	r3, r2
 8008cee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cfe:	78bb      	ldrb	r3, [r7, #2]
 8008d00:	883a      	ldrh	r2, [r7, #0]
 8008d02:	78f9      	ldrb	r1, [r7, #3]
 8008d04:	f7fa fd0f 	bl	8003726 <HAL_PCD_EP_Open>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f91c 	bl	8008f4c <USBD_Get_USB_Status>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d3c:	78fa      	ldrb	r2, [r7, #3]
 8008d3e:	4611      	mov	r1, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fa fd58 	bl	80037f6 <HAL_PCD_EP_Close>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f8fd 	bl	8008f4c <USBD_Get_USB_Status>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d7a:	78fa      	ldrb	r2, [r7, #3]
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fa fe30 	bl	80039e4 <HAL_PCD_EP_SetStall>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 f8de 	bl	8008f4c <USBD_Get_USB_Status>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fa fe75 	bl	8003aac <HAL_PCD_EP_ClrStall>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f8bf 	bl	8008f4c <USBD_Get_USB_Status>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da0b      	bge.n	8008e10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	4613      	mov	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	4413      	add	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	440b      	add	r3, r1
 8008e0a:	333e      	adds	r3, #62	; 0x3e
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	e00b      	b.n	8008e28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fa fc42 	bl	80036dc <HAL_PCD_SetAddress>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f874 	bl	8008f4c <USBD_Get_USB_Status>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b086      	sub	sp, #24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	60f8      	str	r0, [r7, #12]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e90:	7af9      	ldrb	r1, [r7, #11]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	f7fa fd5b 	bl	8003950 <HAL_PCD_EP_Transmit>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 f853 	bl	8008f4c <USBD_Get_USB_Status>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	607a      	str	r2, [r7, #4]
 8008ebe:	603b      	str	r3, [r7, #0]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ed2:	7af9      	ldrb	r1, [r7, #11]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	f7fa fcd7 	bl	800388a <HAL_PCD_EP_Receive>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f832 	bl	8008f4c <USBD_Get_USB_Status>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eec:	7dbb      	ldrb	r3, [r7, #22]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fa fd07 	bl	8003920 <HAL_PCD_EP_GetRxCount>
 8008f12:	4603      	mov	r3, r0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f24:	4b03      	ldr	r3, [pc, #12]	; (8008f34 <USBD_static_malloc+0x18>)
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20001d7c 	.word	0x20001d7c

08008f38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d817      	bhi.n	8008f90 <USBD_Get_USB_Status+0x44>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <USBD_Get_USB_Status+0x1c>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008f79 	.word	0x08008f79
 8008f6c:	08008f7f 	.word	0x08008f7f
 8008f70:	08008f85 	.word	0x08008f85
 8008f74:	08008f8b 	.word	0x08008f8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7c:	e00b      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	73fb      	strb	r3, [r7, #15]
    break;
 8008f82:	e008      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f84:	2301      	movs	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
    break;
 8008f88:	e005      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8e:	e002      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f90:	2303      	movs	r3, #3
 8008f92:	73fb      	strb	r3, [r7, #15]
    break;
 8008f94:	bf00      	nop
  }
  return usb_status;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <__cvt>:
 8008fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa8:	ec55 4b10 	vmov	r4, r5, d0
 8008fac:	2d00      	cmp	r5, #0
 8008fae:	460e      	mov	r6, r1
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	bfbb      	ittet	lt
 8008fb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fba:	461d      	movlt	r5, r3
 8008fbc:	2300      	movge	r3, #0
 8008fbe:	232d      	movlt	r3, #45	; 0x2d
 8008fc0:	700b      	strb	r3, [r1, #0]
 8008fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fc8:	4691      	mov	r9, r2
 8008fca:	f023 0820 	bic.w	r8, r3, #32
 8008fce:	bfbc      	itt	lt
 8008fd0:	4622      	movlt	r2, r4
 8008fd2:	4614      	movlt	r4, r2
 8008fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fd8:	d005      	beq.n	8008fe6 <__cvt+0x42>
 8008fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fde:	d100      	bne.n	8008fe2 <__cvt+0x3e>
 8008fe0:	3601      	adds	r6, #1
 8008fe2:	2102      	movs	r1, #2
 8008fe4:	e000      	b.n	8008fe8 <__cvt+0x44>
 8008fe6:	2103      	movs	r1, #3
 8008fe8:	ab03      	add	r3, sp, #12
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	ab02      	add	r3, sp, #8
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	ec45 4b10 	vmov	d0, r4, r5
 8008ff4:	4653      	mov	r3, sl
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	f000 fe56 	bl	8009ca8 <_dtoa_r>
 8008ffc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009000:	4607      	mov	r7, r0
 8009002:	d102      	bne.n	800900a <__cvt+0x66>
 8009004:	f019 0f01 	tst.w	r9, #1
 8009008:	d022      	beq.n	8009050 <__cvt+0xac>
 800900a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800900e:	eb07 0906 	add.w	r9, r7, r6
 8009012:	d110      	bne.n	8009036 <__cvt+0x92>
 8009014:	783b      	ldrb	r3, [r7, #0]
 8009016:	2b30      	cmp	r3, #48	; 0x30
 8009018:	d10a      	bne.n	8009030 <__cvt+0x8c>
 800901a:	2200      	movs	r2, #0
 800901c:	2300      	movs	r3, #0
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8009026:	b918      	cbnz	r0, 8009030 <__cvt+0x8c>
 8009028:	f1c6 0601 	rsb	r6, r6, #1
 800902c:	f8ca 6000 	str.w	r6, [sl]
 8009030:	f8da 3000 	ldr.w	r3, [sl]
 8009034:	4499      	add	r9, r3
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	4620      	mov	r0, r4
 800903c:	4629      	mov	r1, r5
 800903e:	f7f7 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8009042:	b108      	cbz	r0, 8009048 <__cvt+0xa4>
 8009044:	f8cd 900c 	str.w	r9, [sp, #12]
 8009048:	2230      	movs	r2, #48	; 0x30
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	454b      	cmp	r3, r9
 800904e:	d307      	bcc.n	8009060 <__cvt+0xbc>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009054:	1bdb      	subs	r3, r3, r7
 8009056:	4638      	mov	r0, r7
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	b004      	add	sp, #16
 800905c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009060:	1c59      	adds	r1, r3, #1
 8009062:	9103      	str	r1, [sp, #12]
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	e7f0      	b.n	800904a <__cvt+0xa6>

08009068 <__exponent>:
 8009068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800906a:	4603      	mov	r3, r0
 800906c:	2900      	cmp	r1, #0
 800906e:	bfb8      	it	lt
 8009070:	4249      	neglt	r1, r1
 8009072:	f803 2b02 	strb.w	r2, [r3], #2
 8009076:	bfb4      	ite	lt
 8009078:	222d      	movlt	r2, #45	; 0x2d
 800907a:	222b      	movge	r2, #43	; 0x2b
 800907c:	2909      	cmp	r1, #9
 800907e:	7042      	strb	r2, [r0, #1]
 8009080:	dd2a      	ble.n	80090d8 <__exponent+0x70>
 8009082:	f10d 0207 	add.w	r2, sp, #7
 8009086:	4617      	mov	r7, r2
 8009088:	260a      	movs	r6, #10
 800908a:	4694      	mov	ip, r2
 800908c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009090:	fb06 1415 	mls	r4, r6, r5, r1
 8009094:	3430      	adds	r4, #48	; 0x30
 8009096:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800909a:	460c      	mov	r4, r1
 800909c:	2c63      	cmp	r4, #99	; 0x63
 800909e:	f102 32ff 	add.w	r2, r2, #4294967295
 80090a2:	4629      	mov	r1, r5
 80090a4:	dcf1      	bgt.n	800908a <__exponent+0x22>
 80090a6:	3130      	adds	r1, #48	; 0x30
 80090a8:	f1ac 0402 	sub.w	r4, ip, #2
 80090ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80090b0:	1c41      	adds	r1, r0, #1
 80090b2:	4622      	mov	r2, r4
 80090b4:	42ba      	cmp	r2, r7
 80090b6:	d30a      	bcc.n	80090ce <__exponent+0x66>
 80090b8:	f10d 0209 	add.w	r2, sp, #9
 80090bc:	eba2 020c 	sub.w	r2, r2, ip
 80090c0:	42bc      	cmp	r4, r7
 80090c2:	bf88      	it	hi
 80090c4:	2200      	movhi	r2, #0
 80090c6:	4413      	add	r3, r2
 80090c8:	1a18      	subs	r0, r3, r0
 80090ca:	b003      	add	sp, #12
 80090cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80090d6:	e7ed      	b.n	80090b4 <__exponent+0x4c>
 80090d8:	2330      	movs	r3, #48	; 0x30
 80090da:	3130      	adds	r1, #48	; 0x30
 80090dc:	7083      	strb	r3, [r0, #2]
 80090de:	70c1      	strb	r1, [r0, #3]
 80090e0:	1d03      	adds	r3, r0, #4
 80090e2:	e7f1      	b.n	80090c8 <__exponent+0x60>

080090e4 <_printf_float>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	ed2d 8b02 	vpush	{d8}
 80090ec:	b08d      	sub	sp, #52	; 0x34
 80090ee:	460c      	mov	r4, r1
 80090f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090f4:	4616      	mov	r6, r2
 80090f6:	461f      	mov	r7, r3
 80090f8:	4605      	mov	r5, r0
 80090fa:	f000 fcd5 	bl	8009aa8 <_localeconv_r>
 80090fe:	f8d0 a000 	ldr.w	sl, [r0]
 8009102:	4650      	mov	r0, sl
 8009104:	f7f7 f8b4 	bl	8000270 <strlen>
 8009108:	2300      	movs	r3, #0
 800910a:	930a      	str	r3, [sp, #40]	; 0x28
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	9305      	str	r3, [sp, #20]
 8009110:	f8d8 3000 	ldr.w	r3, [r8]
 8009114:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009118:	3307      	adds	r3, #7
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	f103 0208 	add.w	r2, r3, #8
 8009122:	f8c8 2000 	str.w	r2, [r8]
 8009126:	e9d3 8900 	ldrd	r8, r9, [r3]
 800912a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	f8cd 8018 	str.w	r8, [sp, #24]
 8009134:	ee08 0a10 	vmov	s16, r0
 8009138:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800913c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009140:	4b9e      	ldr	r3, [pc, #632]	; (80093bc <_printf_float+0x2d8>)
 8009142:	f04f 32ff 	mov.w	r2, #4294967295
 8009146:	f7f7 fcf1 	bl	8000b2c <__aeabi_dcmpun>
 800914a:	bb88      	cbnz	r0, 80091b0 <_printf_float+0xcc>
 800914c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009150:	4b9a      	ldr	r3, [pc, #616]	; (80093bc <_printf_float+0x2d8>)
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	f7f7 fccb 	bl	8000af0 <__aeabi_dcmple>
 800915a:	bb48      	cbnz	r0, 80091b0 <_printf_float+0xcc>
 800915c:	2200      	movs	r2, #0
 800915e:	2300      	movs	r3, #0
 8009160:	4640      	mov	r0, r8
 8009162:	4649      	mov	r1, r9
 8009164:	f7f7 fcba 	bl	8000adc <__aeabi_dcmplt>
 8009168:	b110      	cbz	r0, 8009170 <_printf_float+0x8c>
 800916a:	232d      	movs	r3, #45	; 0x2d
 800916c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009170:	4a93      	ldr	r2, [pc, #588]	; (80093c0 <_printf_float+0x2dc>)
 8009172:	4b94      	ldr	r3, [pc, #592]	; (80093c4 <_printf_float+0x2e0>)
 8009174:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009178:	bf94      	ite	ls
 800917a:	4690      	movls	r8, r2
 800917c:	4698      	movhi	r8, r3
 800917e:	2303      	movs	r3, #3
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	f023 0304 	bic.w	r3, r3, #4
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	f04f 0900 	mov.w	r9, #0
 800918e:	9700      	str	r7, [sp, #0]
 8009190:	4633      	mov	r3, r6
 8009192:	aa0b      	add	r2, sp, #44	; 0x2c
 8009194:	4621      	mov	r1, r4
 8009196:	4628      	mov	r0, r5
 8009198:	f000 f9da 	bl	8009550 <_printf_common>
 800919c:	3001      	adds	r0, #1
 800919e:	f040 8090 	bne.w	80092c2 <_printf_float+0x1de>
 80091a2:	f04f 30ff 	mov.w	r0, #4294967295
 80091a6:	b00d      	add	sp, #52	; 0x34
 80091a8:	ecbd 8b02 	vpop	{d8}
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	4640      	mov	r0, r8
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7f7 fcb8 	bl	8000b2c <__aeabi_dcmpun>
 80091bc:	b140      	cbz	r0, 80091d0 <_printf_float+0xec>
 80091be:	464b      	mov	r3, r9
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bfbc      	itt	lt
 80091c4:	232d      	movlt	r3, #45	; 0x2d
 80091c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091ca:	4a7f      	ldr	r2, [pc, #508]	; (80093c8 <_printf_float+0x2e4>)
 80091cc:	4b7f      	ldr	r3, [pc, #508]	; (80093cc <_printf_float+0x2e8>)
 80091ce:	e7d1      	b.n	8009174 <_printf_float+0x90>
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091d6:	9206      	str	r2, [sp, #24]
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	d13f      	bne.n	800925c <_printf_float+0x178>
 80091dc:	2306      	movs	r3, #6
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	6861      	ldr	r1, [r4, #4]
 80091e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091e8:	2300      	movs	r3, #0
 80091ea:	9303      	str	r3, [sp, #12]
 80091ec:	ab0a      	add	r3, sp, #40	; 0x28
 80091ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091f2:	ab09      	add	r3, sp, #36	; 0x24
 80091f4:	ec49 8b10 	vmov	d0, r8, r9
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	6022      	str	r2, [r4, #0]
 80091fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009200:	4628      	mov	r0, r5
 8009202:	f7ff fecf 	bl	8008fa4 <__cvt>
 8009206:	9b06      	ldr	r3, [sp, #24]
 8009208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800920a:	2b47      	cmp	r3, #71	; 0x47
 800920c:	4680      	mov	r8, r0
 800920e:	d108      	bne.n	8009222 <_printf_float+0x13e>
 8009210:	1cc8      	adds	r0, r1, #3
 8009212:	db02      	blt.n	800921a <_printf_float+0x136>
 8009214:	6863      	ldr	r3, [r4, #4]
 8009216:	4299      	cmp	r1, r3
 8009218:	dd41      	ble.n	800929e <_printf_float+0x1ba>
 800921a:	f1ab 0302 	sub.w	r3, fp, #2
 800921e:	fa5f fb83 	uxtb.w	fp, r3
 8009222:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009226:	d820      	bhi.n	800926a <_printf_float+0x186>
 8009228:	3901      	subs	r1, #1
 800922a:	465a      	mov	r2, fp
 800922c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009230:	9109      	str	r1, [sp, #36]	; 0x24
 8009232:	f7ff ff19 	bl	8009068 <__exponent>
 8009236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009238:	1813      	adds	r3, r2, r0
 800923a:	2a01      	cmp	r2, #1
 800923c:	4681      	mov	r9, r0
 800923e:	6123      	str	r3, [r4, #16]
 8009240:	dc02      	bgt.n	8009248 <_printf_float+0x164>
 8009242:	6822      	ldr	r2, [r4, #0]
 8009244:	07d2      	lsls	r2, r2, #31
 8009246:	d501      	bpl.n	800924c <_printf_float+0x168>
 8009248:	3301      	adds	r3, #1
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009250:	2b00      	cmp	r3, #0
 8009252:	d09c      	beq.n	800918e <_printf_float+0xaa>
 8009254:	232d      	movs	r3, #45	; 0x2d
 8009256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800925a:	e798      	b.n	800918e <_printf_float+0xaa>
 800925c:	9a06      	ldr	r2, [sp, #24]
 800925e:	2a47      	cmp	r2, #71	; 0x47
 8009260:	d1be      	bne.n	80091e0 <_printf_float+0xfc>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1bc      	bne.n	80091e0 <_printf_float+0xfc>
 8009266:	2301      	movs	r3, #1
 8009268:	e7b9      	b.n	80091de <_printf_float+0xfa>
 800926a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800926e:	d118      	bne.n	80092a2 <_printf_float+0x1be>
 8009270:	2900      	cmp	r1, #0
 8009272:	6863      	ldr	r3, [r4, #4]
 8009274:	dd0b      	ble.n	800928e <_printf_float+0x1aa>
 8009276:	6121      	str	r1, [r4, #16]
 8009278:	b913      	cbnz	r3, 8009280 <_printf_float+0x19c>
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	07d0      	lsls	r0, r2, #31
 800927e:	d502      	bpl.n	8009286 <_printf_float+0x1a2>
 8009280:	3301      	adds	r3, #1
 8009282:	440b      	add	r3, r1
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	65a1      	str	r1, [r4, #88]	; 0x58
 8009288:	f04f 0900 	mov.w	r9, #0
 800928c:	e7de      	b.n	800924c <_printf_float+0x168>
 800928e:	b913      	cbnz	r3, 8009296 <_printf_float+0x1b2>
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	07d2      	lsls	r2, r2, #31
 8009294:	d501      	bpl.n	800929a <_printf_float+0x1b6>
 8009296:	3302      	adds	r3, #2
 8009298:	e7f4      	b.n	8009284 <_printf_float+0x1a0>
 800929a:	2301      	movs	r3, #1
 800929c:	e7f2      	b.n	8009284 <_printf_float+0x1a0>
 800929e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a4:	4299      	cmp	r1, r3
 80092a6:	db05      	blt.n	80092b4 <_printf_float+0x1d0>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	6121      	str	r1, [r4, #16]
 80092ac:	07d8      	lsls	r0, r3, #31
 80092ae:	d5ea      	bpl.n	8009286 <_printf_float+0x1a2>
 80092b0:	1c4b      	adds	r3, r1, #1
 80092b2:	e7e7      	b.n	8009284 <_printf_float+0x1a0>
 80092b4:	2900      	cmp	r1, #0
 80092b6:	bfd4      	ite	le
 80092b8:	f1c1 0202 	rsble	r2, r1, #2
 80092bc:	2201      	movgt	r2, #1
 80092be:	4413      	add	r3, r2
 80092c0:	e7e0      	b.n	8009284 <_printf_float+0x1a0>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	055a      	lsls	r2, r3, #21
 80092c6:	d407      	bmi.n	80092d8 <_printf_float+0x1f4>
 80092c8:	6923      	ldr	r3, [r4, #16]
 80092ca:	4642      	mov	r2, r8
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	d12c      	bne.n	8009330 <_printf_float+0x24c>
 80092d6:	e764      	b.n	80091a2 <_printf_float+0xbe>
 80092d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092dc:	f240 80e0 	bls.w	80094a0 <_printf_float+0x3bc>
 80092e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092e4:	2200      	movs	r2, #0
 80092e6:	2300      	movs	r3, #0
 80092e8:	f7f7 fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d034      	beq.n	800935a <_printf_float+0x276>
 80092f0:	4a37      	ldr	r2, [pc, #220]	; (80093d0 <_printf_float+0x2ec>)
 80092f2:	2301      	movs	r3, #1
 80092f4:	4631      	mov	r1, r6
 80092f6:	4628      	mov	r0, r5
 80092f8:	47b8      	blx	r7
 80092fa:	3001      	adds	r0, #1
 80092fc:	f43f af51 	beq.w	80091a2 <_printf_float+0xbe>
 8009300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009304:	429a      	cmp	r2, r3
 8009306:	db02      	blt.n	800930e <_printf_float+0x22a>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	07d8      	lsls	r0, r3, #31
 800930c:	d510      	bpl.n	8009330 <_printf_float+0x24c>
 800930e:	ee18 3a10 	vmov	r3, s16
 8009312:	4652      	mov	r2, sl
 8009314:	4631      	mov	r1, r6
 8009316:	4628      	mov	r0, r5
 8009318:	47b8      	blx	r7
 800931a:	3001      	adds	r0, #1
 800931c:	f43f af41 	beq.w	80091a2 <_printf_float+0xbe>
 8009320:	f04f 0800 	mov.w	r8, #0
 8009324:	f104 091a 	add.w	r9, r4, #26
 8009328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932a:	3b01      	subs	r3, #1
 800932c:	4543      	cmp	r3, r8
 800932e:	dc09      	bgt.n	8009344 <_printf_float+0x260>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	079b      	lsls	r3, r3, #30
 8009334:	f100 8107 	bmi.w	8009546 <_printf_float+0x462>
 8009338:	68e0      	ldr	r0, [r4, #12]
 800933a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800933c:	4298      	cmp	r0, r3
 800933e:	bfb8      	it	lt
 8009340:	4618      	movlt	r0, r3
 8009342:	e730      	b.n	80091a6 <_printf_float+0xc2>
 8009344:	2301      	movs	r3, #1
 8009346:	464a      	mov	r2, r9
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	f43f af27 	beq.w	80091a2 <_printf_float+0xbe>
 8009354:	f108 0801 	add.w	r8, r8, #1
 8009358:	e7e6      	b.n	8009328 <_printf_float+0x244>
 800935a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800935c:	2b00      	cmp	r3, #0
 800935e:	dc39      	bgt.n	80093d4 <_printf_float+0x2f0>
 8009360:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <_printf_float+0x2ec>)
 8009362:	2301      	movs	r3, #1
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	f43f af19 	beq.w	80091a2 <_printf_float+0xbe>
 8009370:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009374:	4313      	orrs	r3, r2
 8009376:	d102      	bne.n	800937e <_printf_float+0x29a>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	07d9      	lsls	r1, r3, #31
 800937c:	d5d8      	bpl.n	8009330 <_printf_float+0x24c>
 800937e:	ee18 3a10 	vmov	r3, s16
 8009382:	4652      	mov	r2, sl
 8009384:	4631      	mov	r1, r6
 8009386:	4628      	mov	r0, r5
 8009388:	47b8      	blx	r7
 800938a:	3001      	adds	r0, #1
 800938c:	f43f af09 	beq.w	80091a2 <_printf_float+0xbe>
 8009390:	f04f 0900 	mov.w	r9, #0
 8009394:	f104 0a1a 	add.w	sl, r4, #26
 8009398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939a:	425b      	negs	r3, r3
 800939c:	454b      	cmp	r3, r9
 800939e:	dc01      	bgt.n	80093a4 <_printf_float+0x2c0>
 80093a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a2:	e792      	b.n	80092ca <_printf_float+0x1e6>
 80093a4:	2301      	movs	r3, #1
 80093a6:	4652      	mov	r2, sl
 80093a8:	4631      	mov	r1, r6
 80093aa:	4628      	mov	r0, r5
 80093ac:	47b8      	blx	r7
 80093ae:	3001      	adds	r0, #1
 80093b0:	f43f aef7 	beq.w	80091a2 <_printf_float+0xbe>
 80093b4:	f109 0901 	add.w	r9, r9, #1
 80093b8:	e7ee      	b.n	8009398 <_printf_float+0x2b4>
 80093ba:	bf00      	nop
 80093bc:	7fefffff 	.word	0x7fefffff
 80093c0:	0800bd30 	.word	0x0800bd30
 80093c4:	0800bd34 	.word	0x0800bd34
 80093c8:	0800bd38 	.word	0x0800bd38
 80093cc:	0800bd3c 	.word	0x0800bd3c
 80093d0:	0800bd40 	.word	0x0800bd40
 80093d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093d8:	429a      	cmp	r2, r3
 80093da:	bfa8      	it	ge
 80093dc:	461a      	movge	r2, r3
 80093de:	2a00      	cmp	r2, #0
 80093e0:	4691      	mov	r9, r2
 80093e2:	dc37      	bgt.n	8009454 <_printf_float+0x370>
 80093e4:	f04f 0b00 	mov.w	fp, #0
 80093e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093ec:	f104 021a 	add.w	r2, r4, #26
 80093f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093f2:	9305      	str	r3, [sp, #20]
 80093f4:	eba3 0309 	sub.w	r3, r3, r9
 80093f8:	455b      	cmp	r3, fp
 80093fa:	dc33      	bgt.n	8009464 <_printf_float+0x380>
 80093fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009400:	429a      	cmp	r2, r3
 8009402:	db3b      	blt.n	800947c <_printf_float+0x398>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	07da      	lsls	r2, r3, #31
 8009408:	d438      	bmi.n	800947c <_printf_float+0x398>
 800940a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800940e:	eba2 0903 	sub.w	r9, r2, r3
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	1ad2      	subs	r2, r2, r3
 8009416:	4591      	cmp	r9, r2
 8009418:	bfa8      	it	ge
 800941a:	4691      	movge	r9, r2
 800941c:	f1b9 0f00 	cmp.w	r9, #0
 8009420:	dc35      	bgt.n	800948e <_printf_float+0x3aa>
 8009422:	f04f 0800 	mov.w	r8, #0
 8009426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800942a:	f104 0a1a 	add.w	sl, r4, #26
 800942e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	eba3 0309 	sub.w	r3, r3, r9
 8009438:	4543      	cmp	r3, r8
 800943a:	f77f af79 	ble.w	8009330 <_printf_float+0x24c>
 800943e:	2301      	movs	r3, #1
 8009440:	4652      	mov	r2, sl
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	f43f aeaa 	beq.w	80091a2 <_printf_float+0xbe>
 800944e:	f108 0801 	add.w	r8, r8, #1
 8009452:	e7ec      	b.n	800942e <_printf_float+0x34a>
 8009454:	4613      	mov	r3, r2
 8009456:	4631      	mov	r1, r6
 8009458:	4642      	mov	r2, r8
 800945a:	4628      	mov	r0, r5
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	d1c0      	bne.n	80093e4 <_printf_float+0x300>
 8009462:	e69e      	b.n	80091a2 <_printf_float+0xbe>
 8009464:	2301      	movs	r3, #1
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	9205      	str	r2, [sp, #20]
 800946c:	47b8      	blx	r7
 800946e:	3001      	adds	r0, #1
 8009470:	f43f ae97 	beq.w	80091a2 <_printf_float+0xbe>
 8009474:	9a05      	ldr	r2, [sp, #20]
 8009476:	f10b 0b01 	add.w	fp, fp, #1
 800947a:	e7b9      	b.n	80093f0 <_printf_float+0x30c>
 800947c:	ee18 3a10 	vmov	r3, s16
 8009480:	4652      	mov	r2, sl
 8009482:	4631      	mov	r1, r6
 8009484:	4628      	mov	r0, r5
 8009486:	47b8      	blx	r7
 8009488:	3001      	adds	r0, #1
 800948a:	d1be      	bne.n	800940a <_printf_float+0x326>
 800948c:	e689      	b.n	80091a2 <_printf_float+0xbe>
 800948e:	9a05      	ldr	r2, [sp, #20]
 8009490:	464b      	mov	r3, r9
 8009492:	4442      	add	r2, r8
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	d1c1      	bne.n	8009422 <_printf_float+0x33e>
 800949e:	e680      	b.n	80091a2 <_printf_float+0xbe>
 80094a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094a2:	2a01      	cmp	r2, #1
 80094a4:	dc01      	bgt.n	80094aa <_printf_float+0x3c6>
 80094a6:	07db      	lsls	r3, r3, #31
 80094a8:	d53a      	bpl.n	8009520 <_printf_float+0x43c>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4642      	mov	r2, r8
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae74 	beq.w	80091a2 <_printf_float+0xbe>
 80094ba:	ee18 3a10 	vmov	r3, s16
 80094be:	4652      	mov	r2, sl
 80094c0:	4631      	mov	r1, r6
 80094c2:	4628      	mov	r0, r5
 80094c4:	47b8      	blx	r7
 80094c6:	3001      	adds	r0, #1
 80094c8:	f43f ae6b 	beq.w	80091a2 <_printf_float+0xbe>
 80094cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094d0:	2200      	movs	r2, #0
 80094d2:	2300      	movs	r3, #0
 80094d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80094d8:	f7f7 faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80094dc:	b9d8      	cbnz	r0, 8009516 <_printf_float+0x432>
 80094de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80094e2:	f108 0201 	add.w	r2, r8, #1
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	d10e      	bne.n	800950e <_printf_float+0x42a>
 80094f0:	e657      	b.n	80091a2 <_printf_float+0xbe>
 80094f2:	2301      	movs	r3, #1
 80094f4:	4652      	mov	r2, sl
 80094f6:	4631      	mov	r1, r6
 80094f8:	4628      	mov	r0, r5
 80094fa:	47b8      	blx	r7
 80094fc:	3001      	adds	r0, #1
 80094fe:	f43f ae50 	beq.w	80091a2 <_printf_float+0xbe>
 8009502:	f108 0801 	add.w	r8, r8, #1
 8009506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009508:	3b01      	subs	r3, #1
 800950a:	4543      	cmp	r3, r8
 800950c:	dcf1      	bgt.n	80094f2 <_printf_float+0x40e>
 800950e:	464b      	mov	r3, r9
 8009510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009514:	e6da      	b.n	80092cc <_printf_float+0x1e8>
 8009516:	f04f 0800 	mov.w	r8, #0
 800951a:	f104 0a1a 	add.w	sl, r4, #26
 800951e:	e7f2      	b.n	8009506 <_printf_float+0x422>
 8009520:	2301      	movs	r3, #1
 8009522:	4642      	mov	r2, r8
 8009524:	e7df      	b.n	80094e6 <_printf_float+0x402>
 8009526:	2301      	movs	r3, #1
 8009528:	464a      	mov	r2, r9
 800952a:	4631      	mov	r1, r6
 800952c:	4628      	mov	r0, r5
 800952e:	47b8      	blx	r7
 8009530:	3001      	adds	r0, #1
 8009532:	f43f ae36 	beq.w	80091a2 <_printf_float+0xbe>
 8009536:	f108 0801 	add.w	r8, r8, #1
 800953a:	68e3      	ldr	r3, [r4, #12]
 800953c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800953e:	1a5b      	subs	r3, r3, r1
 8009540:	4543      	cmp	r3, r8
 8009542:	dcf0      	bgt.n	8009526 <_printf_float+0x442>
 8009544:	e6f8      	b.n	8009338 <_printf_float+0x254>
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	f104 0919 	add.w	r9, r4, #25
 800954e:	e7f4      	b.n	800953a <_printf_float+0x456>

08009550 <_printf_common>:
 8009550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	4616      	mov	r6, r2
 8009556:	4699      	mov	r9, r3
 8009558:	688a      	ldr	r2, [r1, #8]
 800955a:	690b      	ldr	r3, [r1, #16]
 800955c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009560:	4293      	cmp	r3, r2
 8009562:	bfb8      	it	lt
 8009564:	4613      	movlt	r3, r2
 8009566:	6033      	str	r3, [r6, #0]
 8009568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800956c:	4607      	mov	r7, r0
 800956e:	460c      	mov	r4, r1
 8009570:	b10a      	cbz	r2, 8009576 <_printf_common+0x26>
 8009572:	3301      	adds	r3, #1
 8009574:	6033      	str	r3, [r6, #0]
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	0699      	lsls	r1, r3, #26
 800957a:	bf42      	ittt	mi
 800957c:	6833      	ldrmi	r3, [r6, #0]
 800957e:	3302      	addmi	r3, #2
 8009580:	6033      	strmi	r3, [r6, #0]
 8009582:	6825      	ldr	r5, [r4, #0]
 8009584:	f015 0506 	ands.w	r5, r5, #6
 8009588:	d106      	bne.n	8009598 <_printf_common+0x48>
 800958a:	f104 0a19 	add.w	sl, r4, #25
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	6832      	ldr	r2, [r6, #0]
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	42ab      	cmp	r3, r5
 8009596:	dc26      	bgt.n	80095e6 <_printf_common+0x96>
 8009598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800959c:	1e13      	subs	r3, r2, #0
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	bf18      	it	ne
 80095a2:	2301      	movne	r3, #1
 80095a4:	0692      	lsls	r2, r2, #26
 80095a6:	d42b      	bmi.n	8009600 <_printf_common+0xb0>
 80095a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095ac:	4649      	mov	r1, r9
 80095ae:	4638      	mov	r0, r7
 80095b0:	47c0      	blx	r8
 80095b2:	3001      	adds	r0, #1
 80095b4:	d01e      	beq.n	80095f4 <_printf_common+0xa4>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	6922      	ldr	r2, [r4, #16]
 80095ba:	f003 0306 	and.w	r3, r3, #6
 80095be:	2b04      	cmp	r3, #4
 80095c0:	bf02      	ittt	eq
 80095c2:	68e5      	ldreq	r5, [r4, #12]
 80095c4:	6833      	ldreq	r3, [r6, #0]
 80095c6:	1aed      	subeq	r5, r5, r3
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	bf0c      	ite	eq
 80095cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095d0:	2500      	movne	r5, #0
 80095d2:	4293      	cmp	r3, r2
 80095d4:	bfc4      	itt	gt
 80095d6:	1a9b      	subgt	r3, r3, r2
 80095d8:	18ed      	addgt	r5, r5, r3
 80095da:	2600      	movs	r6, #0
 80095dc:	341a      	adds	r4, #26
 80095de:	42b5      	cmp	r5, r6
 80095e0:	d11a      	bne.n	8009618 <_printf_common+0xc8>
 80095e2:	2000      	movs	r0, #0
 80095e4:	e008      	b.n	80095f8 <_printf_common+0xa8>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4652      	mov	r2, sl
 80095ea:	4649      	mov	r1, r9
 80095ec:	4638      	mov	r0, r7
 80095ee:	47c0      	blx	r8
 80095f0:	3001      	adds	r0, #1
 80095f2:	d103      	bne.n	80095fc <_printf_common+0xac>
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fc:	3501      	adds	r5, #1
 80095fe:	e7c6      	b.n	800958e <_printf_common+0x3e>
 8009600:	18e1      	adds	r1, r4, r3
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	2030      	movs	r0, #48	; 0x30
 8009606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800960a:	4422      	add	r2, r4
 800960c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009614:	3302      	adds	r3, #2
 8009616:	e7c7      	b.n	80095a8 <_printf_common+0x58>
 8009618:	2301      	movs	r3, #1
 800961a:	4622      	mov	r2, r4
 800961c:	4649      	mov	r1, r9
 800961e:	4638      	mov	r0, r7
 8009620:	47c0      	blx	r8
 8009622:	3001      	adds	r0, #1
 8009624:	d0e6      	beq.n	80095f4 <_printf_common+0xa4>
 8009626:	3601      	adds	r6, #1
 8009628:	e7d9      	b.n	80095de <_printf_common+0x8e>
	...

0800962c <_printf_i>:
 800962c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	7e0f      	ldrb	r7, [r1, #24]
 8009632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009634:	2f78      	cmp	r7, #120	; 0x78
 8009636:	4691      	mov	r9, r2
 8009638:	4680      	mov	r8, r0
 800963a:	460c      	mov	r4, r1
 800963c:	469a      	mov	sl, r3
 800963e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009642:	d807      	bhi.n	8009654 <_printf_i+0x28>
 8009644:	2f62      	cmp	r7, #98	; 0x62
 8009646:	d80a      	bhi.n	800965e <_printf_i+0x32>
 8009648:	2f00      	cmp	r7, #0
 800964a:	f000 80d4 	beq.w	80097f6 <_printf_i+0x1ca>
 800964e:	2f58      	cmp	r7, #88	; 0x58
 8009650:	f000 80c0 	beq.w	80097d4 <_printf_i+0x1a8>
 8009654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800965c:	e03a      	b.n	80096d4 <_printf_i+0xa8>
 800965e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009662:	2b15      	cmp	r3, #21
 8009664:	d8f6      	bhi.n	8009654 <_printf_i+0x28>
 8009666:	a101      	add	r1, pc, #4	; (adr r1, 800966c <_printf_i+0x40>)
 8009668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800966c:	080096c5 	.word	0x080096c5
 8009670:	080096d9 	.word	0x080096d9
 8009674:	08009655 	.word	0x08009655
 8009678:	08009655 	.word	0x08009655
 800967c:	08009655 	.word	0x08009655
 8009680:	08009655 	.word	0x08009655
 8009684:	080096d9 	.word	0x080096d9
 8009688:	08009655 	.word	0x08009655
 800968c:	08009655 	.word	0x08009655
 8009690:	08009655 	.word	0x08009655
 8009694:	08009655 	.word	0x08009655
 8009698:	080097dd 	.word	0x080097dd
 800969c:	08009705 	.word	0x08009705
 80096a0:	08009797 	.word	0x08009797
 80096a4:	08009655 	.word	0x08009655
 80096a8:	08009655 	.word	0x08009655
 80096ac:	080097ff 	.word	0x080097ff
 80096b0:	08009655 	.word	0x08009655
 80096b4:	08009705 	.word	0x08009705
 80096b8:	08009655 	.word	0x08009655
 80096bc:	08009655 	.word	0x08009655
 80096c0:	0800979f 	.word	0x0800979f
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	1d1a      	adds	r2, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	602a      	str	r2, [r5, #0]
 80096cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096d4:	2301      	movs	r3, #1
 80096d6:	e09f      	b.n	8009818 <_printf_i+0x1ec>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	0607      	lsls	r7, r0, #24
 80096de:	f103 0104 	add.w	r1, r3, #4
 80096e2:	6029      	str	r1, [r5, #0]
 80096e4:	d501      	bpl.n	80096ea <_printf_i+0xbe>
 80096e6:	681e      	ldr	r6, [r3, #0]
 80096e8:	e003      	b.n	80096f2 <_printf_i+0xc6>
 80096ea:	0646      	lsls	r6, r0, #25
 80096ec:	d5fb      	bpl.n	80096e6 <_printf_i+0xba>
 80096ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096f2:	2e00      	cmp	r6, #0
 80096f4:	da03      	bge.n	80096fe <_printf_i+0xd2>
 80096f6:	232d      	movs	r3, #45	; 0x2d
 80096f8:	4276      	negs	r6, r6
 80096fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096fe:	485a      	ldr	r0, [pc, #360]	; (8009868 <_printf_i+0x23c>)
 8009700:	230a      	movs	r3, #10
 8009702:	e012      	b.n	800972a <_printf_i+0xfe>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	6820      	ldr	r0, [r4, #0]
 8009708:	1d19      	adds	r1, r3, #4
 800970a:	6029      	str	r1, [r5, #0]
 800970c:	0605      	lsls	r5, r0, #24
 800970e:	d501      	bpl.n	8009714 <_printf_i+0xe8>
 8009710:	681e      	ldr	r6, [r3, #0]
 8009712:	e002      	b.n	800971a <_printf_i+0xee>
 8009714:	0641      	lsls	r1, r0, #25
 8009716:	d5fb      	bpl.n	8009710 <_printf_i+0xe4>
 8009718:	881e      	ldrh	r6, [r3, #0]
 800971a:	4853      	ldr	r0, [pc, #332]	; (8009868 <_printf_i+0x23c>)
 800971c:	2f6f      	cmp	r7, #111	; 0x6f
 800971e:	bf0c      	ite	eq
 8009720:	2308      	moveq	r3, #8
 8009722:	230a      	movne	r3, #10
 8009724:	2100      	movs	r1, #0
 8009726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800972a:	6865      	ldr	r5, [r4, #4]
 800972c:	60a5      	str	r5, [r4, #8]
 800972e:	2d00      	cmp	r5, #0
 8009730:	bfa2      	ittt	ge
 8009732:	6821      	ldrge	r1, [r4, #0]
 8009734:	f021 0104 	bicge.w	r1, r1, #4
 8009738:	6021      	strge	r1, [r4, #0]
 800973a:	b90e      	cbnz	r6, 8009740 <_printf_i+0x114>
 800973c:	2d00      	cmp	r5, #0
 800973e:	d04b      	beq.n	80097d8 <_printf_i+0x1ac>
 8009740:	4615      	mov	r5, r2
 8009742:	fbb6 f1f3 	udiv	r1, r6, r3
 8009746:	fb03 6711 	mls	r7, r3, r1, r6
 800974a:	5dc7      	ldrb	r7, [r0, r7]
 800974c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009750:	4637      	mov	r7, r6
 8009752:	42bb      	cmp	r3, r7
 8009754:	460e      	mov	r6, r1
 8009756:	d9f4      	bls.n	8009742 <_printf_i+0x116>
 8009758:	2b08      	cmp	r3, #8
 800975a:	d10b      	bne.n	8009774 <_printf_i+0x148>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	07de      	lsls	r6, r3, #31
 8009760:	d508      	bpl.n	8009774 <_printf_i+0x148>
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	6861      	ldr	r1, [r4, #4]
 8009766:	4299      	cmp	r1, r3
 8009768:	bfde      	ittt	le
 800976a:	2330      	movle	r3, #48	; 0x30
 800976c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009774:	1b52      	subs	r2, r2, r5
 8009776:	6122      	str	r2, [r4, #16]
 8009778:	f8cd a000 	str.w	sl, [sp]
 800977c:	464b      	mov	r3, r9
 800977e:	aa03      	add	r2, sp, #12
 8009780:	4621      	mov	r1, r4
 8009782:	4640      	mov	r0, r8
 8009784:	f7ff fee4 	bl	8009550 <_printf_common>
 8009788:	3001      	adds	r0, #1
 800978a:	d14a      	bne.n	8009822 <_printf_i+0x1f6>
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	b004      	add	sp, #16
 8009792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	f043 0320 	orr.w	r3, r3, #32
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	4833      	ldr	r0, [pc, #204]	; (800986c <_printf_i+0x240>)
 80097a0:	2778      	movs	r7, #120	; 0x78
 80097a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	6829      	ldr	r1, [r5, #0]
 80097aa:	061f      	lsls	r7, r3, #24
 80097ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80097b0:	d402      	bmi.n	80097b8 <_printf_i+0x18c>
 80097b2:	065f      	lsls	r7, r3, #25
 80097b4:	bf48      	it	mi
 80097b6:	b2b6      	uxthmi	r6, r6
 80097b8:	07df      	lsls	r7, r3, #31
 80097ba:	bf48      	it	mi
 80097bc:	f043 0320 	orrmi.w	r3, r3, #32
 80097c0:	6029      	str	r1, [r5, #0]
 80097c2:	bf48      	it	mi
 80097c4:	6023      	strmi	r3, [r4, #0]
 80097c6:	b91e      	cbnz	r6, 80097d0 <_printf_i+0x1a4>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	f023 0320 	bic.w	r3, r3, #32
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	2310      	movs	r3, #16
 80097d2:	e7a7      	b.n	8009724 <_printf_i+0xf8>
 80097d4:	4824      	ldr	r0, [pc, #144]	; (8009868 <_printf_i+0x23c>)
 80097d6:	e7e4      	b.n	80097a2 <_printf_i+0x176>
 80097d8:	4615      	mov	r5, r2
 80097da:	e7bd      	b.n	8009758 <_printf_i+0x12c>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	6826      	ldr	r6, [r4, #0]
 80097e0:	6961      	ldr	r1, [r4, #20]
 80097e2:	1d18      	adds	r0, r3, #4
 80097e4:	6028      	str	r0, [r5, #0]
 80097e6:	0635      	lsls	r5, r6, #24
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	d501      	bpl.n	80097f0 <_printf_i+0x1c4>
 80097ec:	6019      	str	r1, [r3, #0]
 80097ee:	e002      	b.n	80097f6 <_printf_i+0x1ca>
 80097f0:	0670      	lsls	r0, r6, #25
 80097f2:	d5fb      	bpl.n	80097ec <_printf_i+0x1c0>
 80097f4:	8019      	strh	r1, [r3, #0]
 80097f6:	2300      	movs	r3, #0
 80097f8:	6123      	str	r3, [r4, #16]
 80097fa:	4615      	mov	r5, r2
 80097fc:	e7bc      	b.n	8009778 <_printf_i+0x14c>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	1d1a      	adds	r2, r3, #4
 8009802:	602a      	str	r2, [r5, #0]
 8009804:	681d      	ldr	r5, [r3, #0]
 8009806:	6862      	ldr	r2, [r4, #4]
 8009808:	2100      	movs	r1, #0
 800980a:	4628      	mov	r0, r5
 800980c:	f7f6 fce0 	bl	80001d0 <memchr>
 8009810:	b108      	cbz	r0, 8009816 <_printf_i+0x1ea>
 8009812:	1b40      	subs	r0, r0, r5
 8009814:	6060      	str	r0, [r4, #4]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	6123      	str	r3, [r4, #16]
 800981a:	2300      	movs	r3, #0
 800981c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009820:	e7aa      	b.n	8009778 <_printf_i+0x14c>
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	462a      	mov	r2, r5
 8009826:	4649      	mov	r1, r9
 8009828:	4640      	mov	r0, r8
 800982a:	47d0      	blx	sl
 800982c:	3001      	adds	r0, #1
 800982e:	d0ad      	beq.n	800978c <_printf_i+0x160>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	079b      	lsls	r3, r3, #30
 8009834:	d413      	bmi.n	800985e <_printf_i+0x232>
 8009836:	68e0      	ldr	r0, [r4, #12]
 8009838:	9b03      	ldr	r3, [sp, #12]
 800983a:	4298      	cmp	r0, r3
 800983c:	bfb8      	it	lt
 800983e:	4618      	movlt	r0, r3
 8009840:	e7a6      	b.n	8009790 <_printf_i+0x164>
 8009842:	2301      	movs	r3, #1
 8009844:	4632      	mov	r2, r6
 8009846:	4649      	mov	r1, r9
 8009848:	4640      	mov	r0, r8
 800984a:	47d0      	blx	sl
 800984c:	3001      	adds	r0, #1
 800984e:	d09d      	beq.n	800978c <_printf_i+0x160>
 8009850:	3501      	adds	r5, #1
 8009852:	68e3      	ldr	r3, [r4, #12]
 8009854:	9903      	ldr	r1, [sp, #12]
 8009856:	1a5b      	subs	r3, r3, r1
 8009858:	42ab      	cmp	r3, r5
 800985a:	dcf2      	bgt.n	8009842 <_printf_i+0x216>
 800985c:	e7eb      	b.n	8009836 <_printf_i+0x20a>
 800985e:	2500      	movs	r5, #0
 8009860:	f104 0619 	add.w	r6, r4, #25
 8009864:	e7f5      	b.n	8009852 <_printf_i+0x226>
 8009866:	bf00      	nop
 8009868:	0800bd42 	.word	0x0800bd42
 800986c:	0800bd53 	.word	0x0800bd53

08009870 <std>:
 8009870:	2300      	movs	r3, #0
 8009872:	b510      	push	{r4, lr}
 8009874:	4604      	mov	r4, r0
 8009876:	e9c0 3300 	strd	r3, r3, [r0]
 800987a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800987e:	6083      	str	r3, [r0, #8]
 8009880:	8181      	strh	r1, [r0, #12]
 8009882:	6643      	str	r3, [r0, #100]	; 0x64
 8009884:	81c2      	strh	r2, [r0, #14]
 8009886:	6183      	str	r3, [r0, #24]
 8009888:	4619      	mov	r1, r3
 800988a:	2208      	movs	r2, #8
 800988c:	305c      	adds	r0, #92	; 0x5c
 800988e:	f000 f902 	bl	8009a96 <memset>
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <std+0x38>)
 8009894:	6263      	str	r3, [r4, #36]	; 0x24
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <std+0x3c>)
 8009898:	62a3      	str	r3, [r4, #40]	; 0x28
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <std+0x40>)
 800989c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800989e:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <std+0x44>)
 80098a0:	6224      	str	r4, [r4, #32]
 80098a2:	6323      	str	r3, [r4, #48]	; 0x30
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	bf00      	nop
 80098a8:	08009a11 	.word	0x08009a11
 80098ac:	08009a33 	.word	0x08009a33
 80098b0:	08009a6b 	.word	0x08009a6b
 80098b4:	08009a8f 	.word	0x08009a8f

080098b8 <stdio_exit_handler>:
 80098b8:	4a02      	ldr	r2, [pc, #8]	; (80098c4 <stdio_exit_handler+0xc>)
 80098ba:	4903      	ldr	r1, [pc, #12]	; (80098c8 <stdio_exit_handler+0x10>)
 80098bc:	4803      	ldr	r0, [pc, #12]	; (80098cc <stdio_exit_handler+0x14>)
 80098be:	f000 b869 	b.w	8009994 <_fwalk_sglue>
 80098c2:	bf00      	nop
 80098c4:	200000fc 	.word	0x200000fc
 80098c8:	0800b541 	.word	0x0800b541
 80098cc:	20000108 	.word	0x20000108

080098d0 <cleanup_stdio>:
 80098d0:	6841      	ldr	r1, [r0, #4]
 80098d2:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <cleanup_stdio+0x34>)
 80098d4:	4299      	cmp	r1, r3
 80098d6:	b510      	push	{r4, lr}
 80098d8:	4604      	mov	r4, r0
 80098da:	d001      	beq.n	80098e0 <cleanup_stdio+0x10>
 80098dc:	f001 fe30 	bl	800b540 <_fflush_r>
 80098e0:	68a1      	ldr	r1, [r4, #8]
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <cleanup_stdio+0x38>)
 80098e4:	4299      	cmp	r1, r3
 80098e6:	d002      	beq.n	80098ee <cleanup_stdio+0x1e>
 80098e8:	4620      	mov	r0, r4
 80098ea:	f001 fe29 	bl	800b540 <_fflush_r>
 80098ee:	68e1      	ldr	r1, [r4, #12]
 80098f0:	4b06      	ldr	r3, [pc, #24]	; (800990c <cleanup_stdio+0x3c>)
 80098f2:	4299      	cmp	r1, r3
 80098f4:	d004      	beq.n	8009900 <cleanup_stdio+0x30>
 80098f6:	4620      	mov	r0, r4
 80098f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098fc:	f001 be20 	b.w	800b540 <_fflush_r>
 8009900:	bd10      	pop	{r4, pc}
 8009902:	bf00      	nop
 8009904:	20001f9c 	.word	0x20001f9c
 8009908:	20002004 	.word	0x20002004
 800990c:	2000206c 	.word	0x2000206c

08009910 <global_stdio_init.part.0>:
 8009910:	b510      	push	{r4, lr}
 8009912:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <global_stdio_init.part.0+0x30>)
 8009914:	4c0b      	ldr	r4, [pc, #44]	; (8009944 <global_stdio_init.part.0+0x34>)
 8009916:	4a0c      	ldr	r2, [pc, #48]	; (8009948 <global_stdio_init.part.0+0x38>)
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	4620      	mov	r0, r4
 800991c:	2200      	movs	r2, #0
 800991e:	2104      	movs	r1, #4
 8009920:	f7ff ffa6 	bl	8009870 <std>
 8009924:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009928:	2201      	movs	r2, #1
 800992a:	2109      	movs	r1, #9
 800992c:	f7ff ffa0 	bl	8009870 <std>
 8009930:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009934:	2202      	movs	r2, #2
 8009936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993a:	2112      	movs	r1, #18
 800993c:	f7ff bf98 	b.w	8009870 <std>
 8009940:	200020d4 	.word	0x200020d4
 8009944:	20001f9c 	.word	0x20001f9c
 8009948:	080098b9 	.word	0x080098b9

0800994c <__sfp_lock_acquire>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__sfp_lock_acquire+0x8>)
 800994e:	f000 b91f 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009952:	bf00      	nop
 8009954:	200020dd 	.word	0x200020dd

08009958 <__sfp_lock_release>:
 8009958:	4801      	ldr	r0, [pc, #4]	; (8009960 <__sfp_lock_release+0x8>)
 800995a:	f000 b91a 	b.w	8009b92 <__retarget_lock_release_recursive>
 800995e:	bf00      	nop
 8009960:	200020dd 	.word	0x200020dd

08009964 <__sinit>:
 8009964:	b510      	push	{r4, lr}
 8009966:	4604      	mov	r4, r0
 8009968:	f7ff fff0 	bl	800994c <__sfp_lock_acquire>
 800996c:	6a23      	ldr	r3, [r4, #32]
 800996e:	b11b      	cbz	r3, 8009978 <__sinit+0x14>
 8009970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009974:	f7ff bff0 	b.w	8009958 <__sfp_lock_release>
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <__sinit+0x28>)
 800997a:	6223      	str	r3, [r4, #32]
 800997c:	4b04      	ldr	r3, [pc, #16]	; (8009990 <__sinit+0x2c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1f5      	bne.n	8009970 <__sinit+0xc>
 8009984:	f7ff ffc4 	bl	8009910 <global_stdio_init.part.0>
 8009988:	e7f2      	b.n	8009970 <__sinit+0xc>
 800998a:	bf00      	nop
 800998c:	080098d1 	.word	0x080098d1
 8009990:	200020d4 	.word	0x200020d4

08009994 <_fwalk_sglue>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4607      	mov	r7, r0
 800999a:	4688      	mov	r8, r1
 800999c:	4614      	mov	r4, r2
 800999e:	2600      	movs	r6, #0
 80099a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099a4:	f1b9 0901 	subs.w	r9, r9, #1
 80099a8:	d505      	bpl.n	80099b6 <_fwalk_sglue+0x22>
 80099aa:	6824      	ldr	r4, [r4, #0]
 80099ac:	2c00      	cmp	r4, #0
 80099ae:	d1f7      	bne.n	80099a0 <_fwalk_sglue+0xc>
 80099b0:	4630      	mov	r0, r6
 80099b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d907      	bls.n	80099cc <_fwalk_sglue+0x38>
 80099bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099c0:	3301      	adds	r3, #1
 80099c2:	d003      	beq.n	80099cc <_fwalk_sglue+0x38>
 80099c4:	4629      	mov	r1, r5
 80099c6:	4638      	mov	r0, r7
 80099c8:	47c0      	blx	r8
 80099ca:	4306      	orrs	r6, r0
 80099cc:	3568      	adds	r5, #104	; 0x68
 80099ce:	e7e9      	b.n	80099a4 <_fwalk_sglue+0x10>

080099d0 <siprintf>:
 80099d0:	b40e      	push	{r1, r2, r3}
 80099d2:	b500      	push	{lr}
 80099d4:	b09c      	sub	sp, #112	; 0x70
 80099d6:	ab1d      	add	r3, sp, #116	; 0x74
 80099d8:	9002      	str	r0, [sp, #8]
 80099da:	9006      	str	r0, [sp, #24]
 80099dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <siprintf+0x38>)
 80099e2:	9107      	str	r1, [sp, #28]
 80099e4:	9104      	str	r1, [sp, #16]
 80099e6:	4909      	ldr	r1, [pc, #36]	; (8009a0c <siprintf+0x3c>)
 80099e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ec:	9105      	str	r1, [sp, #20]
 80099ee:	6800      	ldr	r0, [r0, #0]
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	a902      	add	r1, sp, #8
 80099f4:	f001 fc20 	bl	800b238 <_svfiprintf_r>
 80099f8:	9b02      	ldr	r3, [sp, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	b01c      	add	sp, #112	; 0x70
 8009a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a04:	b003      	add	sp, #12
 8009a06:	4770      	bx	lr
 8009a08:	20000154 	.word	0x20000154
 8009a0c:	ffff0208 	.word	0xffff0208

08009a10 <__sread>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	460c      	mov	r4, r1
 8009a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a18:	f000 f86c 	bl	8009af4 <_read_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	bfab      	itete	ge
 8009a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a22:	89a3      	ldrhlt	r3, [r4, #12]
 8009a24:	181b      	addge	r3, r3, r0
 8009a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a2a:	bfac      	ite	ge
 8009a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a2e:	81a3      	strhlt	r3, [r4, #12]
 8009a30:	bd10      	pop	{r4, pc}

08009a32 <__swrite>:
 8009a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a36:	461f      	mov	r7, r3
 8009a38:	898b      	ldrh	r3, [r1, #12]
 8009a3a:	05db      	lsls	r3, r3, #23
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	4616      	mov	r6, r2
 8009a42:	d505      	bpl.n	8009a50 <__swrite+0x1e>
 8009a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a48:	2302      	movs	r3, #2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f000 f840 	bl	8009ad0 <_lseek_r>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	4628      	mov	r0, r5
 8009a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a66:	f000 b857 	b.w	8009b18 <_write_r>

08009a6a <__sseek>:
 8009a6a:	b510      	push	{r4, lr}
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a72:	f000 f82d 	bl	8009ad0 <_lseek_r>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	bf15      	itete	ne
 8009a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a86:	81a3      	strheq	r3, [r4, #12]
 8009a88:	bf18      	it	ne
 8009a8a:	81a3      	strhne	r3, [r4, #12]
 8009a8c:	bd10      	pop	{r4, pc}

08009a8e <__sclose>:
 8009a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a92:	f000 b80d 	b.w	8009ab0 <_close_r>

08009a96 <memset>:
 8009a96:	4402      	add	r2, r0
 8009a98:	4603      	mov	r3, r0
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d100      	bne.n	8009aa0 <memset+0xa>
 8009a9e:	4770      	bx	lr
 8009aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa4:	e7f9      	b.n	8009a9a <memset+0x4>
	...

08009aa8 <_localeconv_r>:
 8009aa8:	4800      	ldr	r0, [pc, #0]	; (8009aac <_localeconv_r+0x4>)
 8009aaa:	4770      	bx	lr
 8009aac:	20000248 	.word	0x20000248

08009ab0 <_close_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d06      	ldr	r5, [pc, #24]	; (8009acc <_close_r+0x1c>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7f7 fc41 	bl	8001342 <_close>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_close_r+0x1a>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_close_r+0x1a>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	200020d8 	.word	0x200020d8

08009ad0 <_lseek_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d07      	ldr	r5, [pc, #28]	; (8009af0 <_lseek_r+0x20>)
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	4608      	mov	r0, r1
 8009ad8:	4611      	mov	r1, r2
 8009ada:	2200      	movs	r2, #0
 8009adc:	602a      	str	r2, [r5, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f7f7 fc56 	bl	8001390 <_lseek>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_lseek_r+0x1e>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_lseek_r+0x1e>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	200020d8 	.word	0x200020d8

08009af4 <_read_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	; (8009b14 <_read_r+0x20>)
 8009af8:	4604      	mov	r4, r0
 8009afa:	4608      	mov	r0, r1
 8009afc:	4611      	mov	r1, r2
 8009afe:	2200      	movs	r2, #0
 8009b00:	602a      	str	r2, [r5, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f7f7 fbe4 	bl	80012d0 <_read>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_read_r+0x1e>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_read_r+0x1e>
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	200020d8 	.word	0x200020d8

08009b18 <_write_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_write_r+0x20>)
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	602a      	str	r2, [r5, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f7f7 fbef 	bl	800130a <_write>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_write_r+0x1e>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_write_r+0x1e>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	200020d8 	.word	0x200020d8

08009b3c <__errno>:
 8009b3c:	4b01      	ldr	r3, [pc, #4]	; (8009b44 <__errno+0x8>)
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	20000154 	.word	0x20000154

08009b48 <__libc_init_array>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	4d0d      	ldr	r5, [pc, #52]	; (8009b80 <__libc_init_array+0x38>)
 8009b4c:	4c0d      	ldr	r4, [pc, #52]	; (8009b84 <__libc_init_array+0x3c>)
 8009b4e:	1b64      	subs	r4, r4, r5
 8009b50:	10a4      	asrs	r4, r4, #2
 8009b52:	2600      	movs	r6, #0
 8009b54:	42a6      	cmp	r6, r4
 8009b56:	d109      	bne.n	8009b6c <__libc_init_array+0x24>
 8009b58:	4d0b      	ldr	r5, [pc, #44]	; (8009b88 <__libc_init_array+0x40>)
 8009b5a:	4c0c      	ldr	r4, [pc, #48]	; (8009b8c <__libc_init_array+0x44>)
 8009b5c:	f002 f894 	bl	800bc88 <_init>
 8009b60:	1b64      	subs	r4, r4, r5
 8009b62:	10a4      	asrs	r4, r4, #2
 8009b64:	2600      	movs	r6, #0
 8009b66:	42a6      	cmp	r6, r4
 8009b68:	d105      	bne.n	8009b76 <__libc_init_array+0x2e>
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b70:	4798      	blx	r3
 8009b72:	3601      	adds	r6, #1
 8009b74:	e7ee      	b.n	8009b54 <__libc_init_array+0xc>
 8009b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7a:	4798      	blx	r3
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	e7f2      	b.n	8009b66 <__libc_init_array+0x1e>
 8009b80:	0800c0ac 	.word	0x0800c0ac
 8009b84:	0800c0ac 	.word	0x0800c0ac
 8009b88:	0800c0ac 	.word	0x0800c0ac
 8009b8c:	0800c0b0 	.word	0x0800c0b0

08009b90 <__retarget_lock_acquire_recursive>:
 8009b90:	4770      	bx	lr

08009b92 <__retarget_lock_release_recursive>:
 8009b92:	4770      	bx	lr

08009b94 <quorem>:
 8009b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b98:	6903      	ldr	r3, [r0, #16]
 8009b9a:	690c      	ldr	r4, [r1, #16]
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	db7e      	blt.n	8009ca0 <quorem+0x10c>
 8009ba2:	3c01      	subs	r4, #1
 8009ba4:	f101 0814 	add.w	r8, r1, #20
 8009ba8:	f100 0514 	add.w	r5, r0, #20
 8009bac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bca:	d331      	bcc.n	8009c30 <quorem+0x9c>
 8009bcc:	f04f 0e00 	mov.w	lr, #0
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	46ac      	mov	ip, r5
 8009bd4:	46f2      	mov	sl, lr
 8009bd6:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bda:	b293      	uxth	r3, r2
 8009bdc:	fb06 e303 	mla	r3, r6, r3, lr
 8009be0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009be4:	0c1a      	lsrs	r2, r3, #16
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	ebaa 0303 	sub.w	r3, sl, r3
 8009bec:	f8dc a000 	ldr.w	sl, [ip]
 8009bf0:	fa13 f38a 	uxtah	r3, r3, sl
 8009bf4:	fb06 220e 	mla	r2, r6, lr, r2
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c00:	b292      	uxth	r2, r2
 8009c02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c0a:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c0e:	4581      	cmp	r9, r0
 8009c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c14:	f84c 3b04 	str.w	r3, [ip], #4
 8009c18:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c1c:	d2db      	bcs.n	8009bd6 <quorem+0x42>
 8009c1e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c22:	b92b      	cbnz	r3, 8009c30 <quorem+0x9c>
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	3b04      	subs	r3, #4
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	d32c      	bcc.n	8009c88 <quorem+0xf4>
 8009c2e:	613c      	str	r4, [r7, #16]
 8009c30:	4638      	mov	r0, r7
 8009c32:	f001 f9a7 	bl	800af84 <__mcmp>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	db22      	blt.n	8009c80 <quorem+0xec>
 8009c3a:	3601      	adds	r6, #1
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	2000      	movs	r0, #0
 8009c40:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c44:	f8d1 c000 	ldr.w	ip, [r1]
 8009c48:	b293      	uxth	r3, r2
 8009c4a:	1ac3      	subs	r3, r0, r3
 8009c4c:	0c12      	lsrs	r2, r2, #16
 8009c4e:	fa13 f38c 	uxtah	r3, r3, ip
 8009c52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c60:	45c1      	cmp	r9, r8
 8009c62:	f841 3b04 	str.w	r3, [r1], #4
 8009c66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c6a:	d2e9      	bcs.n	8009c40 <quorem+0xac>
 8009c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c74:	b922      	cbnz	r2, 8009c80 <quorem+0xec>
 8009c76:	3b04      	subs	r3, #4
 8009c78:	429d      	cmp	r5, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	d30a      	bcc.n	8009c94 <quorem+0x100>
 8009c7e:	613c      	str	r4, [r7, #16]
 8009c80:	4630      	mov	r0, r6
 8009c82:	b003      	add	sp, #12
 8009c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c88:	6812      	ldr	r2, [r2, #0]
 8009c8a:	3b04      	subs	r3, #4
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d1ce      	bne.n	8009c2e <quorem+0x9a>
 8009c90:	3c01      	subs	r4, #1
 8009c92:	e7c9      	b.n	8009c28 <quorem+0x94>
 8009c94:	6812      	ldr	r2, [r2, #0]
 8009c96:	3b04      	subs	r3, #4
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	d1f0      	bne.n	8009c7e <quorem+0xea>
 8009c9c:	3c01      	subs	r4, #1
 8009c9e:	e7eb      	b.n	8009c78 <quorem+0xe4>
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e7ee      	b.n	8009c82 <quorem+0xee>
 8009ca4:	0000      	movs	r0, r0
	...

08009ca8 <_dtoa_r>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	ed2d 8b04 	vpush	{d8-d9}
 8009cb0:	69c5      	ldr	r5, [r0, #28]
 8009cb2:	b093      	sub	sp, #76	; 0x4c
 8009cb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cb8:	ec57 6b10 	vmov	r6, r7, d0
 8009cbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009cc0:	9107      	str	r1, [sp, #28]
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	920a      	str	r2, [sp, #40]	; 0x28
 8009cc6:	930d      	str	r3, [sp, #52]	; 0x34
 8009cc8:	b975      	cbnz	r5, 8009ce8 <_dtoa_r+0x40>
 8009cca:	2010      	movs	r0, #16
 8009ccc:	f000 fe2a 	bl	800a924 <malloc>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	61e0      	str	r0, [r4, #28]
 8009cd4:	b920      	cbnz	r0, 8009ce0 <_dtoa_r+0x38>
 8009cd6:	4bae      	ldr	r3, [pc, #696]	; (8009f90 <_dtoa_r+0x2e8>)
 8009cd8:	21ef      	movs	r1, #239	; 0xef
 8009cda:	48ae      	ldr	r0, [pc, #696]	; (8009f94 <_dtoa_r+0x2ec>)
 8009cdc:	f001 fc90 	bl	800b600 <__assert_func>
 8009ce0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ce4:	6005      	str	r5, [r0, #0]
 8009ce6:	60c5      	str	r5, [r0, #12]
 8009ce8:	69e3      	ldr	r3, [r4, #28]
 8009cea:	6819      	ldr	r1, [r3, #0]
 8009cec:	b151      	cbz	r1, 8009d04 <_dtoa_r+0x5c>
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	604a      	str	r2, [r1, #4]
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4093      	lsls	r3, r2
 8009cf6:	608b      	str	r3, [r1, #8]
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 ff07 	bl	800ab0c <_Bfree>
 8009cfe:	69e3      	ldr	r3, [r4, #28]
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	1e3b      	subs	r3, r7, #0
 8009d06:	bfbb      	ittet	lt
 8009d08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d0c:	9303      	strlt	r3, [sp, #12]
 8009d0e:	2300      	movge	r3, #0
 8009d10:	2201      	movlt	r2, #1
 8009d12:	bfac      	ite	ge
 8009d14:	f8c8 3000 	strge.w	r3, [r8]
 8009d18:	f8c8 2000 	strlt.w	r2, [r8]
 8009d1c:	4b9e      	ldr	r3, [pc, #632]	; (8009f98 <_dtoa_r+0x2f0>)
 8009d1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d22:	ea33 0308 	bics.w	r3, r3, r8
 8009d26:	d11b      	bne.n	8009d60 <_dtoa_r+0xb8>
 8009d28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009d34:	4333      	orrs	r3, r6
 8009d36:	f000 8593 	beq.w	800a860 <_dtoa_r+0xbb8>
 8009d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d3c:	b963      	cbnz	r3, 8009d58 <_dtoa_r+0xb0>
 8009d3e:	4b97      	ldr	r3, [pc, #604]	; (8009f9c <_dtoa_r+0x2f4>)
 8009d40:	e027      	b.n	8009d92 <_dtoa_r+0xea>
 8009d42:	4b97      	ldr	r3, [pc, #604]	; (8009fa0 <_dtoa_r+0x2f8>)
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	3308      	adds	r3, #8
 8009d48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	9800      	ldr	r0, [sp, #0]
 8009d4e:	b013      	add	sp, #76	; 0x4c
 8009d50:	ecbd 8b04 	vpop	{d8-d9}
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	4b90      	ldr	r3, [pc, #576]	; (8009f9c <_dtoa_r+0x2f4>)
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	3303      	adds	r3, #3
 8009d5e:	e7f3      	b.n	8009d48 <_dtoa_r+0xa0>
 8009d60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d64:	2200      	movs	r2, #0
 8009d66:	ec51 0b17 	vmov	r0, r1, d7
 8009d6a:	eeb0 8a47 	vmov.f32	s16, s14
 8009d6e:	eef0 8a67 	vmov.f32	s17, s15
 8009d72:	2300      	movs	r3, #0
 8009d74:	f7f6 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d78:	4681      	mov	r9, r0
 8009d7a:	b160      	cbz	r0, 8009d96 <_dtoa_r+0xee>
 8009d7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d7e:	2301      	movs	r3, #1
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8568 	beq.w	800a85a <_dtoa_r+0xbb2>
 8009d8a:	4b86      	ldr	r3, [pc, #536]	; (8009fa4 <_dtoa_r+0x2fc>)
 8009d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	e7da      	b.n	8009d4c <_dtoa_r+0xa4>
 8009d96:	aa10      	add	r2, sp, #64	; 0x40
 8009d98:	a911      	add	r1, sp, #68	; 0x44
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8009da0:	eef0 0a68 	vmov.f32	s1, s17
 8009da4:	f001 f994 	bl	800b0d0 <__d2b>
 8009da8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009dac:	4682      	mov	sl, r0
 8009dae:	2d00      	cmp	r5, #0
 8009db0:	d07f      	beq.n	8009eb2 <_dtoa_r+0x20a>
 8009db2:	ee18 3a90 	vmov	r3, s17
 8009db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009dbe:	ec51 0b18 	vmov	r0, r1, d8
 8009dc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009dca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009dce:	4619      	mov	r1, r3
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4b75      	ldr	r3, [pc, #468]	; (8009fa8 <_dtoa_r+0x300>)
 8009dd4:	f7f6 fa58 	bl	8000288 <__aeabi_dsub>
 8009dd8:	a367      	add	r3, pc, #412	; (adr r3, 8009f78 <_dtoa_r+0x2d0>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fc0b 	bl	80005f8 <__aeabi_dmul>
 8009de2:	a367      	add	r3, pc, #412	; (adr r3, 8009f80 <_dtoa_r+0x2d8>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 fa50 	bl	800028c <__adddf3>
 8009dec:	4606      	mov	r6, r0
 8009dee:	4628      	mov	r0, r5
 8009df0:	460f      	mov	r7, r1
 8009df2:	f7f6 fb97 	bl	8000524 <__aeabi_i2d>
 8009df6:	a364      	add	r3, pc, #400	; (adr r3, 8009f88 <_dtoa_r+0x2e0>)
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f7f6 fbfc 	bl	80005f8 <__aeabi_dmul>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	4630      	mov	r0, r6
 8009e06:	4639      	mov	r1, r7
 8009e08:	f7f6 fa40 	bl	800028c <__adddf3>
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	f7f6 fea2 	bl	8000b58 <__aeabi_d2iz>
 8009e14:	2200      	movs	r2, #0
 8009e16:	4683      	mov	fp, r0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 fe5d 	bl	8000adc <__aeabi_dcmplt>
 8009e22:	b148      	cbz	r0, 8009e38 <_dtoa_r+0x190>
 8009e24:	4658      	mov	r0, fp
 8009e26:	f7f6 fb7d 	bl	8000524 <__aeabi_i2d>
 8009e2a:	4632      	mov	r2, r6
 8009e2c:	463b      	mov	r3, r7
 8009e2e:	f7f6 fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e32:	b908      	cbnz	r0, 8009e38 <_dtoa_r+0x190>
 8009e34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e38:	f1bb 0f16 	cmp.w	fp, #22
 8009e3c:	d857      	bhi.n	8009eee <_dtoa_r+0x246>
 8009e3e:	4b5b      	ldr	r3, [pc, #364]	; (8009fac <_dtoa_r+0x304>)
 8009e40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	ec51 0b18 	vmov	r0, r1, d8
 8009e4c:	f7f6 fe46 	bl	8000adc <__aeabi_dcmplt>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d04e      	beq.n	8009ef2 <_dtoa_r+0x24a>
 8009e54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e58:	2300      	movs	r3, #0
 8009e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e5e:	1b5b      	subs	r3, r3, r5
 8009e60:	1e5a      	subs	r2, r3, #1
 8009e62:	bf45      	ittet	mi
 8009e64:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e68:	9305      	strmi	r3, [sp, #20]
 8009e6a:	2300      	movpl	r3, #0
 8009e6c:	2300      	movmi	r3, #0
 8009e6e:	9206      	str	r2, [sp, #24]
 8009e70:	bf54      	ite	pl
 8009e72:	9305      	strpl	r3, [sp, #20]
 8009e74:	9306      	strmi	r3, [sp, #24]
 8009e76:	f1bb 0f00 	cmp.w	fp, #0
 8009e7a:	db3c      	blt.n	8009ef6 <_dtoa_r+0x24e>
 8009e7c:	9b06      	ldr	r3, [sp, #24]
 8009e7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009e82:	445b      	add	r3, fp
 8009e84:	9306      	str	r3, [sp, #24]
 8009e86:	2300      	movs	r3, #0
 8009e88:	9308      	str	r3, [sp, #32]
 8009e8a:	9b07      	ldr	r3, [sp, #28]
 8009e8c:	2b09      	cmp	r3, #9
 8009e8e:	d868      	bhi.n	8009f62 <_dtoa_r+0x2ba>
 8009e90:	2b05      	cmp	r3, #5
 8009e92:	bfc4      	itt	gt
 8009e94:	3b04      	subgt	r3, #4
 8009e96:	9307      	strgt	r3, [sp, #28]
 8009e98:	9b07      	ldr	r3, [sp, #28]
 8009e9a:	f1a3 0302 	sub.w	r3, r3, #2
 8009e9e:	bfcc      	ite	gt
 8009ea0:	2500      	movgt	r5, #0
 8009ea2:	2501      	movle	r5, #1
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	f200 8085 	bhi.w	8009fb4 <_dtoa_r+0x30c>
 8009eaa:	e8df f003 	tbb	[pc, r3]
 8009eae:	3b2e      	.short	0x3b2e
 8009eb0:	5839      	.short	0x5839
 8009eb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009eb6:	441d      	add	r5, r3
 8009eb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	bfc1      	itttt	gt
 8009ec0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ec4:	fa08 f803 	lslgt.w	r8, r8, r3
 8009ec8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009ecc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009ed0:	bfd6      	itet	le
 8009ed2:	f1c3 0320 	rsble	r3, r3, #32
 8009ed6:	ea48 0003 	orrgt.w	r0, r8, r3
 8009eda:	fa06 f003 	lslle.w	r0, r6, r3
 8009ede:	f7f6 fb11 	bl	8000504 <__aeabi_ui2d>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ee8:	3d01      	subs	r5, #1
 8009eea:	920e      	str	r2, [sp, #56]	; 0x38
 8009eec:	e76f      	b.n	8009dce <_dtoa_r+0x126>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e7b3      	b.n	8009e5a <_dtoa_r+0x1b2>
 8009ef2:	900c      	str	r0, [sp, #48]	; 0x30
 8009ef4:	e7b2      	b.n	8009e5c <_dtoa_r+0x1b4>
 8009ef6:	9b05      	ldr	r3, [sp, #20]
 8009ef8:	eba3 030b 	sub.w	r3, r3, fp
 8009efc:	9305      	str	r3, [sp, #20]
 8009efe:	f1cb 0300 	rsb	r3, fp, #0
 8009f02:	9308      	str	r3, [sp, #32]
 8009f04:	2300      	movs	r3, #0
 8009f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f08:	e7bf      	b.n	8009e8a <_dtoa_r+0x1e2>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	dc52      	bgt.n	8009fba <_dtoa_r+0x312>
 8009f14:	2301      	movs	r3, #1
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8009f1e:	e00b      	b.n	8009f38 <_dtoa_r+0x290>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e7f3      	b.n	8009f0c <_dtoa_r+0x264>
 8009f24:	2300      	movs	r3, #0
 8009f26:	9309      	str	r3, [sp, #36]	; 0x24
 8009f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2a:	445b      	add	r3, fp
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	9304      	str	r3, [sp, #16]
 8009f34:	bfb8      	it	lt
 8009f36:	2301      	movlt	r3, #1
 8009f38:	69e0      	ldr	r0, [r4, #28]
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	2204      	movs	r2, #4
 8009f3e:	f102 0614 	add.w	r6, r2, #20
 8009f42:	429e      	cmp	r6, r3
 8009f44:	d93d      	bls.n	8009fc2 <_dtoa_r+0x31a>
 8009f46:	6041      	str	r1, [r0, #4]
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 fd9f 	bl	800aa8c <_Balloc>
 8009f4e:	9000      	str	r0, [sp, #0]
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d139      	bne.n	8009fc8 <_dtoa_r+0x320>
 8009f54:	4b16      	ldr	r3, [pc, #88]	; (8009fb0 <_dtoa_r+0x308>)
 8009f56:	4602      	mov	r2, r0
 8009f58:	f240 11af 	movw	r1, #431	; 0x1af
 8009f5c:	e6bd      	b.n	8009cda <_dtoa_r+0x32>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7e1      	b.n	8009f26 <_dtoa_r+0x27e>
 8009f62:	2501      	movs	r5, #1
 8009f64:	2300      	movs	r3, #0
 8009f66:	9307      	str	r3, [sp, #28]
 8009f68:	9509      	str	r5, [sp, #36]	; 0x24
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	2200      	movs	r2, #0
 8009f74:	2312      	movs	r3, #18
 8009f76:	e7d1      	b.n	8009f1c <_dtoa_r+0x274>
 8009f78:	636f4361 	.word	0x636f4361
 8009f7c:	3fd287a7 	.word	0x3fd287a7
 8009f80:	8b60c8b3 	.word	0x8b60c8b3
 8009f84:	3fc68a28 	.word	0x3fc68a28
 8009f88:	509f79fb 	.word	0x509f79fb
 8009f8c:	3fd34413 	.word	0x3fd34413
 8009f90:	0800bd71 	.word	0x0800bd71
 8009f94:	0800bd88 	.word	0x0800bd88
 8009f98:	7ff00000 	.word	0x7ff00000
 8009f9c:	0800bd6d 	.word	0x0800bd6d
 8009fa0:	0800bd64 	.word	0x0800bd64
 8009fa4:	0800bd41 	.word	0x0800bd41
 8009fa8:	3ff80000 	.word	0x3ff80000
 8009fac:	0800be78 	.word	0x0800be78
 8009fb0:	0800bde0 	.word	0x0800bde0
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb8:	e7d7      	b.n	8009f6a <_dtoa_r+0x2c2>
 8009fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	e7ba      	b.n	8009f38 <_dtoa_r+0x290>
 8009fc2:	3101      	adds	r1, #1
 8009fc4:	0052      	lsls	r2, r2, #1
 8009fc6:	e7ba      	b.n	8009f3e <_dtoa_r+0x296>
 8009fc8:	69e3      	ldr	r3, [r4, #28]
 8009fca:	9a00      	ldr	r2, [sp, #0]
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	2b0e      	cmp	r3, #14
 8009fd2:	f200 80a8 	bhi.w	800a126 <_dtoa_r+0x47e>
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	f000 80a5 	beq.w	800a126 <_dtoa_r+0x47e>
 8009fdc:	f1bb 0f00 	cmp.w	fp, #0
 8009fe0:	dd38      	ble.n	800a054 <_dtoa_r+0x3ac>
 8009fe2:	4bc0      	ldr	r3, [pc, #768]	; (800a2e4 <_dtoa_r+0x63c>)
 8009fe4:	f00b 020f 	and.w	r2, fp, #15
 8009fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009ff0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009ff4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009ff8:	d019      	beq.n	800a02e <_dtoa_r+0x386>
 8009ffa:	4bbb      	ldr	r3, [pc, #748]	; (800a2e8 <_dtoa_r+0x640>)
 8009ffc:	ec51 0b18 	vmov	r0, r1, d8
 800a000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a004:	f7f6 fc22 	bl	800084c <__aeabi_ddiv>
 800a008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a00c:	f008 080f 	and.w	r8, r8, #15
 800a010:	2503      	movs	r5, #3
 800a012:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a2e8 <_dtoa_r+0x640>
 800a016:	f1b8 0f00 	cmp.w	r8, #0
 800a01a:	d10a      	bne.n	800a032 <_dtoa_r+0x38a>
 800a01c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a020:	4632      	mov	r2, r6
 800a022:	463b      	mov	r3, r7
 800a024:	f7f6 fc12 	bl	800084c <__aeabi_ddiv>
 800a028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a02c:	e02b      	b.n	800a086 <_dtoa_r+0x3de>
 800a02e:	2502      	movs	r5, #2
 800a030:	e7ef      	b.n	800a012 <_dtoa_r+0x36a>
 800a032:	f018 0f01 	tst.w	r8, #1
 800a036:	d008      	beq.n	800a04a <_dtoa_r+0x3a2>
 800a038:	4630      	mov	r0, r6
 800a03a:	4639      	mov	r1, r7
 800a03c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a040:	f7f6 fada 	bl	80005f8 <__aeabi_dmul>
 800a044:	3501      	adds	r5, #1
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a04e:	f109 0908 	add.w	r9, r9, #8
 800a052:	e7e0      	b.n	800a016 <_dtoa_r+0x36e>
 800a054:	f000 809f 	beq.w	800a196 <_dtoa_r+0x4ee>
 800a058:	f1cb 0600 	rsb	r6, fp, #0
 800a05c:	4ba1      	ldr	r3, [pc, #644]	; (800a2e4 <_dtoa_r+0x63c>)
 800a05e:	4fa2      	ldr	r7, [pc, #648]	; (800a2e8 <_dtoa_r+0x640>)
 800a060:	f006 020f 	and.w	r2, r6, #15
 800a064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	ec51 0b18 	vmov	r0, r1, d8
 800a070:	f7f6 fac2 	bl	80005f8 <__aeabi_dmul>
 800a074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a078:	1136      	asrs	r6, r6, #4
 800a07a:	2300      	movs	r3, #0
 800a07c:	2502      	movs	r5, #2
 800a07e:	2e00      	cmp	r6, #0
 800a080:	d17e      	bne.n	800a180 <_dtoa_r+0x4d8>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1d0      	bne.n	800a028 <_dtoa_r+0x380>
 800a086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a088:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 8084 	beq.w	800a19a <_dtoa_r+0x4f2>
 800a092:	4b96      	ldr	r3, [pc, #600]	; (800a2ec <_dtoa_r+0x644>)
 800a094:	2200      	movs	r2, #0
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	f7f6 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d07b      	beq.n	800a19a <_dtoa_r+0x4f2>
 800a0a2:	9b04      	ldr	r3, [sp, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d078      	beq.n	800a19a <_dtoa_r+0x4f2>
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	dd39      	ble.n	800a122 <_dtoa_r+0x47a>
 800a0ae:	4b90      	ldr	r3, [pc, #576]	; (800a2f0 <_dtoa_r+0x648>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	f7f6 fa9f 	bl	80005f8 <__aeabi_dmul>
 800a0ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0be:	9e01      	ldr	r6, [sp, #4]
 800a0c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a0c4:	3501      	adds	r5, #1
 800a0c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f7f6 fa2a 	bl	8000524 <__aeabi_i2d>
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	f7f6 fa90 	bl	80005f8 <__aeabi_dmul>
 800a0d8:	4b86      	ldr	r3, [pc, #536]	; (800a2f4 <_dtoa_r+0x64c>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f7f6 f8d6 	bl	800028c <__adddf3>
 800a0e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0e8:	9303      	str	r3, [sp, #12]
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	d158      	bne.n	800a1a0 <_dtoa_r+0x4f8>
 800a0ee:	4b82      	ldr	r3, [pc, #520]	; (800a2f8 <_dtoa_r+0x650>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 f8c7 	bl	8000288 <__aeabi_dsub>
 800a0fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0fe:	4680      	mov	r8, r0
 800a100:	4689      	mov	r9, r1
 800a102:	f7f6 fd09 	bl	8000b18 <__aeabi_dcmpgt>
 800a106:	2800      	cmp	r0, #0
 800a108:	f040 8296 	bne.w	800a638 <_dtoa_r+0x990>
 800a10c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a110:	4640      	mov	r0, r8
 800a112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a116:	4649      	mov	r1, r9
 800a118:	f7f6 fce0 	bl	8000adc <__aeabi_dcmplt>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	f040 8289 	bne.w	800a634 <_dtoa_r+0x98c>
 800a122:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f2c0 814e 	blt.w	800a3ca <_dtoa_r+0x722>
 800a12e:	f1bb 0f0e 	cmp.w	fp, #14
 800a132:	f300 814a 	bgt.w	800a3ca <_dtoa_r+0x722>
 800a136:	4b6b      	ldr	r3, [pc, #428]	; (800a2e4 <_dtoa_r+0x63c>)
 800a138:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a13c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a142:	2b00      	cmp	r3, #0
 800a144:	f280 80dc 	bge.w	800a300 <_dtoa_r+0x658>
 800a148:	9b04      	ldr	r3, [sp, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f300 80d8 	bgt.w	800a300 <_dtoa_r+0x658>
 800a150:	f040 826f 	bne.w	800a632 <_dtoa_r+0x98a>
 800a154:	4b68      	ldr	r3, [pc, #416]	; (800a2f8 <_dtoa_r+0x650>)
 800a156:	2200      	movs	r2, #0
 800a158:	4640      	mov	r0, r8
 800a15a:	4649      	mov	r1, r9
 800a15c:	f7f6 fa4c 	bl	80005f8 <__aeabi_dmul>
 800a160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a164:	f7f6 fcce 	bl	8000b04 <__aeabi_dcmpge>
 800a168:	9e04      	ldr	r6, [sp, #16]
 800a16a:	4637      	mov	r7, r6
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f040 8245 	bne.w	800a5fc <_dtoa_r+0x954>
 800a172:	9d00      	ldr	r5, [sp, #0]
 800a174:	2331      	movs	r3, #49	; 0x31
 800a176:	f805 3b01 	strb.w	r3, [r5], #1
 800a17a:	f10b 0b01 	add.w	fp, fp, #1
 800a17e:	e241      	b.n	800a604 <_dtoa_r+0x95c>
 800a180:	07f2      	lsls	r2, r6, #31
 800a182:	d505      	bpl.n	800a190 <_dtoa_r+0x4e8>
 800a184:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	3501      	adds	r5, #1
 800a18e:	2301      	movs	r3, #1
 800a190:	1076      	asrs	r6, r6, #1
 800a192:	3708      	adds	r7, #8
 800a194:	e773      	b.n	800a07e <_dtoa_r+0x3d6>
 800a196:	2502      	movs	r5, #2
 800a198:	e775      	b.n	800a086 <_dtoa_r+0x3de>
 800a19a:	9e04      	ldr	r6, [sp, #16]
 800a19c:	465f      	mov	r7, fp
 800a19e:	e792      	b.n	800a0c6 <_dtoa_r+0x41e>
 800a1a0:	9900      	ldr	r1, [sp, #0]
 800a1a2:	4b50      	ldr	r3, [pc, #320]	; (800a2e4 <_dtoa_r+0x63c>)
 800a1a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1a8:	4431      	add	r1, r6
 800a1aa:	9102      	str	r1, [sp, #8]
 800a1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1ae:	eeb0 9a47 	vmov.f32	s18, s14
 800a1b2:	eef0 9a67 	vmov.f32	s19, s15
 800a1b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1be:	2900      	cmp	r1, #0
 800a1c0:	d044      	beq.n	800a24c <_dtoa_r+0x5a4>
 800a1c2:	494e      	ldr	r1, [pc, #312]	; (800a2fc <_dtoa_r+0x654>)
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f7f6 fb41 	bl	800084c <__aeabi_ddiv>
 800a1ca:	ec53 2b19 	vmov	r2, r3, d9
 800a1ce:	f7f6 f85b 	bl	8000288 <__aeabi_dsub>
 800a1d2:	9d00      	ldr	r5, [sp, #0]
 800a1d4:	ec41 0b19 	vmov	d9, r0, r1
 800a1d8:	4649      	mov	r1, r9
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7f6 fcbc 	bl	8000b58 <__aeabi_d2iz>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	f7f6 f99f 	bl	8000524 <__aeabi_i2d>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	f7f6 f84b 	bl	8000288 <__aeabi_dsub>
 800a1f2:	3630      	adds	r6, #48	; 0x30
 800a1f4:	f805 6b01 	strb.w	r6, [r5], #1
 800a1f8:	ec53 2b19 	vmov	r2, r3, d9
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	4689      	mov	r9, r1
 800a200:	f7f6 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800a204:	2800      	cmp	r0, #0
 800a206:	d164      	bne.n	800a2d2 <_dtoa_r+0x62a>
 800a208:	4642      	mov	r2, r8
 800a20a:	464b      	mov	r3, r9
 800a20c:	4937      	ldr	r1, [pc, #220]	; (800a2ec <_dtoa_r+0x644>)
 800a20e:	2000      	movs	r0, #0
 800a210:	f7f6 f83a 	bl	8000288 <__aeabi_dsub>
 800a214:	ec53 2b19 	vmov	r2, r3, d9
 800a218:	f7f6 fc60 	bl	8000adc <__aeabi_dcmplt>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	f040 80b6 	bne.w	800a38e <_dtoa_r+0x6e6>
 800a222:	9b02      	ldr	r3, [sp, #8]
 800a224:	429d      	cmp	r5, r3
 800a226:	f43f af7c 	beq.w	800a122 <_dtoa_r+0x47a>
 800a22a:	4b31      	ldr	r3, [pc, #196]	; (800a2f0 <_dtoa_r+0x648>)
 800a22c:	ec51 0b19 	vmov	r0, r1, d9
 800a230:	2200      	movs	r2, #0
 800a232:	f7f6 f9e1 	bl	80005f8 <__aeabi_dmul>
 800a236:	4b2e      	ldr	r3, [pc, #184]	; (800a2f0 <_dtoa_r+0x648>)
 800a238:	ec41 0b19 	vmov	d9, r0, r1
 800a23c:	2200      	movs	r2, #0
 800a23e:	4640      	mov	r0, r8
 800a240:	4649      	mov	r1, r9
 800a242:	f7f6 f9d9 	bl	80005f8 <__aeabi_dmul>
 800a246:	4680      	mov	r8, r0
 800a248:	4689      	mov	r9, r1
 800a24a:	e7c5      	b.n	800a1d8 <_dtoa_r+0x530>
 800a24c:	ec51 0b17 	vmov	r0, r1, d7
 800a250:	f7f6 f9d2 	bl	80005f8 <__aeabi_dmul>
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	9d00      	ldr	r5, [sp, #0]
 800a258:	930f      	str	r3, [sp, #60]	; 0x3c
 800a25a:	ec41 0b19 	vmov	d9, r0, r1
 800a25e:	4649      	mov	r1, r9
 800a260:	4640      	mov	r0, r8
 800a262:	f7f6 fc79 	bl	8000b58 <__aeabi_d2iz>
 800a266:	4606      	mov	r6, r0
 800a268:	f7f6 f95c 	bl	8000524 <__aeabi_i2d>
 800a26c:	3630      	adds	r6, #48	; 0x30
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	4640      	mov	r0, r8
 800a274:	4649      	mov	r1, r9
 800a276:	f7f6 f807 	bl	8000288 <__aeabi_dsub>
 800a27a:	f805 6b01 	strb.w	r6, [r5], #1
 800a27e:	9b02      	ldr	r3, [sp, #8]
 800a280:	429d      	cmp	r5, r3
 800a282:	4680      	mov	r8, r0
 800a284:	4689      	mov	r9, r1
 800a286:	f04f 0200 	mov.w	r2, #0
 800a28a:	d124      	bne.n	800a2d6 <_dtoa_r+0x62e>
 800a28c:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <_dtoa_r+0x654>)
 800a28e:	ec51 0b19 	vmov	r0, r1, d9
 800a292:	f7f5 fffb 	bl	800028c <__adddf3>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	f7f6 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d173      	bne.n	800a38e <_dtoa_r+0x6e6>
 800a2a6:	ec53 2b19 	vmov	r2, r3, d9
 800a2aa:	4914      	ldr	r1, [pc, #80]	; (800a2fc <_dtoa_r+0x654>)
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	f7f6 fc0f 	bl	8000adc <__aeabi_dcmplt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f43f af2f 	beq.w	800a122 <_dtoa_r+0x47a>
 800a2c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a2c6:	1e6b      	subs	r3, r5, #1
 800a2c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2ce:	2b30      	cmp	r3, #48	; 0x30
 800a2d0:	d0f8      	beq.n	800a2c4 <_dtoa_r+0x61c>
 800a2d2:	46bb      	mov	fp, r7
 800a2d4:	e04a      	b.n	800a36c <_dtoa_r+0x6c4>
 800a2d6:	4b06      	ldr	r3, [pc, #24]	; (800a2f0 <_dtoa_r+0x648>)
 800a2d8:	f7f6 f98e 	bl	80005f8 <__aeabi_dmul>
 800a2dc:	4680      	mov	r8, r0
 800a2de:	4689      	mov	r9, r1
 800a2e0:	e7bd      	b.n	800a25e <_dtoa_r+0x5b6>
 800a2e2:	bf00      	nop
 800a2e4:	0800be78 	.word	0x0800be78
 800a2e8:	0800be50 	.word	0x0800be50
 800a2ec:	3ff00000 	.word	0x3ff00000
 800a2f0:	40240000 	.word	0x40240000
 800a2f4:	401c0000 	.word	0x401c0000
 800a2f8:	40140000 	.word	0x40140000
 800a2fc:	3fe00000 	.word	0x3fe00000
 800a300:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a304:	9d00      	ldr	r5, [sp, #0]
 800a306:	4642      	mov	r2, r8
 800a308:	464b      	mov	r3, r9
 800a30a:	4630      	mov	r0, r6
 800a30c:	4639      	mov	r1, r7
 800a30e:	f7f6 fa9d 	bl	800084c <__aeabi_ddiv>
 800a312:	f7f6 fc21 	bl	8000b58 <__aeabi_d2iz>
 800a316:	9001      	str	r0, [sp, #4]
 800a318:	f7f6 f904 	bl	8000524 <__aeabi_i2d>
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	f7f6 f96a 	bl	80005f8 <__aeabi_dmul>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	9e01      	ldr	r6, [sp, #4]
 800a332:	9f04      	ldr	r7, [sp, #16]
 800a334:	3630      	adds	r6, #48	; 0x30
 800a336:	f805 6b01 	strb.w	r6, [r5], #1
 800a33a:	9e00      	ldr	r6, [sp, #0]
 800a33c:	1bae      	subs	r6, r5, r6
 800a33e:	42b7      	cmp	r7, r6
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	d134      	bne.n	800a3b0 <_dtoa_r+0x708>
 800a346:	f7f5 ffa1 	bl	800028c <__adddf3>
 800a34a:	4642      	mov	r2, r8
 800a34c:	464b      	mov	r3, r9
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	f7f6 fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 800a356:	b9c8      	cbnz	r0, 800a38c <_dtoa_r+0x6e4>
 800a358:	4642      	mov	r2, r8
 800a35a:	464b      	mov	r3, r9
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	f7f6 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a364:	b110      	cbz	r0, 800a36c <_dtoa_r+0x6c4>
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	07db      	lsls	r3, r3, #31
 800a36a:	d40f      	bmi.n	800a38c <_dtoa_r+0x6e4>
 800a36c:	4651      	mov	r1, sl
 800a36e:	4620      	mov	r0, r4
 800a370:	f000 fbcc 	bl	800ab0c <_Bfree>
 800a374:	2300      	movs	r3, #0
 800a376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a378:	702b      	strb	r3, [r5, #0]
 800a37a:	f10b 0301 	add.w	r3, fp, #1
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a382:	2b00      	cmp	r3, #0
 800a384:	f43f ace2 	beq.w	8009d4c <_dtoa_r+0xa4>
 800a388:	601d      	str	r5, [r3, #0]
 800a38a:	e4df      	b.n	8009d4c <_dtoa_r+0xa4>
 800a38c:	465f      	mov	r7, fp
 800a38e:	462b      	mov	r3, r5
 800a390:	461d      	mov	r5, r3
 800a392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a396:	2a39      	cmp	r2, #57	; 0x39
 800a398:	d106      	bne.n	800a3a8 <_dtoa_r+0x700>
 800a39a:	9a00      	ldr	r2, [sp, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d1f7      	bne.n	800a390 <_dtoa_r+0x6e8>
 800a3a0:	9900      	ldr	r1, [sp, #0]
 800a3a2:	2230      	movs	r2, #48	; 0x30
 800a3a4:	3701      	adds	r7, #1
 800a3a6:	700a      	strb	r2, [r1, #0]
 800a3a8:	781a      	ldrb	r2, [r3, #0]
 800a3aa:	3201      	adds	r2, #1
 800a3ac:	701a      	strb	r2, [r3, #0]
 800a3ae:	e790      	b.n	800a2d2 <_dtoa_r+0x62a>
 800a3b0:	4ba3      	ldr	r3, [pc, #652]	; (800a640 <_dtoa_r+0x998>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f7f6 f920 	bl	80005f8 <__aeabi_dmul>
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4606      	mov	r6, r0
 800a3be:	460f      	mov	r7, r1
 800a3c0:	f7f6 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d09e      	beq.n	800a306 <_dtoa_r+0x65e>
 800a3c8:	e7d0      	b.n	800a36c <_dtoa_r+0x6c4>
 800a3ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	f000 80ca 	beq.w	800a566 <_dtoa_r+0x8be>
 800a3d2:	9a07      	ldr	r2, [sp, #28]
 800a3d4:	2a01      	cmp	r2, #1
 800a3d6:	f300 80ad 	bgt.w	800a534 <_dtoa_r+0x88c>
 800a3da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3dc:	2a00      	cmp	r2, #0
 800a3de:	f000 80a5 	beq.w	800a52c <_dtoa_r+0x884>
 800a3e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3e6:	9e08      	ldr	r6, [sp, #32]
 800a3e8:	9d05      	ldr	r5, [sp, #20]
 800a3ea:	9a05      	ldr	r2, [sp, #20]
 800a3ec:	441a      	add	r2, r3
 800a3ee:	9205      	str	r2, [sp, #20]
 800a3f0:	9a06      	ldr	r2, [sp, #24]
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	441a      	add	r2, r3
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	9206      	str	r2, [sp, #24]
 800a3fa:	f000 fc3d 	bl	800ac78 <__i2b>
 800a3fe:	4607      	mov	r7, r0
 800a400:	b165      	cbz	r5, 800a41c <_dtoa_r+0x774>
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	dd09      	ble.n	800a41c <_dtoa_r+0x774>
 800a408:	42ab      	cmp	r3, r5
 800a40a:	9a05      	ldr	r2, [sp, #20]
 800a40c:	bfa8      	it	ge
 800a40e:	462b      	movge	r3, r5
 800a410:	1ad2      	subs	r2, r2, r3
 800a412:	9205      	str	r2, [sp, #20]
 800a414:	9a06      	ldr	r2, [sp, #24]
 800a416:	1aed      	subs	r5, r5, r3
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	9306      	str	r3, [sp, #24]
 800a41c:	9b08      	ldr	r3, [sp, #32]
 800a41e:	b1f3      	cbz	r3, 800a45e <_dtoa_r+0x7b6>
 800a420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80a3 	beq.w	800a56e <_dtoa_r+0x8c6>
 800a428:	2e00      	cmp	r6, #0
 800a42a:	dd10      	ble.n	800a44e <_dtoa_r+0x7a6>
 800a42c:	4639      	mov	r1, r7
 800a42e:	4632      	mov	r2, r6
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fce1 	bl	800adf8 <__pow5mult>
 800a436:	4652      	mov	r2, sl
 800a438:	4601      	mov	r1, r0
 800a43a:	4607      	mov	r7, r0
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 fc31 	bl	800aca4 <__multiply>
 800a442:	4651      	mov	r1, sl
 800a444:	4680      	mov	r8, r0
 800a446:	4620      	mov	r0, r4
 800a448:	f000 fb60 	bl	800ab0c <_Bfree>
 800a44c:	46c2      	mov	sl, r8
 800a44e:	9b08      	ldr	r3, [sp, #32]
 800a450:	1b9a      	subs	r2, r3, r6
 800a452:	d004      	beq.n	800a45e <_dtoa_r+0x7b6>
 800a454:	4651      	mov	r1, sl
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fcce 	bl	800adf8 <__pow5mult>
 800a45c:	4682      	mov	sl, r0
 800a45e:	2101      	movs	r1, #1
 800a460:	4620      	mov	r0, r4
 800a462:	f000 fc09 	bl	800ac78 <__i2b>
 800a466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	4606      	mov	r6, r0
 800a46c:	f340 8081 	ble.w	800a572 <_dtoa_r+0x8ca>
 800a470:	461a      	mov	r2, r3
 800a472:	4601      	mov	r1, r0
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fcbf 	bl	800adf8 <__pow5mult>
 800a47a:	9b07      	ldr	r3, [sp, #28]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	4606      	mov	r6, r0
 800a480:	dd7a      	ble.n	800a578 <_dtoa_r+0x8d0>
 800a482:	f04f 0800 	mov.w	r8, #0
 800a486:	6933      	ldr	r3, [r6, #16]
 800a488:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a48c:	6918      	ldr	r0, [r3, #16]
 800a48e:	f000 fba5 	bl	800abdc <__hi0bits>
 800a492:	f1c0 0020 	rsb	r0, r0, #32
 800a496:	9b06      	ldr	r3, [sp, #24]
 800a498:	4418      	add	r0, r3
 800a49a:	f010 001f 	ands.w	r0, r0, #31
 800a49e:	f000 8094 	beq.w	800a5ca <_dtoa_r+0x922>
 800a4a2:	f1c0 0320 	rsb	r3, r0, #32
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	f340 8085 	ble.w	800a5b6 <_dtoa_r+0x90e>
 800a4ac:	9b05      	ldr	r3, [sp, #20]
 800a4ae:	f1c0 001c 	rsb	r0, r0, #28
 800a4b2:	4403      	add	r3, r0
 800a4b4:	9305      	str	r3, [sp, #20]
 800a4b6:	9b06      	ldr	r3, [sp, #24]
 800a4b8:	4403      	add	r3, r0
 800a4ba:	4405      	add	r5, r0
 800a4bc:	9306      	str	r3, [sp, #24]
 800a4be:	9b05      	ldr	r3, [sp, #20]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dd05      	ble.n	800a4d0 <_dtoa_r+0x828>
 800a4c4:	4651      	mov	r1, sl
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fcef 	bl	800aeac <__lshift>
 800a4ce:	4682      	mov	sl, r0
 800a4d0:	9b06      	ldr	r3, [sp, #24]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	dd05      	ble.n	800a4e2 <_dtoa_r+0x83a>
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 fce6 	bl	800aeac <__lshift>
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d072      	beq.n	800a5ce <_dtoa_r+0x926>
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	f000 fd4a 	bl	800af84 <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	da6c      	bge.n	800a5ce <_dtoa_r+0x926>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4651      	mov	r1, sl
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 fb28 	bl	800ab50 <__multadd>
 800a500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a502:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a506:	4682      	mov	sl, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 81b0 	beq.w	800a86e <_dtoa_r+0xbc6>
 800a50e:	2300      	movs	r3, #0
 800a510:	4639      	mov	r1, r7
 800a512:	220a      	movs	r2, #10
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fb1b 	bl	800ab50 <__multadd>
 800a51a:	9b01      	ldr	r3, [sp, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	4607      	mov	r7, r0
 800a520:	f300 8096 	bgt.w	800a650 <_dtoa_r+0x9a8>
 800a524:	9b07      	ldr	r3, [sp, #28]
 800a526:	2b02      	cmp	r3, #2
 800a528:	dc59      	bgt.n	800a5de <_dtoa_r+0x936>
 800a52a:	e091      	b.n	800a650 <_dtoa_r+0x9a8>
 800a52c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a52e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a532:	e758      	b.n	800a3e6 <_dtoa_r+0x73e>
 800a534:	9b04      	ldr	r3, [sp, #16]
 800a536:	1e5e      	subs	r6, r3, #1
 800a538:	9b08      	ldr	r3, [sp, #32]
 800a53a:	42b3      	cmp	r3, r6
 800a53c:	bfbf      	itttt	lt
 800a53e:	9b08      	ldrlt	r3, [sp, #32]
 800a540:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a542:	9608      	strlt	r6, [sp, #32]
 800a544:	1af3      	sublt	r3, r6, r3
 800a546:	bfb4      	ite	lt
 800a548:	18d2      	addlt	r2, r2, r3
 800a54a:	1b9e      	subge	r6, r3, r6
 800a54c:	9b04      	ldr	r3, [sp, #16]
 800a54e:	bfbc      	itt	lt
 800a550:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a552:	2600      	movlt	r6, #0
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfb7      	itett	lt
 800a558:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a55c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a560:	1a9d      	sublt	r5, r3, r2
 800a562:	2300      	movlt	r3, #0
 800a564:	e741      	b.n	800a3ea <_dtoa_r+0x742>
 800a566:	9e08      	ldr	r6, [sp, #32]
 800a568:	9d05      	ldr	r5, [sp, #20]
 800a56a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a56c:	e748      	b.n	800a400 <_dtoa_r+0x758>
 800a56e:	9a08      	ldr	r2, [sp, #32]
 800a570:	e770      	b.n	800a454 <_dtoa_r+0x7ac>
 800a572:	9b07      	ldr	r3, [sp, #28]
 800a574:	2b01      	cmp	r3, #1
 800a576:	dc19      	bgt.n	800a5ac <_dtoa_r+0x904>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	b9bb      	cbnz	r3, 800a5ac <_dtoa_r+0x904>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a582:	b99b      	cbnz	r3, 800a5ac <_dtoa_r+0x904>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a58a:	0d1b      	lsrs	r3, r3, #20
 800a58c:	051b      	lsls	r3, r3, #20
 800a58e:	b183      	cbz	r3, 800a5b2 <_dtoa_r+0x90a>
 800a590:	9b05      	ldr	r3, [sp, #20]
 800a592:	3301      	adds	r3, #1
 800a594:	9305      	str	r3, [sp, #20]
 800a596:	9b06      	ldr	r3, [sp, #24]
 800a598:	3301      	adds	r3, #1
 800a59a:	9306      	str	r3, [sp, #24]
 800a59c:	f04f 0801 	mov.w	r8, #1
 800a5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f47f af6f 	bne.w	800a486 <_dtoa_r+0x7de>
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	e774      	b.n	800a496 <_dtoa_r+0x7ee>
 800a5ac:	f04f 0800 	mov.w	r8, #0
 800a5b0:	e7f6      	b.n	800a5a0 <_dtoa_r+0x8f8>
 800a5b2:	4698      	mov	r8, r3
 800a5b4:	e7f4      	b.n	800a5a0 <_dtoa_r+0x8f8>
 800a5b6:	d082      	beq.n	800a4be <_dtoa_r+0x816>
 800a5b8:	9a05      	ldr	r2, [sp, #20]
 800a5ba:	331c      	adds	r3, #28
 800a5bc:	441a      	add	r2, r3
 800a5be:	9205      	str	r2, [sp, #20]
 800a5c0:	9a06      	ldr	r2, [sp, #24]
 800a5c2:	441a      	add	r2, r3
 800a5c4:	441d      	add	r5, r3
 800a5c6:	9206      	str	r2, [sp, #24]
 800a5c8:	e779      	b.n	800a4be <_dtoa_r+0x816>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	e7f4      	b.n	800a5b8 <_dtoa_r+0x910>
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dc37      	bgt.n	800a644 <_dtoa_r+0x99c>
 800a5d4:	9b07      	ldr	r3, [sp, #28]
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	dd34      	ble.n	800a644 <_dtoa_r+0x99c>
 800a5da:	9b04      	ldr	r3, [sp, #16]
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	b963      	cbnz	r3, 800a5fc <_dtoa_r+0x954>
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	2205      	movs	r2, #5
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 fab2 	bl	800ab50 <__multadd>
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	f000 fcc7 	bl	800af84 <__mcmp>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f73f adbb 	bgt.w	800a172 <_dtoa_r+0x4ca>
 800a5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fe:	9d00      	ldr	r5, [sp, #0]
 800a600:	ea6f 0b03 	mvn.w	fp, r3
 800a604:	f04f 0800 	mov.w	r8, #0
 800a608:	4631      	mov	r1, r6
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fa7e 	bl	800ab0c <_Bfree>
 800a610:	2f00      	cmp	r7, #0
 800a612:	f43f aeab 	beq.w	800a36c <_dtoa_r+0x6c4>
 800a616:	f1b8 0f00 	cmp.w	r8, #0
 800a61a:	d005      	beq.n	800a628 <_dtoa_r+0x980>
 800a61c:	45b8      	cmp	r8, r7
 800a61e:	d003      	beq.n	800a628 <_dtoa_r+0x980>
 800a620:	4641      	mov	r1, r8
 800a622:	4620      	mov	r0, r4
 800a624:	f000 fa72 	bl	800ab0c <_Bfree>
 800a628:	4639      	mov	r1, r7
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 fa6e 	bl	800ab0c <_Bfree>
 800a630:	e69c      	b.n	800a36c <_dtoa_r+0x6c4>
 800a632:	2600      	movs	r6, #0
 800a634:	4637      	mov	r7, r6
 800a636:	e7e1      	b.n	800a5fc <_dtoa_r+0x954>
 800a638:	46bb      	mov	fp, r7
 800a63a:	4637      	mov	r7, r6
 800a63c:	e599      	b.n	800a172 <_dtoa_r+0x4ca>
 800a63e:	bf00      	nop
 800a640:	40240000 	.word	0x40240000
 800a644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 80c8 	beq.w	800a7dc <_dtoa_r+0xb34>
 800a64c:	9b04      	ldr	r3, [sp, #16]
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	2d00      	cmp	r5, #0
 800a652:	dd05      	ble.n	800a660 <_dtoa_r+0x9b8>
 800a654:	4639      	mov	r1, r7
 800a656:	462a      	mov	r2, r5
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fc27 	bl	800aeac <__lshift>
 800a65e:	4607      	mov	r7, r0
 800a660:	f1b8 0f00 	cmp.w	r8, #0
 800a664:	d05b      	beq.n	800a71e <_dtoa_r+0xa76>
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fa0f 	bl	800aa8c <_Balloc>
 800a66e:	4605      	mov	r5, r0
 800a670:	b928      	cbnz	r0, 800a67e <_dtoa_r+0x9d6>
 800a672:	4b83      	ldr	r3, [pc, #524]	; (800a880 <_dtoa_r+0xbd8>)
 800a674:	4602      	mov	r2, r0
 800a676:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a67a:	f7ff bb2e 	b.w	8009cda <_dtoa_r+0x32>
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	3202      	adds	r2, #2
 800a682:	0092      	lsls	r2, r2, #2
 800a684:	f107 010c 	add.w	r1, r7, #12
 800a688:	300c      	adds	r0, #12
 800a68a:	f000 ffab 	bl	800b5e4 <memcpy>
 800a68e:	2201      	movs	r2, #1
 800a690:	4629      	mov	r1, r5
 800a692:	4620      	mov	r0, r4
 800a694:	f000 fc0a 	bl	800aeac <__lshift>
 800a698:	9b00      	ldr	r3, [sp, #0]
 800a69a:	3301      	adds	r3, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	9308      	str	r3, [sp, #32]
 800a6a6:	9b02      	ldr	r3, [sp, #8]
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	46b8      	mov	r8, r7
 800a6ae:	9306      	str	r3, [sp, #24]
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	9b04      	ldr	r3, [sp, #16]
 800a6b4:	4631      	mov	r1, r6
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	9301      	str	r3, [sp, #4]
 800a6bc:	f7ff fa6a 	bl	8009b94 <quorem>
 800a6c0:	4641      	mov	r1, r8
 800a6c2:	9002      	str	r0, [sp, #8]
 800a6c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a6c8:	4650      	mov	r0, sl
 800a6ca:	f000 fc5b 	bl	800af84 <__mcmp>
 800a6ce:	463a      	mov	r2, r7
 800a6d0:	9005      	str	r0, [sp, #20]
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f000 fc71 	bl	800afbc <__mdiff>
 800a6da:	68c2      	ldr	r2, [r0, #12]
 800a6dc:	4605      	mov	r5, r0
 800a6de:	bb02      	cbnz	r2, 800a722 <_dtoa_r+0xa7a>
 800a6e0:	4601      	mov	r1, r0
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	f000 fc4e 	bl	800af84 <__mcmp>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f0:	f000 fa0c 	bl	800ab0c <_Bfree>
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f8:	9d04      	ldr	r5, [sp, #16]
 800a6fa:	ea43 0102 	orr.w	r1, r3, r2
 800a6fe:	9b06      	ldr	r3, [sp, #24]
 800a700:	4319      	orrs	r1, r3
 800a702:	d110      	bne.n	800a726 <_dtoa_r+0xa7e>
 800a704:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a708:	d029      	beq.n	800a75e <_dtoa_r+0xab6>
 800a70a:	9b05      	ldr	r3, [sp, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	dd02      	ble.n	800a716 <_dtoa_r+0xa6e>
 800a710:	9b02      	ldr	r3, [sp, #8]
 800a712:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	f883 9000 	strb.w	r9, [r3]
 800a71c:	e774      	b.n	800a608 <_dtoa_r+0x960>
 800a71e:	4638      	mov	r0, r7
 800a720:	e7ba      	b.n	800a698 <_dtoa_r+0x9f0>
 800a722:	2201      	movs	r2, #1
 800a724:	e7e1      	b.n	800a6ea <_dtoa_r+0xa42>
 800a726:	9b05      	ldr	r3, [sp, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	db04      	blt.n	800a736 <_dtoa_r+0xa8e>
 800a72c:	9907      	ldr	r1, [sp, #28]
 800a72e:	430b      	orrs	r3, r1
 800a730:	9906      	ldr	r1, [sp, #24]
 800a732:	430b      	orrs	r3, r1
 800a734:	d120      	bne.n	800a778 <_dtoa_r+0xad0>
 800a736:	2a00      	cmp	r2, #0
 800a738:	dded      	ble.n	800a716 <_dtoa_r+0xa6e>
 800a73a:	4651      	mov	r1, sl
 800a73c:	2201      	movs	r2, #1
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 fbb4 	bl	800aeac <__lshift>
 800a744:	4631      	mov	r1, r6
 800a746:	4682      	mov	sl, r0
 800a748:	f000 fc1c 	bl	800af84 <__mcmp>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	dc03      	bgt.n	800a758 <_dtoa_r+0xab0>
 800a750:	d1e1      	bne.n	800a716 <_dtoa_r+0xa6e>
 800a752:	f019 0f01 	tst.w	r9, #1
 800a756:	d0de      	beq.n	800a716 <_dtoa_r+0xa6e>
 800a758:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a75c:	d1d8      	bne.n	800a710 <_dtoa_r+0xa68>
 800a75e:	9a01      	ldr	r2, [sp, #4]
 800a760:	2339      	movs	r3, #57	; 0x39
 800a762:	7013      	strb	r3, [r2, #0]
 800a764:	462b      	mov	r3, r5
 800a766:	461d      	mov	r5, r3
 800a768:	3b01      	subs	r3, #1
 800a76a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a76e:	2a39      	cmp	r2, #57	; 0x39
 800a770:	d06c      	beq.n	800a84c <_dtoa_r+0xba4>
 800a772:	3201      	adds	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	e747      	b.n	800a608 <_dtoa_r+0x960>
 800a778:	2a00      	cmp	r2, #0
 800a77a:	dd07      	ble.n	800a78c <_dtoa_r+0xae4>
 800a77c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a780:	d0ed      	beq.n	800a75e <_dtoa_r+0xab6>
 800a782:	9a01      	ldr	r2, [sp, #4]
 800a784:	f109 0301 	add.w	r3, r9, #1
 800a788:	7013      	strb	r3, [r2, #0]
 800a78a:	e73d      	b.n	800a608 <_dtoa_r+0x960>
 800a78c:	9b04      	ldr	r3, [sp, #16]
 800a78e:	9a08      	ldr	r2, [sp, #32]
 800a790:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a794:	4293      	cmp	r3, r2
 800a796:	d043      	beq.n	800a820 <_dtoa_r+0xb78>
 800a798:	4651      	mov	r1, sl
 800a79a:	2300      	movs	r3, #0
 800a79c:	220a      	movs	r2, #10
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 f9d6 	bl	800ab50 <__multadd>
 800a7a4:	45b8      	cmp	r8, r7
 800a7a6:	4682      	mov	sl, r0
 800a7a8:	f04f 0300 	mov.w	r3, #0
 800a7ac:	f04f 020a 	mov.w	r2, #10
 800a7b0:	4641      	mov	r1, r8
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	d107      	bne.n	800a7c6 <_dtoa_r+0xb1e>
 800a7b6:	f000 f9cb 	bl	800ab50 <__multadd>
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	4607      	mov	r7, r0
 800a7be:	9b04      	ldr	r3, [sp, #16]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	e775      	b.n	800a6b2 <_dtoa_r+0xa0a>
 800a7c6:	f000 f9c3 	bl	800ab50 <__multadd>
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	220a      	movs	r2, #10
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 f9bc 	bl	800ab50 <__multadd>
 800a7d8:	4607      	mov	r7, r0
 800a7da:	e7f0      	b.n	800a7be <_dtoa_r+0xb16>
 800a7dc:	9b04      	ldr	r3, [sp, #16]
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	9d00      	ldr	r5, [sp, #0]
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4650      	mov	r0, sl
 800a7e6:	f7ff f9d5 	bl	8009b94 <quorem>
 800a7ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a7ee:	9b00      	ldr	r3, [sp, #0]
 800a7f0:	f805 9b01 	strb.w	r9, [r5], #1
 800a7f4:	1aea      	subs	r2, r5, r3
 800a7f6:	9b01      	ldr	r3, [sp, #4]
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	dd07      	ble.n	800a80c <_dtoa_r+0xb64>
 800a7fc:	4651      	mov	r1, sl
 800a7fe:	2300      	movs	r3, #0
 800a800:	220a      	movs	r2, #10
 800a802:	4620      	mov	r0, r4
 800a804:	f000 f9a4 	bl	800ab50 <__multadd>
 800a808:	4682      	mov	sl, r0
 800a80a:	e7ea      	b.n	800a7e2 <_dtoa_r+0xb3a>
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	bfc8      	it	gt
 800a812:	461d      	movgt	r5, r3
 800a814:	9b00      	ldr	r3, [sp, #0]
 800a816:	bfd8      	it	le
 800a818:	2501      	movle	r5, #1
 800a81a:	441d      	add	r5, r3
 800a81c:	f04f 0800 	mov.w	r8, #0
 800a820:	4651      	mov	r1, sl
 800a822:	2201      	movs	r2, #1
 800a824:	4620      	mov	r0, r4
 800a826:	f000 fb41 	bl	800aeac <__lshift>
 800a82a:	4631      	mov	r1, r6
 800a82c:	4682      	mov	sl, r0
 800a82e:	f000 fba9 	bl	800af84 <__mcmp>
 800a832:	2800      	cmp	r0, #0
 800a834:	dc96      	bgt.n	800a764 <_dtoa_r+0xabc>
 800a836:	d102      	bne.n	800a83e <_dtoa_r+0xb96>
 800a838:	f019 0f01 	tst.w	r9, #1
 800a83c:	d192      	bne.n	800a764 <_dtoa_r+0xabc>
 800a83e:	462b      	mov	r3, r5
 800a840:	461d      	mov	r5, r3
 800a842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a846:	2a30      	cmp	r2, #48	; 0x30
 800a848:	d0fa      	beq.n	800a840 <_dtoa_r+0xb98>
 800a84a:	e6dd      	b.n	800a608 <_dtoa_r+0x960>
 800a84c:	9a00      	ldr	r2, [sp, #0]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d189      	bne.n	800a766 <_dtoa_r+0xabe>
 800a852:	f10b 0b01 	add.w	fp, fp, #1
 800a856:	2331      	movs	r3, #49	; 0x31
 800a858:	e796      	b.n	800a788 <_dtoa_r+0xae0>
 800a85a:	4b0a      	ldr	r3, [pc, #40]	; (800a884 <_dtoa_r+0xbdc>)
 800a85c:	f7ff ba99 	b.w	8009d92 <_dtoa_r+0xea>
 800a860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a862:	2b00      	cmp	r3, #0
 800a864:	f47f aa6d 	bne.w	8009d42 <_dtoa_r+0x9a>
 800a868:	4b07      	ldr	r3, [pc, #28]	; (800a888 <_dtoa_r+0xbe0>)
 800a86a:	f7ff ba92 	b.w	8009d92 <_dtoa_r+0xea>
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	dcb5      	bgt.n	800a7e0 <_dtoa_r+0xb38>
 800a874:	9b07      	ldr	r3, [sp, #28]
 800a876:	2b02      	cmp	r3, #2
 800a878:	f73f aeb1 	bgt.w	800a5de <_dtoa_r+0x936>
 800a87c:	e7b0      	b.n	800a7e0 <_dtoa_r+0xb38>
 800a87e:	bf00      	nop
 800a880:	0800bde0 	.word	0x0800bde0
 800a884:	0800bd40 	.word	0x0800bd40
 800a888:	0800bd64 	.word	0x0800bd64

0800a88c <_free_r>:
 800a88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a88e:	2900      	cmp	r1, #0
 800a890:	d044      	beq.n	800a91c <_free_r+0x90>
 800a892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a896:	9001      	str	r0, [sp, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f1a1 0404 	sub.w	r4, r1, #4
 800a89e:	bfb8      	it	lt
 800a8a0:	18e4      	addlt	r4, r4, r3
 800a8a2:	f000 f8e7 	bl	800aa74 <__malloc_lock>
 800a8a6:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <_free_r+0x94>)
 800a8a8:	9801      	ldr	r0, [sp, #4]
 800a8aa:	6813      	ldr	r3, [r2, #0]
 800a8ac:	b933      	cbnz	r3, 800a8bc <_free_r+0x30>
 800a8ae:	6063      	str	r3, [r4, #4]
 800a8b0:	6014      	str	r4, [r2, #0]
 800a8b2:	b003      	add	sp, #12
 800a8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8b8:	f000 b8e2 	b.w	800aa80 <__malloc_unlock>
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	d908      	bls.n	800a8d2 <_free_r+0x46>
 800a8c0:	6825      	ldr	r5, [r4, #0]
 800a8c2:	1961      	adds	r1, r4, r5
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	bf01      	itttt	eq
 800a8c8:	6819      	ldreq	r1, [r3, #0]
 800a8ca:	685b      	ldreq	r3, [r3, #4]
 800a8cc:	1949      	addeq	r1, r1, r5
 800a8ce:	6021      	streq	r1, [r4, #0]
 800a8d0:	e7ed      	b.n	800a8ae <_free_r+0x22>
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	b10b      	cbz	r3, 800a8dc <_free_r+0x50>
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d9fa      	bls.n	800a8d2 <_free_r+0x46>
 800a8dc:	6811      	ldr	r1, [r2, #0]
 800a8de:	1855      	adds	r5, r2, r1
 800a8e0:	42a5      	cmp	r5, r4
 800a8e2:	d10b      	bne.n	800a8fc <_free_r+0x70>
 800a8e4:	6824      	ldr	r4, [r4, #0]
 800a8e6:	4421      	add	r1, r4
 800a8e8:	1854      	adds	r4, r2, r1
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	6011      	str	r1, [r2, #0]
 800a8ee:	d1e0      	bne.n	800a8b2 <_free_r+0x26>
 800a8f0:	681c      	ldr	r4, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	6053      	str	r3, [r2, #4]
 800a8f6:	440c      	add	r4, r1
 800a8f8:	6014      	str	r4, [r2, #0]
 800a8fa:	e7da      	b.n	800a8b2 <_free_r+0x26>
 800a8fc:	d902      	bls.n	800a904 <_free_r+0x78>
 800a8fe:	230c      	movs	r3, #12
 800a900:	6003      	str	r3, [r0, #0]
 800a902:	e7d6      	b.n	800a8b2 <_free_r+0x26>
 800a904:	6825      	ldr	r5, [r4, #0]
 800a906:	1961      	adds	r1, r4, r5
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf04      	itt	eq
 800a90c:	6819      	ldreq	r1, [r3, #0]
 800a90e:	685b      	ldreq	r3, [r3, #4]
 800a910:	6063      	str	r3, [r4, #4]
 800a912:	bf04      	itt	eq
 800a914:	1949      	addeq	r1, r1, r5
 800a916:	6021      	streq	r1, [r4, #0]
 800a918:	6054      	str	r4, [r2, #4]
 800a91a:	e7ca      	b.n	800a8b2 <_free_r+0x26>
 800a91c:	b003      	add	sp, #12
 800a91e:	bd30      	pop	{r4, r5, pc}
 800a920:	200020e0 	.word	0x200020e0

0800a924 <malloc>:
 800a924:	4b02      	ldr	r3, [pc, #8]	; (800a930 <malloc+0xc>)
 800a926:	4601      	mov	r1, r0
 800a928:	6818      	ldr	r0, [r3, #0]
 800a92a:	f000 b823 	b.w	800a974 <_malloc_r>
 800a92e:	bf00      	nop
 800a930:	20000154 	.word	0x20000154

0800a934 <sbrk_aligned>:
 800a934:	b570      	push	{r4, r5, r6, lr}
 800a936:	4e0e      	ldr	r6, [pc, #56]	; (800a970 <sbrk_aligned+0x3c>)
 800a938:	460c      	mov	r4, r1
 800a93a:	6831      	ldr	r1, [r6, #0]
 800a93c:	4605      	mov	r5, r0
 800a93e:	b911      	cbnz	r1, 800a946 <sbrk_aligned+0x12>
 800a940:	f000 fe40 	bl	800b5c4 <_sbrk_r>
 800a944:	6030      	str	r0, [r6, #0]
 800a946:	4621      	mov	r1, r4
 800a948:	4628      	mov	r0, r5
 800a94a:	f000 fe3b 	bl	800b5c4 <_sbrk_r>
 800a94e:	1c43      	adds	r3, r0, #1
 800a950:	d00a      	beq.n	800a968 <sbrk_aligned+0x34>
 800a952:	1cc4      	adds	r4, r0, #3
 800a954:	f024 0403 	bic.w	r4, r4, #3
 800a958:	42a0      	cmp	r0, r4
 800a95a:	d007      	beq.n	800a96c <sbrk_aligned+0x38>
 800a95c:	1a21      	subs	r1, r4, r0
 800a95e:	4628      	mov	r0, r5
 800a960:	f000 fe30 	bl	800b5c4 <_sbrk_r>
 800a964:	3001      	adds	r0, #1
 800a966:	d101      	bne.n	800a96c <sbrk_aligned+0x38>
 800a968:	f04f 34ff 	mov.w	r4, #4294967295
 800a96c:	4620      	mov	r0, r4
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	200020e4 	.word	0x200020e4

0800a974 <_malloc_r>:
 800a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a978:	1ccd      	adds	r5, r1, #3
 800a97a:	f025 0503 	bic.w	r5, r5, #3
 800a97e:	3508      	adds	r5, #8
 800a980:	2d0c      	cmp	r5, #12
 800a982:	bf38      	it	cc
 800a984:	250c      	movcc	r5, #12
 800a986:	2d00      	cmp	r5, #0
 800a988:	4607      	mov	r7, r0
 800a98a:	db01      	blt.n	800a990 <_malloc_r+0x1c>
 800a98c:	42a9      	cmp	r1, r5
 800a98e:	d905      	bls.n	800a99c <_malloc_r+0x28>
 800a990:	230c      	movs	r3, #12
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	2600      	movs	r6, #0
 800a996:	4630      	mov	r0, r6
 800a998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a99c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa70 <_malloc_r+0xfc>
 800a9a0:	f000 f868 	bl	800aa74 <__malloc_lock>
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	461c      	mov	r4, r3
 800a9aa:	bb5c      	cbnz	r4, 800aa04 <_malloc_r+0x90>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	f7ff ffc0 	bl	800a934 <sbrk_aligned>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	d155      	bne.n	800aa66 <_malloc_r+0xf2>
 800a9ba:	f8d8 4000 	ldr.w	r4, [r8]
 800a9be:	4626      	mov	r6, r4
 800a9c0:	2e00      	cmp	r6, #0
 800a9c2:	d145      	bne.n	800aa50 <_malloc_r+0xdc>
 800a9c4:	2c00      	cmp	r4, #0
 800a9c6:	d048      	beq.n	800aa5a <_malloc_r+0xe6>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	eb04 0903 	add.w	r9, r4, r3
 800a9d2:	f000 fdf7 	bl	800b5c4 <_sbrk_r>
 800a9d6:	4581      	cmp	r9, r0
 800a9d8:	d13f      	bne.n	800aa5a <_malloc_r+0xe6>
 800a9da:	6821      	ldr	r1, [r4, #0]
 800a9dc:	1a6d      	subs	r5, r5, r1
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	f7ff ffa7 	bl	800a934 <sbrk_aligned>
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d037      	beq.n	800aa5a <_malloc_r+0xe6>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	442b      	add	r3, r5
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d038      	beq.n	800aa6a <_malloc_r+0xf6>
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	42a2      	cmp	r2, r4
 800a9fc:	d12b      	bne.n	800aa56 <_malloc_r+0xe2>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	605a      	str	r2, [r3, #4]
 800aa02:	e00f      	b.n	800aa24 <_malloc_r+0xb0>
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	1b52      	subs	r2, r2, r5
 800aa08:	d41f      	bmi.n	800aa4a <_malloc_r+0xd6>
 800aa0a:	2a0b      	cmp	r2, #11
 800aa0c:	d917      	bls.n	800aa3e <_malloc_r+0xca>
 800aa0e:	1961      	adds	r1, r4, r5
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	6025      	str	r5, [r4, #0]
 800aa14:	bf18      	it	ne
 800aa16:	6059      	strne	r1, [r3, #4]
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	bf08      	it	eq
 800aa1c:	f8c8 1000 	streq.w	r1, [r8]
 800aa20:	5162      	str	r2, [r4, r5]
 800aa22:	604b      	str	r3, [r1, #4]
 800aa24:	4638      	mov	r0, r7
 800aa26:	f104 060b 	add.w	r6, r4, #11
 800aa2a:	f000 f829 	bl	800aa80 <__malloc_unlock>
 800aa2e:	f026 0607 	bic.w	r6, r6, #7
 800aa32:	1d23      	adds	r3, r4, #4
 800aa34:	1af2      	subs	r2, r6, r3
 800aa36:	d0ae      	beq.n	800a996 <_malloc_r+0x22>
 800aa38:	1b9b      	subs	r3, r3, r6
 800aa3a:	50a3      	str	r3, [r4, r2]
 800aa3c:	e7ab      	b.n	800a996 <_malloc_r+0x22>
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	6862      	ldr	r2, [r4, #4]
 800aa42:	d1dd      	bne.n	800aa00 <_malloc_r+0x8c>
 800aa44:	f8c8 2000 	str.w	r2, [r8]
 800aa48:	e7ec      	b.n	800aa24 <_malloc_r+0xb0>
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	6864      	ldr	r4, [r4, #4]
 800aa4e:	e7ac      	b.n	800a9aa <_malloc_r+0x36>
 800aa50:	4634      	mov	r4, r6
 800aa52:	6876      	ldr	r6, [r6, #4]
 800aa54:	e7b4      	b.n	800a9c0 <_malloc_r+0x4c>
 800aa56:	4613      	mov	r3, r2
 800aa58:	e7cc      	b.n	800a9f4 <_malloc_r+0x80>
 800aa5a:	230c      	movs	r3, #12
 800aa5c:	603b      	str	r3, [r7, #0]
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f000 f80e 	bl	800aa80 <__malloc_unlock>
 800aa64:	e797      	b.n	800a996 <_malloc_r+0x22>
 800aa66:	6025      	str	r5, [r4, #0]
 800aa68:	e7dc      	b.n	800aa24 <_malloc_r+0xb0>
 800aa6a:	605b      	str	r3, [r3, #4]
 800aa6c:	deff      	udf	#255	; 0xff
 800aa6e:	bf00      	nop
 800aa70:	200020e0 	.word	0x200020e0

0800aa74 <__malloc_lock>:
 800aa74:	4801      	ldr	r0, [pc, #4]	; (800aa7c <__malloc_lock+0x8>)
 800aa76:	f7ff b88b 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 800aa7a:	bf00      	nop
 800aa7c:	200020dc 	.word	0x200020dc

0800aa80 <__malloc_unlock>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__malloc_unlock+0x8>)
 800aa82:	f7ff b886 	b.w	8009b92 <__retarget_lock_release_recursive>
 800aa86:	bf00      	nop
 800aa88:	200020dc 	.word	0x200020dc

0800aa8c <_Balloc>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	69c6      	ldr	r6, [r0, #28]
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	b976      	cbnz	r6, 800aab4 <_Balloc+0x28>
 800aa96:	2010      	movs	r0, #16
 800aa98:	f7ff ff44 	bl	800a924 <malloc>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	61e0      	str	r0, [r4, #28]
 800aaa0:	b920      	cbnz	r0, 800aaac <_Balloc+0x20>
 800aaa2:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <_Balloc+0x78>)
 800aaa4:	4818      	ldr	r0, [pc, #96]	; (800ab08 <_Balloc+0x7c>)
 800aaa6:	216b      	movs	r1, #107	; 0x6b
 800aaa8:	f000 fdaa 	bl	800b600 <__assert_func>
 800aaac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aab0:	6006      	str	r6, [r0, #0]
 800aab2:	60c6      	str	r6, [r0, #12]
 800aab4:	69e6      	ldr	r6, [r4, #28]
 800aab6:	68f3      	ldr	r3, [r6, #12]
 800aab8:	b183      	cbz	r3, 800aadc <_Balloc+0x50>
 800aaba:	69e3      	ldr	r3, [r4, #28]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aac2:	b9b8      	cbnz	r0, 800aaf4 <_Balloc+0x68>
 800aac4:	2101      	movs	r1, #1
 800aac6:	fa01 f605 	lsl.w	r6, r1, r5
 800aaca:	1d72      	adds	r2, r6, #5
 800aacc:	0092      	lsls	r2, r2, #2
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 fdb4 	bl	800b63c <_calloc_r>
 800aad4:	b160      	cbz	r0, 800aaf0 <_Balloc+0x64>
 800aad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aada:	e00e      	b.n	800aafa <_Balloc+0x6e>
 800aadc:	2221      	movs	r2, #33	; 0x21
 800aade:	2104      	movs	r1, #4
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 fdab 	bl	800b63c <_calloc_r>
 800aae6:	69e3      	ldr	r3, [r4, #28]
 800aae8:	60f0      	str	r0, [r6, #12]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e4      	bne.n	800aaba <_Balloc+0x2e>
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	6802      	ldr	r2, [r0, #0]
 800aaf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aafa:	2300      	movs	r3, #0
 800aafc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab00:	e7f7      	b.n	800aaf2 <_Balloc+0x66>
 800ab02:	bf00      	nop
 800ab04:	0800bd71 	.word	0x0800bd71
 800ab08:	0800bdf1 	.word	0x0800bdf1

0800ab0c <_Bfree>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	69c6      	ldr	r6, [r0, #28]
 800ab10:	4605      	mov	r5, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	b976      	cbnz	r6, 800ab34 <_Bfree+0x28>
 800ab16:	2010      	movs	r0, #16
 800ab18:	f7ff ff04 	bl	800a924 <malloc>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	61e8      	str	r0, [r5, #28]
 800ab20:	b920      	cbnz	r0, 800ab2c <_Bfree+0x20>
 800ab22:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <_Bfree+0x3c>)
 800ab24:	4809      	ldr	r0, [pc, #36]	; (800ab4c <_Bfree+0x40>)
 800ab26:	218f      	movs	r1, #143	; 0x8f
 800ab28:	f000 fd6a 	bl	800b600 <__assert_func>
 800ab2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab30:	6006      	str	r6, [r0, #0]
 800ab32:	60c6      	str	r6, [r0, #12]
 800ab34:	b13c      	cbz	r4, 800ab46 <_Bfree+0x3a>
 800ab36:	69eb      	ldr	r3, [r5, #28]
 800ab38:	6862      	ldr	r2, [r4, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab40:	6021      	str	r1, [r4, #0]
 800ab42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	0800bd71 	.word	0x0800bd71
 800ab4c:	0800bdf1 	.word	0x0800bdf1

0800ab50 <__multadd>:
 800ab50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab54:	690d      	ldr	r5, [r1, #16]
 800ab56:	4607      	mov	r7, r0
 800ab58:	460c      	mov	r4, r1
 800ab5a:	461e      	mov	r6, r3
 800ab5c:	f101 0c14 	add.w	ip, r1, #20
 800ab60:	2000      	movs	r0, #0
 800ab62:	f8dc 3000 	ldr.w	r3, [ip]
 800ab66:	b299      	uxth	r1, r3
 800ab68:	fb02 6101 	mla	r1, r2, r1, r6
 800ab6c:	0c1e      	lsrs	r6, r3, #16
 800ab6e:	0c0b      	lsrs	r3, r1, #16
 800ab70:	fb02 3306 	mla	r3, r2, r6, r3
 800ab74:	b289      	uxth	r1, r1
 800ab76:	3001      	adds	r0, #1
 800ab78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab7c:	4285      	cmp	r5, r0
 800ab7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab86:	dcec      	bgt.n	800ab62 <__multadd+0x12>
 800ab88:	b30e      	cbz	r6, 800abce <__multadd+0x7e>
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	42ab      	cmp	r3, r5
 800ab8e:	dc19      	bgt.n	800abc4 <__multadd+0x74>
 800ab90:	6861      	ldr	r1, [r4, #4]
 800ab92:	4638      	mov	r0, r7
 800ab94:	3101      	adds	r1, #1
 800ab96:	f7ff ff79 	bl	800aa8c <_Balloc>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	b928      	cbnz	r0, 800abaa <__multadd+0x5a>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	4b0c      	ldr	r3, [pc, #48]	; (800abd4 <__multadd+0x84>)
 800aba2:	480d      	ldr	r0, [pc, #52]	; (800abd8 <__multadd+0x88>)
 800aba4:	21ba      	movs	r1, #186	; 0xba
 800aba6:	f000 fd2b 	bl	800b600 <__assert_func>
 800abaa:	6922      	ldr	r2, [r4, #16]
 800abac:	3202      	adds	r2, #2
 800abae:	f104 010c 	add.w	r1, r4, #12
 800abb2:	0092      	lsls	r2, r2, #2
 800abb4:	300c      	adds	r0, #12
 800abb6:	f000 fd15 	bl	800b5e4 <memcpy>
 800abba:	4621      	mov	r1, r4
 800abbc:	4638      	mov	r0, r7
 800abbe:	f7ff ffa5 	bl	800ab0c <_Bfree>
 800abc2:	4644      	mov	r4, r8
 800abc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abc8:	3501      	adds	r5, #1
 800abca:	615e      	str	r6, [r3, #20]
 800abcc:	6125      	str	r5, [r4, #16]
 800abce:	4620      	mov	r0, r4
 800abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd4:	0800bde0 	.word	0x0800bde0
 800abd8:	0800bdf1 	.word	0x0800bdf1

0800abdc <__hi0bits>:
 800abdc:	0c03      	lsrs	r3, r0, #16
 800abde:	041b      	lsls	r3, r3, #16
 800abe0:	b9d3      	cbnz	r3, 800ac18 <__hi0bits+0x3c>
 800abe2:	0400      	lsls	r0, r0, #16
 800abe4:	2310      	movs	r3, #16
 800abe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abea:	bf04      	itt	eq
 800abec:	0200      	lsleq	r0, r0, #8
 800abee:	3308      	addeq	r3, #8
 800abf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abf4:	bf04      	itt	eq
 800abf6:	0100      	lsleq	r0, r0, #4
 800abf8:	3304      	addeq	r3, #4
 800abfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abfe:	bf04      	itt	eq
 800ac00:	0080      	lsleq	r0, r0, #2
 800ac02:	3302      	addeq	r3, #2
 800ac04:	2800      	cmp	r0, #0
 800ac06:	db05      	blt.n	800ac14 <__hi0bits+0x38>
 800ac08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac0c:	f103 0301 	add.w	r3, r3, #1
 800ac10:	bf08      	it	eq
 800ac12:	2320      	moveq	r3, #32
 800ac14:	4618      	mov	r0, r3
 800ac16:	4770      	bx	lr
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e7e4      	b.n	800abe6 <__hi0bits+0xa>

0800ac1c <__lo0bits>:
 800ac1c:	6803      	ldr	r3, [r0, #0]
 800ac1e:	f013 0207 	ands.w	r2, r3, #7
 800ac22:	d00c      	beq.n	800ac3e <__lo0bits+0x22>
 800ac24:	07d9      	lsls	r1, r3, #31
 800ac26:	d422      	bmi.n	800ac6e <__lo0bits+0x52>
 800ac28:	079a      	lsls	r2, r3, #30
 800ac2a:	bf49      	itett	mi
 800ac2c:	085b      	lsrmi	r3, r3, #1
 800ac2e:	089b      	lsrpl	r3, r3, #2
 800ac30:	6003      	strmi	r3, [r0, #0]
 800ac32:	2201      	movmi	r2, #1
 800ac34:	bf5c      	itt	pl
 800ac36:	6003      	strpl	r3, [r0, #0]
 800ac38:	2202      	movpl	r2, #2
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4770      	bx	lr
 800ac3e:	b299      	uxth	r1, r3
 800ac40:	b909      	cbnz	r1, 800ac46 <__lo0bits+0x2a>
 800ac42:	0c1b      	lsrs	r3, r3, #16
 800ac44:	2210      	movs	r2, #16
 800ac46:	b2d9      	uxtb	r1, r3
 800ac48:	b909      	cbnz	r1, 800ac4e <__lo0bits+0x32>
 800ac4a:	3208      	adds	r2, #8
 800ac4c:	0a1b      	lsrs	r3, r3, #8
 800ac4e:	0719      	lsls	r1, r3, #28
 800ac50:	bf04      	itt	eq
 800ac52:	091b      	lsreq	r3, r3, #4
 800ac54:	3204      	addeq	r2, #4
 800ac56:	0799      	lsls	r1, r3, #30
 800ac58:	bf04      	itt	eq
 800ac5a:	089b      	lsreq	r3, r3, #2
 800ac5c:	3202      	addeq	r2, #2
 800ac5e:	07d9      	lsls	r1, r3, #31
 800ac60:	d403      	bmi.n	800ac6a <__lo0bits+0x4e>
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	f102 0201 	add.w	r2, r2, #1
 800ac68:	d003      	beq.n	800ac72 <__lo0bits+0x56>
 800ac6a:	6003      	str	r3, [r0, #0]
 800ac6c:	e7e5      	b.n	800ac3a <__lo0bits+0x1e>
 800ac6e:	2200      	movs	r2, #0
 800ac70:	e7e3      	b.n	800ac3a <__lo0bits+0x1e>
 800ac72:	2220      	movs	r2, #32
 800ac74:	e7e1      	b.n	800ac3a <__lo0bits+0x1e>
	...

0800ac78 <__i2b>:
 800ac78:	b510      	push	{r4, lr}
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	f7ff ff05 	bl	800aa8c <_Balloc>
 800ac82:	4602      	mov	r2, r0
 800ac84:	b928      	cbnz	r0, 800ac92 <__i2b+0x1a>
 800ac86:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <__i2b+0x24>)
 800ac88:	4805      	ldr	r0, [pc, #20]	; (800aca0 <__i2b+0x28>)
 800ac8a:	f240 1145 	movw	r1, #325	; 0x145
 800ac8e:	f000 fcb7 	bl	800b600 <__assert_func>
 800ac92:	2301      	movs	r3, #1
 800ac94:	6144      	str	r4, [r0, #20]
 800ac96:	6103      	str	r3, [r0, #16]
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	bf00      	nop
 800ac9c:	0800bde0 	.word	0x0800bde0
 800aca0:	0800bdf1 	.word	0x0800bdf1

0800aca4 <__multiply>:
 800aca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca8:	4691      	mov	r9, r2
 800acaa:	690a      	ldr	r2, [r1, #16]
 800acac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	bfb8      	it	lt
 800acb4:	460b      	movlt	r3, r1
 800acb6:	460c      	mov	r4, r1
 800acb8:	bfbc      	itt	lt
 800acba:	464c      	movlt	r4, r9
 800acbc:	4699      	movlt	r9, r3
 800acbe:	6927      	ldr	r7, [r4, #16]
 800acc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acc4:	68a3      	ldr	r3, [r4, #8]
 800acc6:	6861      	ldr	r1, [r4, #4]
 800acc8:	eb07 060a 	add.w	r6, r7, sl
 800accc:	42b3      	cmp	r3, r6
 800acce:	b085      	sub	sp, #20
 800acd0:	bfb8      	it	lt
 800acd2:	3101      	addlt	r1, #1
 800acd4:	f7ff feda 	bl	800aa8c <_Balloc>
 800acd8:	b930      	cbnz	r0, 800ace8 <__multiply+0x44>
 800acda:	4602      	mov	r2, r0
 800acdc:	4b44      	ldr	r3, [pc, #272]	; (800adf0 <__multiply+0x14c>)
 800acde:	4845      	ldr	r0, [pc, #276]	; (800adf4 <__multiply+0x150>)
 800ace0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ace4:	f000 fc8c 	bl	800b600 <__assert_func>
 800ace8:	f100 0514 	add.w	r5, r0, #20
 800acec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acf0:	462b      	mov	r3, r5
 800acf2:	2200      	movs	r2, #0
 800acf4:	4543      	cmp	r3, r8
 800acf6:	d321      	bcc.n	800ad3c <__multiply+0x98>
 800acf8:	f104 0314 	add.w	r3, r4, #20
 800acfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad00:	f109 0314 	add.w	r3, r9, #20
 800ad04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad08:	9202      	str	r2, [sp, #8]
 800ad0a:	1b3a      	subs	r2, r7, r4
 800ad0c:	3a15      	subs	r2, #21
 800ad0e:	f022 0203 	bic.w	r2, r2, #3
 800ad12:	3204      	adds	r2, #4
 800ad14:	f104 0115 	add.w	r1, r4, #21
 800ad18:	428f      	cmp	r7, r1
 800ad1a:	bf38      	it	cc
 800ad1c:	2204      	movcc	r2, #4
 800ad1e:	9201      	str	r2, [sp, #4]
 800ad20:	9a02      	ldr	r2, [sp, #8]
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d80c      	bhi.n	800ad42 <__multiply+0x9e>
 800ad28:	2e00      	cmp	r6, #0
 800ad2a:	dd03      	ble.n	800ad34 <__multiply+0x90>
 800ad2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d05b      	beq.n	800adec <__multiply+0x148>
 800ad34:	6106      	str	r6, [r0, #16]
 800ad36:	b005      	add	sp, #20
 800ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3c:	f843 2b04 	str.w	r2, [r3], #4
 800ad40:	e7d8      	b.n	800acf4 <__multiply+0x50>
 800ad42:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad46:	f1ba 0f00 	cmp.w	sl, #0
 800ad4a:	d024      	beq.n	800ad96 <__multiply+0xf2>
 800ad4c:	f104 0e14 	add.w	lr, r4, #20
 800ad50:	46a9      	mov	r9, r5
 800ad52:	f04f 0c00 	mov.w	ip, #0
 800ad56:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad5a:	f8d9 1000 	ldr.w	r1, [r9]
 800ad5e:	fa1f fb82 	uxth.w	fp, r2
 800ad62:	b289      	uxth	r1, r1
 800ad64:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad6c:	f8d9 2000 	ldr.w	r2, [r9]
 800ad70:	4461      	add	r1, ip
 800ad72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad76:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad7e:	b289      	uxth	r1, r1
 800ad80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad84:	4577      	cmp	r7, lr
 800ad86:	f849 1b04 	str.w	r1, [r9], #4
 800ad8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad8e:	d8e2      	bhi.n	800ad56 <__multiply+0xb2>
 800ad90:	9a01      	ldr	r2, [sp, #4]
 800ad92:	f845 c002 	str.w	ip, [r5, r2]
 800ad96:	9a03      	ldr	r2, [sp, #12]
 800ad98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	f1b9 0f00 	cmp.w	r9, #0
 800ada2:	d021      	beq.n	800ade8 <__multiply+0x144>
 800ada4:	6829      	ldr	r1, [r5, #0]
 800ada6:	f104 0c14 	add.w	ip, r4, #20
 800adaa:	46ae      	mov	lr, r5
 800adac:	f04f 0a00 	mov.w	sl, #0
 800adb0:	f8bc b000 	ldrh.w	fp, [ip]
 800adb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800adb8:	fb09 220b 	mla	r2, r9, fp, r2
 800adbc:	4452      	add	r2, sl
 800adbe:	b289      	uxth	r1, r1
 800adc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800adc4:	f84e 1b04 	str.w	r1, [lr], #4
 800adc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800adcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800add0:	f8be 1000 	ldrh.w	r1, [lr]
 800add4:	fb09 110a 	mla	r1, r9, sl, r1
 800add8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800addc:	4567      	cmp	r7, ip
 800adde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ade2:	d8e5      	bhi.n	800adb0 <__multiply+0x10c>
 800ade4:	9a01      	ldr	r2, [sp, #4]
 800ade6:	50a9      	str	r1, [r5, r2]
 800ade8:	3504      	adds	r5, #4
 800adea:	e799      	b.n	800ad20 <__multiply+0x7c>
 800adec:	3e01      	subs	r6, #1
 800adee:	e79b      	b.n	800ad28 <__multiply+0x84>
 800adf0:	0800bde0 	.word	0x0800bde0
 800adf4:	0800bdf1 	.word	0x0800bdf1

0800adf8 <__pow5mult>:
 800adf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adfc:	4615      	mov	r5, r2
 800adfe:	f012 0203 	ands.w	r2, r2, #3
 800ae02:	4606      	mov	r6, r0
 800ae04:	460f      	mov	r7, r1
 800ae06:	d007      	beq.n	800ae18 <__pow5mult+0x20>
 800ae08:	4c25      	ldr	r4, [pc, #148]	; (800aea0 <__pow5mult+0xa8>)
 800ae0a:	3a01      	subs	r2, #1
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae12:	f7ff fe9d 	bl	800ab50 <__multadd>
 800ae16:	4607      	mov	r7, r0
 800ae18:	10ad      	asrs	r5, r5, #2
 800ae1a:	d03d      	beq.n	800ae98 <__pow5mult+0xa0>
 800ae1c:	69f4      	ldr	r4, [r6, #28]
 800ae1e:	b97c      	cbnz	r4, 800ae40 <__pow5mult+0x48>
 800ae20:	2010      	movs	r0, #16
 800ae22:	f7ff fd7f 	bl	800a924 <malloc>
 800ae26:	4602      	mov	r2, r0
 800ae28:	61f0      	str	r0, [r6, #28]
 800ae2a:	b928      	cbnz	r0, 800ae38 <__pow5mult+0x40>
 800ae2c:	4b1d      	ldr	r3, [pc, #116]	; (800aea4 <__pow5mult+0xac>)
 800ae2e:	481e      	ldr	r0, [pc, #120]	; (800aea8 <__pow5mult+0xb0>)
 800ae30:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ae34:	f000 fbe4 	bl	800b600 <__assert_func>
 800ae38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae3c:	6004      	str	r4, [r0, #0]
 800ae3e:	60c4      	str	r4, [r0, #12]
 800ae40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ae44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae48:	b94c      	cbnz	r4, 800ae5e <__pow5mult+0x66>
 800ae4a:	f240 2171 	movw	r1, #625	; 0x271
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7ff ff12 	bl	800ac78 <__i2b>
 800ae54:	2300      	movs	r3, #0
 800ae56:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	6003      	str	r3, [r0, #0]
 800ae5e:	f04f 0900 	mov.w	r9, #0
 800ae62:	07eb      	lsls	r3, r5, #31
 800ae64:	d50a      	bpl.n	800ae7c <__pow5mult+0x84>
 800ae66:	4639      	mov	r1, r7
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f7ff ff1a 	bl	800aca4 <__multiply>
 800ae70:	4639      	mov	r1, r7
 800ae72:	4680      	mov	r8, r0
 800ae74:	4630      	mov	r0, r6
 800ae76:	f7ff fe49 	bl	800ab0c <_Bfree>
 800ae7a:	4647      	mov	r7, r8
 800ae7c:	106d      	asrs	r5, r5, #1
 800ae7e:	d00b      	beq.n	800ae98 <__pow5mult+0xa0>
 800ae80:	6820      	ldr	r0, [r4, #0]
 800ae82:	b938      	cbnz	r0, 800ae94 <__pow5mult+0x9c>
 800ae84:	4622      	mov	r2, r4
 800ae86:	4621      	mov	r1, r4
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f7ff ff0b 	bl	800aca4 <__multiply>
 800ae8e:	6020      	str	r0, [r4, #0]
 800ae90:	f8c0 9000 	str.w	r9, [r0]
 800ae94:	4604      	mov	r4, r0
 800ae96:	e7e4      	b.n	800ae62 <__pow5mult+0x6a>
 800ae98:	4638      	mov	r0, r7
 800ae9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae9e:	bf00      	nop
 800aea0:	0800bf40 	.word	0x0800bf40
 800aea4:	0800bd71 	.word	0x0800bd71
 800aea8:	0800bdf1 	.word	0x0800bdf1

0800aeac <__lshift>:
 800aeac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb0:	460c      	mov	r4, r1
 800aeb2:	6849      	ldr	r1, [r1, #4]
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aeba:	68a3      	ldr	r3, [r4, #8]
 800aebc:	4607      	mov	r7, r0
 800aebe:	4691      	mov	r9, r2
 800aec0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aec4:	f108 0601 	add.w	r6, r8, #1
 800aec8:	42b3      	cmp	r3, r6
 800aeca:	db0b      	blt.n	800aee4 <__lshift+0x38>
 800aecc:	4638      	mov	r0, r7
 800aece:	f7ff fddd 	bl	800aa8c <_Balloc>
 800aed2:	4605      	mov	r5, r0
 800aed4:	b948      	cbnz	r0, 800aeea <__lshift+0x3e>
 800aed6:	4602      	mov	r2, r0
 800aed8:	4b28      	ldr	r3, [pc, #160]	; (800af7c <__lshift+0xd0>)
 800aeda:	4829      	ldr	r0, [pc, #164]	; (800af80 <__lshift+0xd4>)
 800aedc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aee0:	f000 fb8e 	bl	800b600 <__assert_func>
 800aee4:	3101      	adds	r1, #1
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	e7ee      	b.n	800aec8 <__lshift+0x1c>
 800aeea:	2300      	movs	r3, #0
 800aeec:	f100 0114 	add.w	r1, r0, #20
 800aef0:	f100 0210 	add.w	r2, r0, #16
 800aef4:	4618      	mov	r0, r3
 800aef6:	4553      	cmp	r3, sl
 800aef8:	db33      	blt.n	800af62 <__lshift+0xb6>
 800aefa:	6920      	ldr	r0, [r4, #16]
 800aefc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af00:	f104 0314 	add.w	r3, r4, #20
 800af04:	f019 091f 	ands.w	r9, r9, #31
 800af08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af10:	d02b      	beq.n	800af6a <__lshift+0xbe>
 800af12:	f1c9 0e20 	rsb	lr, r9, #32
 800af16:	468a      	mov	sl, r1
 800af18:	2200      	movs	r2, #0
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	fa00 f009 	lsl.w	r0, r0, r9
 800af20:	4310      	orrs	r0, r2
 800af22:	f84a 0b04 	str.w	r0, [sl], #4
 800af26:	f853 2b04 	ldr.w	r2, [r3], #4
 800af2a:	459c      	cmp	ip, r3
 800af2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800af30:	d8f3      	bhi.n	800af1a <__lshift+0x6e>
 800af32:	ebac 0304 	sub.w	r3, ip, r4
 800af36:	3b15      	subs	r3, #21
 800af38:	f023 0303 	bic.w	r3, r3, #3
 800af3c:	3304      	adds	r3, #4
 800af3e:	f104 0015 	add.w	r0, r4, #21
 800af42:	4584      	cmp	ip, r0
 800af44:	bf38      	it	cc
 800af46:	2304      	movcc	r3, #4
 800af48:	50ca      	str	r2, [r1, r3]
 800af4a:	b10a      	cbz	r2, 800af50 <__lshift+0xa4>
 800af4c:	f108 0602 	add.w	r6, r8, #2
 800af50:	3e01      	subs	r6, #1
 800af52:	4638      	mov	r0, r7
 800af54:	612e      	str	r6, [r5, #16]
 800af56:	4621      	mov	r1, r4
 800af58:	f7ff fdd8 	bl	800ab0c <_Bfree>
 800af5c:	4628      	mov	r0, r5
 800af5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af62:	f842 0f04 	str.w	r0, [r2, #4]!
 800af66:	3301      	adds	r3, #1
 800af68:	e7c5      	b.n	800aef6 <__lshift+0x4a>
 800af6a:	3904      	subs	r1, #4
 800af6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af70:	f841 2f04 	str.w	r2, [r1, #4]!
 800af74:	459c      	cmp	ip, r3
 800af76:	d8f9      	bhi.n	800af6c <__lshift+0xc0>
 800af78:	e7ea      	b.n	800af50 <__lshift+0xa4>
 800af7a:	bf00      	nop
 800af7c:	0800bde0 	.word	0x0800bde0
 800af80:	0800bdf1 	.word	0x0800bdf1

0800af84 <__mcmp>:
 800af84:	b530      	push	{r4, r5, lr}
 800af86:	6902      	ldr	r2, [r0, #16]
 800af88:	690c      	ldr	r4, [r1, #16]
 800af8a:	1b12      	subs	r2, r2, r4
 800af8c:	d10e      	bne.n	800afac <__mcmp+0x28>
 800af8e:	f100 0314 	add.w	r3, r0, #20
 800af92:	3114      	adds	r1, #20
 800af94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afa4:	42a5      	cmp	r5, r4
 800afa6:	d003      	beq.n	800afb0 <__mcmp+0x2c>
 800afa8:	d305      	bcc.n	800afb6 <__mcmp+0x32>
 800afaa:	2201      	movs	r2, #1
 800afac:	4610      	mov	r0, r2
 800afae:	bd30      	pop	{r4, r5, pc}
 800afb0:	4283      	cmp	r3, r0
 800afb2:	d3f3      	bcc.n	800af9c <__mcmp+0x18>
 800afb4:	e7fa      	b.n	800afac <__mcmp+0x28>
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	e7f7      	b.n	800afac <__mcmp+0x28>

0800afbc <__mdiff>:
 800afbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc0:	460c      	mov	r4, r1
 800afc2:	4606      	mov	r6, r0
 800afc4:	4611      	mov	r1, r2
 800afc6:	4620      	mov	r0, r4
 800afc8:	4690      	mov	r8, r2
 800afca:	f7ff ffdb 	bl	800af84 <__mcmp>
 800afce:	1e05      	subs	r5, r0, #0
 800afd0:	d110      	bne.n	800aff4 <__mdiff+0x38>
 800afd2:	4629      	mov	r1, r5
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7ff fd59 	bl	800aa8c <_Balloc>
 800afda:	b930      	cbnz	r0, 800afea <__mdiff+0x2e>
 800afdc:	4b3a      	ldr	r3, [pc, #232]	; (800b0c8 <__mdiff+0x10c>)
 800afde:	4602      	mov	r2, r0
 800afe0:	f240 2137 	movw	r1, #567	; 0x237
 800afe4:	4839      	ldr	r0, [pc, #228]	; (800b0cc <__mdiff+0x110>)
 800afe6:	f000 fb0b 	bl	800b600 <__assert_func>
 800afea:	2301      	movs	r3, #1
 800afec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff4:	bfa4      	itt	ge
 800aff6:	4643      	movge	r3, r8
 800aff8:	46a0      	movge	r8, r4
 800affa:	4630      	mov	r0, r6
 800affc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b000:	bfa6      	itte	ge
 800b002:	461c      	movge	r4, r3
 800b004:	2500      	movge	r5, #0
 800b006:	2501      	movlt	r5, #1
 800b008:	f7ff fd40 	bl	800aa8c <_Balloc>
 800b00c:	b920      	cbnz	r0, 800b018 <__mdiff+0x5c>
 800b00e:	4b2e      	ldr	r3, [pc, #184]	; (800b0c8 <__mdiff+0x10c>)
 800b010:	4602      	mov	r2, r0
 800b012:	f240 2145 	movw	r1, #581	; 0x245
 800b016:	e7e5      	b.n	800afe4 <__mdiff+0x28>
 800b018:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b01c:	6926      	ldr	r6, [r4, #16]
 800b01e:	60c5      	str	r5, [r0, #12]
 800b020:	f104 0914 	add.w	r9, r4, #20
 800b024:	f108 0514 	add.w	r5, r8, #20
 800b028:	f100 0e14 	add.w	lr, r0, #20
 800b02c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b030:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b034:	f108 0210 	add.w	r2, r8, #16
 800b038:	46f2      	mov	sl, lr
 800b03a:	2100      	movs	r1, #0
 800b03c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b040:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b044:	fa11 f88b 	uxtah	r8, r1, fp
 800b048:	b299      	uxth	r1, r3
 800b04a:	0c1b      	lsrs	r3, r3, #16
 800b04c:	eba8 0801 	sub.w	r8, r8, r1
 800b050:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b054:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b058:	fa1f f888 	uxth.w	r8, r8
 800b05c:	1419      	asrs	r1, r3, #16
 800b05e:	454e      	cmp	r6, r9
 800b060:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b064:	f84a 3b04 	str.w	r3, [sl], #4
 800b068:	d8e8      	bhi.n	800b03c <__mdiff+0x80>
 800b06a:	1b33      	subs	r3, r6, r4
 800b06c:	3b15      	subs	r3, #21
 800b06e:	f023 0303 	bic.w	r3, r3, #3
 800b072:	3304      	adds	r3, #4
 800b074:	3415      	adds	r4, #21
 800b076:	42a6      	cmp	r6, r4
 800b078:	bf38      	it	cc
 800b07a:	2304      	movcc	r3, #4
 800b07c:	441d      	add	r5, r3
 800b07e:	4473      	add	r3, lr
 800b080:	469e      	mov	lr, r3
 800b082:	462e      	mov	r6, r5
 800b084:	4566      	cmp	r6, ip
 800b086:	d30e      	bcc.n	800b0a6 <__mdiff+0xea>
 800b088:	f10c 0203 	add.w	r2, ip, #3
 800b08c:	1b52      	subs	r2, r2, r5
 800b08e:	f022 0203 	bic.w	r2, r2, #3
 800b092:	3d03      	subs	r5, #3
 800b094:	45ac      	cmp	ip, r5
 800b096:	bf38      	it	cc
 800b098:	2200      	movcc	r2, #0
 800b09a:	4413      	add	r3, r2
 800b09c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0a0:	b17a      	cbz	r2, 800b0c2 <__mdiff+0x106>
 800b0a2:	6107      	str	r7, [r0, #16]
 800b0a4:	e7a4      	b.n	800aff0 <__mdiff+0x34>
 800b0a6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0aa:	fa11 f288 	uxtah	r2, r1, r8
 800b0ae:	1414      	asrs	r4, r2, #16
 800b0b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0b4:	b292      	uxth	r2, r2
 800b0b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b0ba:	f84e 2b04 	str.w	r2, [lr], #4
 800b0be:	1421      	asrs	r1, r4, #16
 800b0c0:	e7e0      	b.n	800b084 <__mdiff+0xc8>
 800b0c2:	3f01      	subs	r7, #1
 800b0c4:	e7ea      	b.n	800b09c <__mdiff+0xe0>
 800b0c6:	bf00      	nop
 800b0c8:	0800bde0 	.word	0x0800bde0
 800b0cc:	0800bdf1 	.word	0x0800bdf1

0800b0d0 <__d2b>:
 800b0d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0d4:	460f      	mov	r7, r1
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	ec59 8b10 	vmov	r8, r9, d0
 800b0dc:	4616      	mov	r6, r2
 800b0de:	f7ff fcd5 	bl	800aa8c <_Balloc>
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	b930      	cbnz	r0, 800b0f4 <__d2b+0x24>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	4b24      	ldr	r3, [pc, #144]	; (800b17c <__d2b+0xac>)
 800b0ea:	4825      	ldr	r0, [pc, #148]	; (800b180 <__d2b+0xb0>)
 800b0ec:	f240 310f 	movw	r1, #783	; 0x30f
 800b0f0:	f000 fa86 	bl	800b600 <__assert_func>
 800b0f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0fc:	bb2d      	cbnz	r5, 800b14a <__d2b+0x7a>
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	f1b8 0300 	subs.w	r3, r8, #0
 800b104:	d026      	beq.n	800b154 <__d2b+0x84>
 800b106:	4668      	mov	r0, sp
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	f7ff fd87 	bl	800ac1c <__lo0bits>
 800b10e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b112:	b1e8      	cbz	r0, 800b150 <__d2b+0x80>
 800b114:	f1c0 0320 	rsb	r3, r0, #32
 800b118:	fa02 f303 	lsl.w	r3, r2, r3
 800b11c:	430b      	orrs	r3, r1
 800b11e:	40c2      	lsrs	r2, r0
 800b120:	6163      	str	r3, [r4, #20]
 800b122:	9201      	str	r2, [sp, #4]
 800b124:	9b01      	ldr	r3, [sp, #4]
 800b126:	61a3      	str	r3, [r4, #24]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bf14      	ite	ne
 800b12c:	2202      	movne	r2, #2
 800b12e:	2201      	moveq	r2, #1
 800b130:	6122      	str	r2, [r4, #16]
 800b132:	b1bd      	cbz	r5, 800b164 <__d2b+0x94>
 800b134:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b138:	4405      	add	r5, r0
 800b13a:	603d      	str	r5, [r7, #0]
 800b13c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b140:	6030      	str	r0, [r6, #0]
 800b142:	4620      	mov	r0, r4
 800b144:	b003      	add	sp, #12
 800b146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b14a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b14e:	e7d6      	b.n	800b0fe <__d2b+0x2e>
 800b150:	6161      	str	r1, [r4, #20]
 800b152:	e7e7      	b.n	800b124 <__d2b+0x54>
 800b154:	a801      	add	r0, sp, #4
 800b156:	f7ff fd61 	bl	800ac1c <__lo0bits>
 800b15a:	9b01      	ldr	r3, [sp, #4]
 800b15c:	6163      	str	r3, [r4, #20]
 800b15e:	3020      	adds	r0, #32
 800b160:	2201      	movs	r2, #1
 800b162:	e7e5      	b.n	800b130 <__d2b+0x60>
 800b164:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b168:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b16c:	6038      	str	r0, [r7, #0]
 800b16e:	6918      	ldr	r0, [r3, #16]
 800b170:	f7ff fd34 	bl	800abdc <__hi0bits>
 800b174:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b178:	e7e2      	b.n	800b140 <__d2b+0x70>
 800b17a:	bf00      	nop
 800b17c:	0800bde0 	.word	0x0800bde0
 800b180:	0800bdf1 	.word	0x0800bdf1

0800b184 <__ssputs_r>:
 800b184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b188:	688e      	ldr	r6, [r1, #8]
 800b18a:	461f      	mov	r7, r3
 800b18c:	42be      	cmp	r6, r7
 800b18e:	680b      	ldr	r3, [r1, #0]
 800b190:	4682      	mov	sl, r0
 800b192:	460c      	mov	r4, r1
 800b194:	4690      	mov	r8, r2
 800b196:	d82c      	bhi.n	800b1f2 <__ssputs_r+0x6e>
 800b198:	898a      	ldrh	r2, [r1, #12]
 800b19a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b19e:	d026      	beq.n	800b1ee <__ssputs_r+0x6a>
 800b1a0:	6965      	ldr	r5, [r4, #20]
 800b1a2:	6909      	ldr	r1, [r1, #16]
 800b1a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1a8:	eba3 0901 	sub.w	r9, r3, r1
 800b1ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1b0:	1c7b      	adds	r3, r7, #1
 800b1b2:	444b      	add	r3, r9
 800b1b4:	106d      	asrs	r5, r5, #1
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	bf38      	it	cc
 800b1ba:	461d      	movcc	r5, r3
 800b1bc:	0553      	lsls	r3, r2, #21
 800b1be:	d527      	bpl.n	800b210 <__ssputs_r+0x8c>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	f7ff fbd7 	bl	800a974 <_malloc_r>
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	b360      	cbz	r0, 800b224 <__ssputs_r+0xa0>
 800b1ca:	6921      	ldr	r1, [r4, #16]
 800b1cc:	464a      	mov	r2, r9
 800b1ce:	f000 fa09 	bl	800b5e4 <memcpy>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	6126      	str	r6, [r4, #16]
 800b1e0:	6165      	str	r5, [r4, #20]
 800b1e2:	444e      	add	r6, r9
 800b1e4:	eba5 0509 	sub.w	r5, r5, r9
 800b1e8:	6026      	str	r6, [r4, #0]
 800b1ea:	60a5      	str	r5, [r4, #8]
 800b1ec:	463e      	mov	r6, r7
 800b1ee:	42be      	cmp	r6, r7
 800b1f0:	d900      	bls.n	800b1f4 <__ssputs_r+0x70>
 800b1f2:	463e      	mov	r6, r7
 800b1f4:	6820      	ldr	r0, [r4, #0]
 800b1f6:	4632      	mov	r2, r6
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	f000 f9c9 	bl	800b590 <memmove>
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	1b9b      	subs	r3, r3, r6
 800b202:	60a3      	str	r3, [r4, #8]
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	4433      	add	r3, r6
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	2000      	movs	r0, #0
 800b20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b210:	462a      	mov	r2, r5
 800b212:	f000 fa3b 	bl	800b68c <_realloc_r>
 800b216:	4606      	mov	r6, r0
 800b218:	2800      	cmp	r0, #0
 800b21a:	d1e0      	bne.n	800b1de <__ssputs_r+0x5a>
 800b21c:	6921      	ldr	r1, [r4, #16]
 800b21e:	4650      	mov	r0, sl
 800b220:	f7ff fb34 	bl	800a88c <_free_r>
 800b224:	230c      	movs	r3, #12
 800b226:	f8ca 3000 	str.w	r3, [sl]
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b230:	81a3      	strh	r3, [r4, #12]
 800b232:	f04f 30ff 	mov.w	r0, #4294967295
 800b236:	e7e9      	b.n	800b20c <__ssputs_r+0x88>

0800b238 <_svfiprintf_r>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	4698      	mov	r8, r3
 800b23e:	898b      	ldrh	r3, [r1, #12]
 800b240:	061b      	lsls	r3, r3, #24
 800b242:	b09d      	sub	sp, #116	; 0x74
 800b244:	4607      	mov	r7, r0
 800b246:	460d      	mov	r5, r1
 800b248:	4614      	mov	r4, r2
 800b24a:	d50e      	bpl.n	800b26a <_svfiprintf_r+0x32>
 800b24c:	690b      	ldr	r3, [r1, #16]
 800b24e:	b963      	cbnz	r3, 800b26a <_svfiprintf_r+0x32>
 800b250:	2140      	movs	r1, #64	; 0x40
 800b252:	f7ff fb8f 	bl	800a974 <_malloc_r>
 800b256:	6028      	str	r0, [r5, #0]
 800b258:	6128      	str	r0, [r5, #16]
 800b25a:	b920      	cbnz	r0, 800b266 <_svfiprintf_r+0x2e>
 800b25c:	230c      	movs	r3, #12
 800b25e:	603b      	str	r3, [r7, #0]
 800b260:	f04f 30ff 	mov.w	r0, #4294967295
 800b264:	e0d0      	b.n	800b408 <_svfiprintf_r+0x1d0>
 800b266:	2340      	movs	r3, #64	; 0x40
 800b268:	616b      	str	r3, [r5, #20]
 800b26a:	2300      	movs	r3, #0
 800b26c:	9309      	str	r3, [sp, #36]	; 0x24
 800b26e:	2320      	movs	r3, #32
 800b270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b274:	f8cd 800c 	str.w	r8, [sp, #12]
 800b278:	2330      	movs	r3, #48	; 0x30
 800b27a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b420 <_svfiprintf_r+0x1e8>
 800b27e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b282:	f04f 0901 	mov.w	r9, #1
 800b286:	4623      	mov	r3, r4
 800b288:	469a      	mov	sl, r3
 800b28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b28e:	b10a      	cbz	r2, 800b294 <_svfiprintf_r+0x5c>
 800b290:	2a25      	cmp	r2, #37	; 0x25
 800b292:	d1f9      	bne.n	800b288 <_svfiprintf_r+0x50>
 800b294:	ebba 0b04 	subs.w	fp, sl, r4
 800b298:	d00b      	beq.n	800b2b2 <_svfiprintf_r+0x7a>
 800b29a:	465b      	mov	r3, fp
 800b29c:	4622      	mov	r2, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	f7ff ff6f 	bl	800b184 <__ssputs_r>
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	f000 80a9 	beq.w	800b3fe <_svfiprintf_r+0x1c6>
 800b2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ae:	445a      	add	r2, fp
 800b2b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 80a1 	beq.w	800b3fe <_svfiprintf_r+0x1c6>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2c6:	f10a 0a01 	add.w	sl, sl, #1
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	9307      	str	r3, [sp, #28]
 800b2ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b2d4:	4654      	mov	r4, sl
 800b2d6:	2205      	movs	r2, #5
 800b2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2dc:	4850      	ldr	r0, [pc, #320]	; (800b420 <_svfiprintf_r+0x1e8>)
 800b2de:	f7f4 ff77 	bl	80001d0 <memchr>
 800b2e2:	9a04      	ldr	r2, [sp, #16]
 800b2e4:	b9d8      	cbnz	r0, 800b31e <_svfiprintf_r+0xe6>
 800b2e6:	06d0      	lsls	r0, r2, #27
 800b2e8:	bf44      	itt	mi
 800b2ea:	2320      	movmi	r3, #32
 800b2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f0:	0711      	lsls	r1, r2, #28
 800b2f2:	bf44      	itt	mi
 800b2f4:	232b      	movmi	r3, #43	; 0x2b
 800b2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b300:	d015      	beq.n	800b32e <_svfiprintf_r+0xf6>
 800b302:	9a07      	ldr	r2, [sp, #28]
 800b304:	4654      	mov	r4, sl
 800b306:	2000      	movs	r0, #0
 800b308:	f04f 0c0a 	mov.w	ip, #10
 800b30c:	4621      	mov	r1, r4
 800b30e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b312:	3b30      	subs	r3, #48	; 0x30
 800b314:	2b09      	cmp	r3, #9
 800b316:	d94d      	bls.n	800b3b4 <_svfiprintf_r+0x17c>
 800b318:	b1b0      	cbz	r0, 800b348 <_svfiprintf_r+0x110>
 800b31a:	9207      	str	r2, [sp, #28]
 800b31c:	e014      	b.n	800b348 <_svfiprintf_r+0x110>
 800b31e:	eba0 0308 	sub.w	r3, r0, r8
 800b322:	fa09 f303 	lsl.w	r3, r9, r3
 800b326:	4313      	orrs	r3, r2
 800b328:	9304      	str	r3, [sp, #16]
 800b32a:	46a2      	mov	sl, r4
 800b32c:	e7d2      	b.n	800b2d4 <_svfiprintf_r+0x9c>
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	1d19      	adds	r1, r3, #4
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	9103      	str	r1, [sp, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	bfbb      	ittet	lt
 800b33a:	425b      	neglt	r3, r3
 800b33c:	f042 0202 	orrlt.w	r2, r2, #2
 800b340:	9307      	strge	r3, [sp, #28]
 800b342:	9307      	strlt	r3, [sp, #28]
 800b344:	bfb8      	it	lt
 800b346:	9204      	strlt	r2, [sp, #16]
 800b348:	7823      	ldrb	r3, [r4, #0]
 800b34a:	2b2e      	cmp	r3, #46	; 0x2e
 800b34c:	d10c      	bne.n	800b368 <_svfiprintf_r+0x130>
 800b34e:	7863      	ldrb	r3, [r4, #1]
 800b350:	2b2a      	cmp	r3, #42	; 0x2a
 800b352:	d134      	bne.n	800b3be <_svfiprintf_r+0x186>
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	1d1a      	adds	r2, r3, #4
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	9203      	str	r2, [sp, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bfb8      	it	lt
 800b360:	f04f 33ff 	movlt.w	r3, #4294967295
 800b364:	3402      	adds	r4, #2
 800b366:	9305      	str	r3, [sp, #20]
 800b368:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b430 <_svfiprintf_r+0x1f8>
 800b36c:	7821      	ldrb	r1, [r4, #0]
 800b36e:	2203      	movs	r2, #3
 800b370:	4650      	mov	r0, sl
 800b372:	f7f4 ff2d 	bl	80001d0 <memchr>
 800b376:	b138      	cbz	r0, 800b388 <_svfiprintf_r+0x150>
 800b378:	9b04      	ldr	r3, [sp, #16]
 800b37a:	eba0 000a 	sub.w	r0, r0, sl
 800b37e:	2240      	movs	r2, #64	; 0x40
 800b380:	4082      	lsls	r2, r0
 800b382:	4313      	orrs	r3, r2
 800b384:	3401      	adds	r4, #1
 800b386:	9304      	str	r3, [sp, #16]
 800b388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38c:	4825      	ldr	r0, [pc, #148]	; (800b424 <_svfiprintf_r+0x1ec>)
 800b38e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b392:	2206      	movs	r2, #6
 800b394:	f7f4 ff1c 	bl	80001d0 <memchr>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d038      	beq.n	800b40e <_svfiprintf_r+0x1d6>
 800b39c:	4b22      	ldr	r3, [pc, #136]	; (800b428 <_svfiprintf_r+0x1f0>)
 800b39e:	bb1b      	cbnz	r3, 800b3e8 <_svfiprintf_r+0x1b0>
 800b3a0:	9b03      	ldr	r3, [sp, #12]
 800b3a2:	3307      	adds	r3, #7
 800b3a4:	f023 0307 	bic.w	r3, r3, #7
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	9303      	str	r3, [sp, #12]
 800b3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ae:	4433      	add	r3, r6
 800b3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b2:	e768      	b.n	800b286 <_svfiprintf_r+0x4e>
 800b3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	2001      	movs	r0, #1
 800b3bc:	e7a6      	b.n	800b30c <_svfiprintf_r+0xd4>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	3401      	adds	r4, #1
 800b3c2:	9305      	str	r3, [sp, #20]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	f04f 0c0a 	mov.w	ip, #10
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d0:	3a30      	subs	r2, #48	; 0x30
 800b3d2:	2a09      	cmp	r2, #9
 800b3d4:	d903      	bls.n	800b3de <_svfiprintf_r+0x1a6>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0c6      	beq.n	800b368 <_svfiprintf_r+0x130>
 800b3da:	9105      	str	r1, [sp, #20]
 800b3dc:	e7c4      	b.n	800b368 <_svfiprintf_r+0x130>
 800b3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e7f0      	b.n	800b3ca <_svfiprintf_r+0x192>
 800b3e8:	ab03      	add	r3, sp, #12
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	462a      	mov	r2, r5
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <_svfiprintf_r+0x1f4>)
 800b3f0:	a904      	add	r1, sp, #16
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	f7fd fe76 	bl	80090e4 <_printf_float>
 800b3f8:	1c42      	adds	r2, r0, #1
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	d1d6      	bne.n	800b3ac <_svfiprintf_r+0x174>
 800b3fe:	89ab      	ldrh	r3, [r5, #12]
 800b400:	065b      	lsls	r3, r3, #25
 800b402:	f53f af2d 	bmi.w	800b260 <_svfiprintf_r+0x28>
 800b406:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b408:	b01d      	add	sp, #116	; 0x74
 800b40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40e:	ab03      	add	r3, sp, #12
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	462a      	mov	r2, r5
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <_svfiprintf_r+0x1f4>)
 800b416:	a904      	add	r1, sp, #16
 800b418:	4638      	mov	r0, r7
 800b41a:	f7fe f907 	bl	800962c <_printf_i>
 800b41e:	e7eb      	b.n	800b3f8 <_svfiprintf_r+0x1c0>
 800b420:	0800bf4c 	.word	0x0800bf4c
 800b424:	0800bf56 	.word	0x0800bf56
 800b428:	080090e5 	.word	0x080090e5
 800b42c:	0800b185 	.word	0x0800b185
 800b430:	0800bf52 	.word	0x0800bf52

0800b434 <__sflush_r>:
 800b434:	898a      	ldrh	r2, [r1, #12]
 800b436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	4605      	mov	r5, r0
 800b43c:	0710      	lsls	r0, r2, #28
 800b43e:	460c      	mov	r4, r1
 800b440:	d458      	bmi.n	800b4f4 <__sflush_r+0xc0>
 800b442:	684b      	ldr	r3, [r1, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	dc05      	bgt.n	800b454 <__sflush_r+0x20>
 800b448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dc02      	bgt.n	800b454 <__sflush_r+0x20>
 800b44e:	2000      	movs	r0, #0
 800b450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b456:	2e00      	cmp	r6, #0
 800b458:	d0f9      	beq.n	800b44e <__sflush_r+0x1a>
 800b45a:	2300      	movs	r3, #0
 800b45c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b460:	682f      	ldr	r7, [r5, #0]
 800b462:	6a21      	ldr	r1, [r4, #32]
 800b464:	602b      	str	r3, [r5, #0]
 800b466:	d032      	beq.n	800b4ce <__sflush_r+0x9a>
 800b468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	075a      	lsls	r2, r3, #29
 800b46e:	d505      	bpl.n	800b47c <__sflush_r+0x48>
 800b470:	6863      	ldr	r3, [r4, #4]
 800b472:	1ac0      	subs	r0, r0, r3
 800b474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b476:	b10b      	cbz	r3, 800b47c <__sflush_r+0x48>
 800b478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b47a:	1ac0      	subs	r0, r0, r3
 800b47c:	2300      	movs	r3, #0
 800b47e:	4602      	mov	r2, r0
 800b480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b482:	6a21      	ldr	r1, [r4, #32]
 800b484:	4628      	mov	r0, r5
 800b486:	47b0      	blx	r6
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	d106      	bne.n	800b49c <__sflush_r+0x68>
 800b48e:	6829      	ldr	r1, [r5, #0]
 800b490:	291d      	cmp	r1, #29
 800b492:	d82b      	bhi.n	800b4ec <__sflush_r+0xb8>
 800b494:	4a29      	ldr	r2, [pc, #164]	; (800b53c <__sflush_r+0x108>)
 800b496:	410a      	asrs	r2, r1
 800b498:	07d6      	lsls	r6, r2, #31
 800b49a:	d427      	bmi.n	800b4ec <__sflush_r+0xb8>
 800b49c:	2200      	movs	r2, #0
 800b49e:	6062      	str	r2, [r4, #4]
 800b4a0:	04d9      	lsls	r1, r3, #19
 800b4a2:	6922      	ldr	r2, [r4, #16]
 800b4a4:	6022      	str	r2, [r4, #0]
 800b4a6:	d504      	bpl.n	800b4b2 <__sflush_r+0x7e>
 800b4a8:	1c42      	adds	r2, r0, #1
 800b4aa:	d101      	bne.n	800b4b0 <__sflush_r+0x7c>
 800b4ac:	682b      	ldr	r3, [r5, #0]
 800b4ae:	b903      	cbnz	r3, 800b4b2 <__sflush_r+0x7e>
 800b4b0:	6560      	str	r0, [r4, #84]	; 0x54
 800b4b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b4:	602f      	str	r7, [r5, #0]
 800b4b6:	2900      	cmp	r1, #0
 800b4b8:	d0c9      	beq.n	800b44e <__sflush_r+0x1a>
 800b4ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4be:	4299      	cmp	r1, r3
 800b4c0:	d002      	beq.n	800b4c8 <__sflush_r+0x94>
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f7ff f9e2 	bl	800a88c <_free_r>
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	6360      	str	r0, [r4, #52]	; 0x34
 800b4cc:	e7c0      	b.n	800b450 <__sflush_r+0x1c>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	47b0      	blx	r6
 800b4d4:	1c41      	adds	r1, r0, #1
 800b4d6:	d1c8      	bne.n	800b46a <__sflush_r+0x36>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0c5      	beq.n	800b46a <__sflush_r+0x36>
 800b4de:	2b1d      	cmp	r3, #29
 800b4e0:	d001      	beq.n	800b4e6 <__sflush_r+0xb2>
 800b4e2:	2b16      	cmp	r3, #22
 800b4e4:	d101      	bne.n	800b4ea <__sflush_r+0xb6>
 800b4e6:	602f      	str	r7, [r5, #0]
 800b4e8:	e7b1      	b.n	800b44e <__sflush_r+0x1a>
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f0:	81a3      	strh	r3, [r4, #12]
 800b4f2:	e7ad      	b.n	800b450 <__sflush_r+0x1c>
 800b4f4:	690f      	ldr	r7, [r1, #16]
 800b4f6:	2f00      	cmp	r7, #0
 800b4f8:	d0a9      	beq.n	800b44e <__sflush_r+0x1a>
 800b4fa:	0793      	lsls	r3, r2, #30
 800b4fc:	680e      	ldr	r6, [r1, #0]
 800b4fe:	bf08      	it	eq
 800b500:	694b      	ldreq	r3, [r1, #20]
 800b502:	600f      	str	r7, [r1, #0]
 800b504:	bf18      	it	ne
 800b506:	2300      	movne	r3, #0
 800b508:	eba6 0807 	sub.w	r8, r6, r7
 800b50c:	608b      	str	r3, [r1, #8]
 800b50e:	f1b8 0f00 	cmp.w	r8, #0
 800b512:	dd9c      	ble.n	800b44e <__sflush_r+0x1a>
 800b514:	6a21      	ldr	r1, [r4, #32]
 800b516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b518:	4643      	mov	r3, r8
 800b51a:	463a      	mov	r2, r7
 800b51c:	4628      	mov	r0, r5
 800b51e:	47b0      	blx	r6
 800b520:	2800      	cmp	r0, #0
 800b522:	dc06      	bgt.n	800b532 <__sflush_r+0xfe>
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	e78e      	b.n	800b450 <__sflush_r+0x1c>
 800b532:	4407      	add	r7, r0
 800b534:	eba8 0800 	sub.w	r8, r8, r0
 800b538:	e7e9      	b.n	800b50e <__sflush_r+0xda>
 800b53a:	bf00      	nop
 800b53c:	dfbffffe 	.word	0xdfbffffe

0800b540 <_fflush_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	690b      	ldr	r3, [r1, #16]
 800b544:	4605      	mov	r5, r0
 800b546:	460c      	mov	r4, r1
 800b548:	b913      	cbnz	r3, 800b550 <_fflush_r+0x10>
 800b54a:	2500      	movs	r5, #0
 800b54c:	4628      	mov	r0, r5
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	b118      	cbz	r0, 800b55a <_fflush_r+0x1a>
 800b552:	6a03      	ldr	r3, [r0, #32]
 800b554:	b90b      	cbnz	r3, 800b55a <_fflush_r+0x1a>
 800b556:	f7fe fa05 	bl	8009964 <__sinit>
 800b55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0f3      	beq.n	800b54a <_fflush_r+0xa>
 800b562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b564:	07d0      	lsls	r0, r2, #31
 800b566:	d404      	bmi.n	800b572 <_fflush_r+0x32>
 800b568:	0599      	lsls	r1, r3, #22
 800b56a:	d402      	bmi.n	800b572 <_fflush_r+0x32>
 800b56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b56e:	f7fe fb0f 	bl	8009b90 <__retarget_lock_acquire_recursive>
 800b572:	4628      	mov	r0, r5
 800b574:	4621      	mov	r1, r4
 800b576:	f7ff ff5d 	bl	800b434 <__sflush_r>
 800b57a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b57c:	07da      	lsls	r2, r3, #31
 800b57e:	4605      	mov	r5, r0
 800b580:	d4e4      	bmi.n	800b54c <_fflush_r+0xc>
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	059b      	lsls	r3, r3, #22
 800b586:	d4e1      	bmi.n	800b54c <_fflush_r+0xc>
 800b588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b58a:	f7fe fb02 	bl	8009b92 <__retarget_lock_release_recursive>
 800b58e:	e7dd      	b.n	800b54c <_fflush_r+0xc>

0800b590 <memmove>:
 800b590:	4288      	cmp	r0, r1
 800b592:	b510      	push	{r4, lr}
 800b594:	eb01 0402 	add.w	r4, r1, r2
 800b598:	d902      	bls.n	800b5a0 <memmove+0x10>
 800b59a:	4284      	cmp	r4, r0
 800b59c:	4623      	mov	r3, r4
 800b59e:	d807      	bhi.n	800b5b0 <memmove+0x20>
 800b5a0:	1e43      	subs	r3, r0, #1
 800b5a2:	42a1      	cmp	r1, r4
 800b5a4:	d008      	beq.n	800b5b8 <memmove+0x28>
 800b5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ae:	e7f8      	b.n	800b5a2 <memmove+0x12>
 800b5b0:	4402      	add	r2, r0
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	428a      	cmp	r2, r1
 800b5b6:	d100      	bne.n	800b5ba <memmove+0x2a>
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5c2:	e7f7      	b.n	800b5b4 <memmove+0x24>

0800b5c4 <_sbrk_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d06      	ldr	r5, [pc, #24]	; (800b5e0 <_sbrk_r+0x1c>)
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	602b      	str	r3, [r5, #0]
 800b5d0:	f7f5 feec 	bl	80013ac <_sbrk>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d102      	bne.n	800b5de <_sbrk_r+0x1a>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	b103      	cbz	r3, 800b5de <_sbrk_r+0x1a>
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	bd38      	pop	{r3, r4, r5, pc}
 800b5e0:	200020d8 	.word	0x200020d8

0800b5e4 <memcpy>:
 800b5e4:	440a      	add	r2, r1
 800b5e6:	4291      	cmp	r1, r2
 800b5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5ec:	d100      	bne.n	800b5f0 <memcpy+0xc>
 800b5ee:	4770      	bx	lr
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5fa:	4291      	cmp	r1, r2
 800b5fc:	d1f9      	bne.n	800b5f2 <memcpy+0xe>
 800b5fe:	bd10      	pop	{r4, pc}

0800b600 <__assert_func>:
 800b600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b602:	4614      	mov	r4, r2
 800b604:	461a      	mov	r2, r3
 800b606:	4b09      	ldr	r3, [pc, #36]	; (800b62c <__assert_func+0x2c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4605      	mov	r5, r0
 800b60c:	68d8      	ldr	r0, [r3, #12]
 800b60e:	b14c      	cbz	r4, 800b624 <__assert_func+0x24>
 800b610:	4b07      	ldr	r3, [pc, #28]	; (800b630 <__assert_func+0x30>)
 800b612:	9100      	str	r1, [sp, #0]
 800b614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b618:	4906      	ldr	r1, [pc, #24]	; (800b634 <__assert_func+0x34>)
 800b61a:	462b      	mov	r3, r5
 800b61c:	f000 f872 	bl	800b704 <fiprintf>
 800b620:	f000 f882 	bl	800b728 <abort>
 800b624:	4b04      	ldr	r3, [pc, #16]	; (800b638 <__assert_func+0x38>)
 800b626:	461c      	mov	r4, r3
 800b628:	e7f3      	b.n	800b612 <__assert_func+0x12>
 800b62a:	bf00      	nop
 800b62c:	20000154 	.word	0x20000154
 800b630:	0800bf67 	.word	0x0800bf67
 800b634:	0800bf74 	.word	0x0800bf74
 800b638:	0800bfa2 	.word	0x0800bfa2

0800b63c <_calloc_r>:
 800b63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b63e:	fba1 2402 	umull	r2, r4, r1, r2
 800b642:	b94c      	cbnz	r4, 800b658 <_calloc_r+0x1c>
 800b644:	4611      	mov	r1, r2
 800b646:	9201      	str	r2, [sp, #4]
 800b648:	f7ff f994 	bl	800a974 <_malloc_r>
 800b64c:	9a01      	ldr	r2, [sp, #4]
 800b64e:	4605      	mov	r5, r0
 800b650:	b930      	cbnz	r0, 800b660 <_calloc_r+0x24>
 800b652:	4628      	mov	r0, r5
 800b654:	b003      	add	sp, #12
 800b656:	bd30      	pop	{r4, r5, pc}
 800b658:	220c      	movs	r2, #12
 800b65a:	6002      	str	r2, [r0, #0]
 800b65c:	2500      	movs	r5, #0
 800b65e:	e7f8      	b.n	800b652 <_calloc_r+0x16>
 800b660:	4621      	mov	r1, r4
 800b662:	f7fe fa18 	bl	8009a96 <memset>
 800b666:	e7f4      	b.n	800b652 <_calloc_r+0x16>

0800b668 <__ascii_mbtowc>:
 800b668:	b082      	sub	sp, #8
 800b66a:	b901      	cbnz	r1, 800b66e <__ascii_mbtowc+0x6>
 800b66c:	a901      	add	r1, sp, #4
 800b66e:	b142      	cbz	r2, 800b682 <__ascii_mbtowc+0x1a>
 800b670:	b14b      	cbz	r3, 800b686 <__ascii_mbtowc+0x1e>
 800b672:	7813      	ldrb	r3, [r2, #0]
 800b674:	600b      	str	r3, [r1, #0]
 800b676:	7812      	ldrb	r2, [r2, #0]
 800b678:	1e10      	subs	r0, r2, #0
 800b67a:	bf18      	it	ne
 800b67c:	2001      	movne	r0, #1
 800b67e:	b002      	add	sp, #8
 800b680:	4770      	bx	lr
 800b682:	4610      	mov	r0, r2
 800b684:	e7fb      	b.n	800b67e <__ascii_mbtowc+0x16>
 800b686:	f06f 0001 	mvn.w	r0, #1
 800b68a:	e7f8      	b.n	800b67e <__ascii_mbtowc+0x16>

0800b68c <_realloc_r>:
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	4680      	mov	r8, r0
 800b692:	4614      	mov	r4, r2
 800b694:	460e      	mov	r6, r1
 800b696:	b921      	cbnz	r1, 800b6a2 <_realloc_r+0x16>
 800b698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69c:	4611      	mov	r1, r2
 800b69e:	f7ff b969 	b.w	800a974 <_malloc_r>
 800b6a2:	b92a      	cbnz	r2, 800b6b0 <_realloc_r+0x24>
 800b6a4:	f7ff f8f2 	bl	800a88c <_free_r>
 800b6a8:	4625      	mov	r5, r4
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b0:	f000 f841 	bl	800b736 <_malloc_usable_size_r>
 800b6b4:	4284      	cmp	r4, r0
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	d802      	bhi.n	800b6c0 <_realloc_r+0x34>
 800b6ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6be:	d812      	bhi.n	800b6e6 <_realloc_r+0x5a>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	f7ff f956 	bl	800a974 <_malloc_r>
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0ed      	beq.n	800b6aa <_realloc_r+0x1e>
 800b6ce:	42bc      	cmp	r4, r7
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	bf28      	it	cs
 800b6d6:	463a      	movcs	r2, r7
 800b6d8:	f7ff ff84 	bl	800b5e4 <memcpy>
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4640      	mov	r0, r8
 800b6e0:	f7ff f8d4 	bl	800a88c <_free_r>
 800b6e4:	e7e1      	b.n	800b6aa <_realloc_r+0x1e>
 800b6e6:	4635      	mov	r5, r6
 800b6e8:	e7df      	b.n	800b6aa <_realloc_r+0x1e>

0800b6ea <__ascii_wctomb>:
 800b6ea:	b149      	cbz	r1, 800b700 <__ascii_wctomb+0x16>
 800b6ec:	2aff      	cmp	r2, #255	; 0xff
 800b6ee:	bf85      	ittet	hi
 800b6f0:	238a      	movhi	r3, #138	; 0x8a
 800b6f2:	6003      	strhi	r3, [r0, #0]
 800b6f4:	700a      	strbls	r2, [r1, #0]
 800b6f6:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6fa:	bf98      	it	ls
 800b6fc:	2001      	movls	r0, #1
 800b6fe:	4770      	bx	lr
 800b700:	4608      	mov	r0, r1
 800b702:	4770      	bx	lr

0800b704 <fiprintf>:
 800b704:	b40e      	push	{r1, r2, r3}
 800b706:	b503      	push	{r0, r1, lr}
 800b708:	4601      	mov	r1, r0
 800b70a:	ab03      	add	r3, sp, #12
 800b70c:	4805      	ldr	r0, [pc, #20]	; (800b724 <fiprintf+0x20>)
 800b70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b712:	6800      	ldr	r0, [r0, #0]
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	f000 f83f 	bl	800b798 <_vfiprintf_r>
 800b71a:	b002      	add	sp, #8
 800b71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b720:	b003      	add	sp, #12
 800b722:	4770      	bx	lr
 800b724:	20000154 	.word	0x20000154

0800b728 <abort>:
 800b728:	b508      	push	{r3, lr}
 800b72a:	2006      	movs	r0, #6
 800b72c:	f000 fa0c 	bl	800bb48 <raise>
 800b730:	2001      	movs	r0, #1
 800b732:	f7f5 fdc3 	bl	80012bc <_exit>

0800b736 <_malloc_usable_size_r>:
 800b736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b73a:	1f18      	subs	r0, r3, #4
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bfbc      	itt	lt
 800b740:	580b      	ldrlt	r3, [r1, r0]
 800b742:	18c0      	addlt	r0, r0, r3
 800b744:	4770      	bx	lr

0800b746 <__sfputc_r>:
 800b746:	6893      	ldr	r3, [r2, #8]
 800b748:	3b01      	subs	r3, #1
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	b410      	push	{r4}
 800b74e:	6093      	str	r3, [r2, #8]
 800b750:	da08      	bge.n	800b764 <__sfputc_r+0x1e>
 800b752:	6994      	ldr	r4, [r2, #24]
 800b754:	42a3      	cmp	r3, r4
 800b756:	db01      	blt.n	800b75c <__sfputc_r+0x16>
 800b758:	290a      	cmp	r1, #10
 800b75a:	d103      	bne.n	800b764 <__sfputc_r+0x1e>
 800b75c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b760:	f000 b934 	b.w	800b9cc <__swbuf_r>
 800b764:	6813      	ldr	r3, [r2, #0]
 800b766:	1c58      	adds	r0, r3, #1
 800b768:	6010      	str	r0, [r2, #0]
 800b76a:	7019      	strb	r1, [r3, #0]
 800b76c:	4608      	mov	r0, r1
 800b76e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <__sfputs_r>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	4614      	mov	r4, r2
 800b77c:	18d5      	adds	r5, r2, r3
 800b77e:	42ac      	cmp	r4, r5
 800b780:	d101      	bne.n	800b786 <__sfputs_r+0x12>
 800b782:	2000      	movs	r0, #0
 800b784:	e007      	b.n	800b796 <__sfputs_r+0x22>
 800b786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78a:	463a      	mov	r2, r7
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7ff ffda 	bl	800b746 <__sfputc_r>
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	d1f3      	bne.n	800b77e <__sfputs_r+0xa>
 800b796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b798 <_vfiprintf_r>:
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	460d      	mov	r5, r1
 800b79e:	b09d      	sub	sp, #116	; 0x74
 800b7a0:	4614      	mov	r4, r2
 800b7a2:	4698      	mov	r8, r3
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	b118      	cbz	r0, 800b7b0 <_vfiprintf_r+0x18>
 800b7a8:	6a03      	ldr	r3, [r0, #32]
 800b7aa:	b90b      	cbnz	r3, 800b7b0 <_vfiprintf_r+0x18>
 800b7ac:	f7fe f8da 	bl	8009964 <__sinit>
 800b7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7b2:	07d9      	lsls	r1, r3, #31
 800b7b4:	d405      	bmi.n	800b7c2 <_vfiprintf_r+0x2a>
 800b7b6:	89ab      	ldrh	r3, [r5, #12]
 800b7b8:	059a      	lsls	r2, r3, #22
 800b7ba:	d402      	bmi.n	800b7c2 <_vfiprintf_r+0x2a>
 800b7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7be:	f7fe f9e7 	bl	8009b90 <__retarget_lock_acquire_recursive>
 800b7c2:	89ab      	ldrh	r3, [r5, #12]
 800b7c4:	071b      	lsls	r3, r3, #28
 800b7c6:	d501      	bpl.n	800b7cc <_vfiprintf_r+0x34>
 800b7c8:	692b      	ldr	r3, [r5, #16]
 800b7ca:	b99b      	cbnz	r3, 800b7f4 <_vfiprintf_r+0x5c>
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f000 f93a 	bl	800ba48 <__swsetup_r>
 800b7d4:	b170      	cbz	r0, 800b7f4 <_vfiprintf_r+0x5c>
 800b7d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7d8:	07dc      	lsls	r4, r3, #31
 800b7da:	d504      	bpl.n	800b7e6 <_vfiprintf_r+0x4e>
 800b7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e0:	b01d      	add	sp, #116	; 0x74
 800b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e6:	89ab      	ldrh	r3, [r5, #12]
 800b7e8:	0598      	lsls	r0, r3, #22
 800b7ea:	d4f7      	bmi.n	800b7dc <_vfiprintf_r+0x44>
 800b7ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ee:	f7fe f9d0 	bl	8009b92 <__retarget_lock_release_recursive>
 800b7f2:	e7f3      	b.n	800b7dc <_vfiprintf_r+0x44>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f8:	2320      	movs	r3, #32
 800b7fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b802:	2330      	movs	r3, #48	; 0x30
 800b804:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b9b8 <_vfiprintf_r+0x220>
 800b808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b80c:	f04f 0901 	mov.w	r9, #1
 800b810:	4623      	mov	r3, r4
 800b812:	469a      	mov	sl, r3
 800b814:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b818:	b10a      	cbz	r2, 800b81e <_vfiprintf_r+0x86>
 800b81a:	2a25      	cmp	r2, #37	; 0x25
 800b81c:	d1f9      	bne.n	800b812 <_vfiprintf_r+0x7a>
 800b81e:	ebba 0b04 	subs.w	fp, sl, r4
 800b822:	d00b      	beq.n	800b83c <_vfiprintf_r+0xa4>
 800b824:	465b      	mov	r3, fp
 800b826:	4622      	mov	r2, r4
 800b828:	4629      	mov	r1, r5
 800b82a:	4630      	mov	r0, r6
 800b82c:	f7ff ffa2 	bl	800b774 <__sfputs_r>
 800b830:	3001      	adds	r0, #1
 800b832:	f000 80a9 	beq.w	800b988 <_vfiprintf_r+0x1f0>
 800b836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b838:	445a      	add	r2, fp
 800b83a:	9209      	str	r2, [sp, #36]	; 0x24
 800b83c:	f89a 3000 	ldrb.w	r3, [sl]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 80a1 	beq.w	800b988 <_vfiprintf_r+0x1f0>
 800b846:	2300      	movs	r3, #0
 800b848:	f04f 32ff 	mov.w	r2, #4294967295
 800b84c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b850:	f10a 0a01 	add.w	sl, sl, #1
 800b854:	9304      	str	r3, [sp, #16]
 800b856:	9307      	str	r3, [sp, #28]
 800b858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b85c:	931a      	str	r3, [sp, #104]	; 0x68
 800b85e:	4654      	mov	r4, sl
 800b860:	2205      	movs	r2, #5
 800b862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b866:	4854      	ldr	r0, [pc, #336]	; (800b9b8 <_vfiprintf_r+0x220>)
 800b868:	f7f4 fcb2 	bl	80001d0 <memchr>
 800b86c:	9a04      	ldr	r2, [sp, #16]
 800b86e:	b9d8      	cbnz	r0, 800b8a8 <_vfiprintf_r+0x110>
 800b870:	06d1      	lsls	r1, r2, #27
 800b872:	bf44      	itt	mi
 800b874:	2320      	movmi	r3, #32
 800b876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b87a:	0713      	lsls	r3, r2, #28
 800b87c:	bf44      	itt	mi
 800b87e:	232b      	movmi	r3, #43	; 0x2b
 800b880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b884:	f89a 3000 	ldrb.w	r3, [sl]
 800b888:	2b2a      	cmp	r3, #42	; 0x2a
 800b88a:	d015      	beq.n	800b8b8 <_vfiprintf_r+0x120>
 800b88c:	9a07      	ldr	r2, [sp, #28]
 800b88e:	4654      	mov	r4, sl
 800b890:	2000      	movs	r0, #0
 800b892:	f04f 0c0a 	mov.w	ip, #10
 800b896:	4621      	mov	r1, r4
 800b898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b89c:	3b30      	subs	r3, #48	; 0x30
 800b89e:	2b09      	cmp	r3, #9
 800b8a0:	d94d      	bls.n	800b93e <_vfiprintf_r+0x1a6>
 800b8a2:	b1b0      	cbz	r0, 800b8d2 <_vfiprintf_r+0x13a>
 800b8a4:	9207      	str	r2, [sp, #28]
 800b8a6:	e014      	b.n	800b8d2 <_vfiprintf_r+0x13a>
 800b8a8:	eba0 0308 	sub.w	r3, r0, r8
 800b8ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	46a2      	mov	sl, r4
 800b8b6:	e7d2      	b.n	800b85e <_vfiprintf_r+0xc6>
 800b8b8:	9b03      	ldr	r3, [sp, #12]
 800b8ba:	1d19      	adds	r1, r3, #4
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	9103      	str	r1, [sp, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bfbb      	ittet	lt
 800b8c4:	425b      	neglt	r3, r3
 800b8c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ca:	9307      	strge	r3, [sp, #28]
 800b8cc:	9307      	strlt	r3, [sp, #28]
 800b8ce:	bfb8      	it	lt
 800b8d0:	9204      	strlt	r2, [sp, #16]
 800b8d2:	7823      	ldrb	r3, [r4, #0]
 800b8d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b8d6:	d10c      	bne.n	800b8f2 <_vfiprintf_r+0x15a>
 800b8d8:	7863      	ldrb	r3, [r4, #1]
 800b8da:	2b2a      	cmp	r3, #42	; 0x2a
 800b8dc:	d134      	bne.n	800b948 <_vfiprintf_r+0x1b0>
 800b8de:	9b03      	ldr	r3, [sp, #12]
 800b8e0:	1d1a      	adds	r2, r3, #4
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	9203      	str	r2, [sp, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	bfb8      	it	lt
 800b8ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8ee:	3402      	adds	r4, #2
 800b8f0:	9305      	str	r3, [sp, #20]
 800b8f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b9c8 <_vfiprintf_r+0x230>
 800b8f6:	7821      	ldrb	r1, [r4, #0]
 800b8f8:	2203      	movs	r2, #3
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	f7f4 fc68 	bl	80001d0 <memchr>
 800b900:	b138      	cbz	r0, 800b912 <_vfiprintf_r+0x17a>
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	eba0 000a 	sub.w	r0, r0, sl
 800b908:	2240      	movs	r2, #64	; 0x40
 800b90a:	4082      	lsls	r2, r0
 800b90c:	4313      	orrs	r3, r2
 800b90e:	3401      	adds	r4, #1
 800b910:	9304      	str	r3, [sp, #16]
 800b912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b916:	4829      	ldr	r0, [pc, #164]	; (800b9bc <_vfiprintf_r+0x224>)
 800b918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b91c:	2206      	movs	r2, #6
 800b91e:	f7f4 fc57 	bl	80001d0 <memchr>
 800b922:	2800      	cmp	r0, #0
 800b924:	d03f      	beq.n	800b9a6 <_vfiprintf_r+0x20e>
 800b926:	4b26      	ldr	r3, [pc, #152]	; (800b9c0 <_vfiprintf_r+0x228>)
 800b928:	bb1b      	cbnz	r3, 800b972 <_vfiprintf_r+0x1da>
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	3307      	adds	r3, #7
 800b92e:	f023 0307 	bic.w	r3, r3, #7
 800b932:	3308      	adds	r3, #8
 800b934:	9303      	str	r3, [sp, #12]
 800b936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b938:	443b      	add	r3, r7
 800b93a:	9309      	str	r3, [sp, #36]	; 0x24
 800b93c:	e768      	b.n	800b810 <_vfiprintf_r+0x78>
 800b93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b942:	460c      	mov	r4, r1
 800b944:	2001      	movs	r0, #1
 800b946:	e7a6      	b.n	800b896 <_vfiprintf_r+0xfe>
 800b948:	2300      	movs	r3, #0
 800b94a:	3401      	adds	r4, #1
 800b94c:	9305      	str	r3, [sp, #20]
 800b94e:	4619      	mov	r1, r3
 800b950:	f04f 0c0a 	mov.w	ip, #10
 800b954:	4620      	mov	r0, r4
 800b956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b95a:	3a30      	subs	r2, #48	; 0x30
 800b95c:	2a09      	cmp	r2, #9
 800b95e:	d903      	bls.n	800b968 <_vfiprintf_r+0x1d0>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0c6      	beq.n	800b8f2 <_vfiprintf_r+0x15a>
 800b964:	9105      	str	r1, [sp, #20]
 800b966:	e7c4      	b.n	800b8f2 <_vfiprintf_r+0x15a>
 800b968:	fb0c 2101 	mla	r1, ip, r1, r2
 800b96c:	4604      	mov	r4, r0
 800b96e:	2301      	movs	r3, #1
 800b970:	e7f0      	b.n	800b954 <_vfiprintf_r+0x1bc>
 800b972:	ab03      	add	r3, sp, #12
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	462a      	mov	r2, r5
 800b978:	4b12      	ldr	r3, [pc, #72]	; (800b9c4 <_vfiprintf_r+0x22c>)
 800b97a:	a904      	add	r1, sp, #16
 800b97c:	4630      	mov	r0, r6
 800b97e:	f7fd fbb1 	bl	80090e4 <_printf_float>
 800b982:	4607      	mov	r7, r0
 800b984:	1c78      	adds	r0, r7, #1
 800b986:	d1d6      	bne.n	800b936 <_vfiprintf_r+0x19e>
 800b988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b98a:	07d9      	lsls	r1, r3, #31
 800b98c:	d405      	bmi.n	800b99a <_vfiprintf_r+0x202>
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	059a      	lsls	r2, r3, #22
 800b992:	d402      	bmi.n	800b99a <_vfiprintf_r+0x202>
 800b994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b996:	f7fe f8fc 	bl	8009b92 <__retarget_lock_release_recursive>
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	065b      	lsls	r3, r3, #25
 800b99e:	f53f af1d 	bmi.w	800b7dc <_vfiprintf_r+0x44>
 800b9a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9a4:	e71c      	b.n	800b7e0 <_vfiprintf_r+0x48>
 800b9a6:	ab03      	add	r3, sp, #12
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	462a      	mov	r2, r5
 800b9ac:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <_vfiprintf_r+0x22c>)
 800b9ae:	a904      	add	r1, sp, #16
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7fd fe3b 	bl	800962c <_printf_i>
 800b9b6:	e7e4      	b.n	800b982 <_vfiprintf_r+0x1ea>
 800b9b8:	0800bf4c 	.word	0x0800bf4c
 800b9bc:	0800bf56 	.word	0x0800bf56
 800b9c0:	080090e5 	.word	0x080090e5
 800b9c4:	0800b775 	.word	0x0800b775
 800b9c8:	0800bf52 	.word	0x0800bf52

0800b9cc <__swbuf_r>:
 800b9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ce:	460e      	mov	r6, r1
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	b118      	cbz	r0, 800b9de <__swbuf_r+0x12>
 800b9d6:	6a03      	ldr	r3, [r0, #32]
 800b9d8:	b90b      	cbnz	r3, 800b9de <__swbuf_r+0x12>
 800b9da:	f7fd ffc3 	bl	8009964 <__sinit>
 800b9de:	69a3      	ldr	r3, [r4, #24]
 800b9e0:	60a3      	str	r3, [r4, #8]
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	071a      	lsls	r2, r3, #28
 800b9e6:	d525      	bpl.n	800ba34 <__swbuf_r+0x68>
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	b31b      	cbz	r3, 800ba34 <__swbuf_r+0x68>
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	6922      	ldr	r2, [r4, #16]
 800b9f0:	1a98      	subs	r0, r3, r2
 800b9f2:	6963      	ldr	r3, [r4, #20]
 800b9f4:	b2f6      	uxtb	r6, r6
 800b9f6:	4283      	cmp	r3, r0
 800b9f8:	4637      	mov	r7, r6
 800b9fa:	dc04      	bgt.n	800ba06 <__swbuf_r+0x3a>
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f7ff fd9e 	bl	800b540 <_fflush_r>
 800ba04:	b9e0      	cbnz	r0, 800ba40 <__swbuf_r+0x74>
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	60a3      	str	r3, [r4, #8]
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	6022      	str	r2, [r4, #0]
 800ba12:	701e      	strb	r6, [r3, #0]
 800ba14:	6962      	ldr	r2, [r4, #20]
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d004      	beq.n	800ba26 <__swbuf_r+0x5a>
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	07db      	lsls	r3, r3, #31
 800ba20:	d506      	bpl.n	800ba30 <__swbuf_r+0x64>
 800ba22:	2e0a      	cmp	r6, #10
 800ba24:	d104      	bne.n	800ba30 <__swbuf_r+0x64>
 800ba26:	4621      	mov	r1, r4
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f7ff fd89 	bl	800b540 <_fflush_r>
 800ba2e:	b938      	cbnz	r0, 800ba40 <__swbuf_r+0x74>
 800ba30:	4638      	mov	r0, r7
 800ba32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba34:	4621      	mov	r1, r4
 800ba36:	4628      	mov	r0, r5
 800ba38:	f000 f806 	bl	800ba48 <__swsetup_r>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d0d5      	beq.n	800b9ec <__swbuf_r+0x20>
 800ba40:	f04f 37ff 	mov.w	r7, #4294967295
 800ba44:	e7f4      	b.n	800ba30 <__swbuf_r+0x64>
	...

0800ba48 <__swsetup_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4b2a      	ldr	r3, [pc, #168]	; (800baf4 <__swsetup_r+0xac>)
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	460c      	mov	r4, r1
 800ba52:	b118      	cbz	r0, 800ba5c <__swsetup_r+0x14>
 800ba54:	6a03      	ldr	r3, [r0, #32]
 800ba56:	b90b      	cbnz	r3, 800ba5c <__swsetup_r+0x14>
 800ba58:	f7fd ff84 	bl	8009964 <__sinit>
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba62:	0718      	lsls	r0, r3, #28
 800ba64:	d422      	bmi.n	800baac <__swsetup_r+0x64>
 800ba66:	06d9      	lsls	r1, r3, #27
 800ba68:	d407      	bmi.n	800ba7a <__swsetup_r+0x32>
 800ba6a:	2309      	movs	r3, #9
 800ba6c:	602b      	str	r3, [r5, #0]
 800ba6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	e034      	b.n	800bae4 <__swsetup_r+0x9c>
 800ba7a:	0758      	lsls	r0, r3, #29
 800ba7c:	d512      	bpl.n	800baa4 <__swsetup_r+0x5c>
 800ba7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba80:	b141      	cbz	r1, 800ba94 <__swsetup_r+0x4c>
 800ba82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba86:	4299      	cmp	r1, r3
 800ba88:	d002      	beq.n	800ba90 <__swsetup_r+0x48>
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f7fe fefe 	bl	800a88c <_free_r>
 800ba90:	2300      	movs	r3, #0
 800ba92:	6363      	str	r3, [r4, #52]	; 0x34
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba9a:	81a3      	strh	r3, [r4, #12]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	6063      	str	r3, [r4, #4]
 800baa0:	6923      	ldr	r3, [r4, #16]
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	f043 0308 	orr.w	r3, r3, #8
 800baaa:	81a3      	strh	r3, [r4, #12]
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	b94b      	cbnz	r3, 800bac4 <__swsetup_r+0x7c>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baba:	d003      	beq.n	800bac4 <__swsetup_r+0x7c>
 800babc:	4621      	mov	r1, r4
 800babe:	4628      	mov	r0, r5
 800bac0:	f000 f884 	bl	800bbcc <__smakebuf_r>
 800bac4:	89a0      	ldrh	r0, [r4, #12]
 800bac6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baca:	f010 0301 	ands.w	r3, r0, #1
 800bace:	d00a      	beq.n	800bae6 <__swsetup_r+0x9e>
 800bad0:	2300      	movs	r3, #0
 800bad2:	60a3      	str	r3, [r4, #8]
 800bad4:	6963      	ldr	r3, [r4, #20]
 800bad6:	425b      	negs	r3, r3
 800bad8:	61a3      	str	r3, [r4, #24]
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	b943      	cbnz	r3, 800baf0 <__swsetup_r+0xa8>
 800bade:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bae2:	d1c4      	bne.n	800ba6e <__swsetup_r+0x26>
 800bae4:	bd38      	pop	{r3, r4, r5, pc}
 800bae6:	0781      	lsls	r1, r0, #30
 800bae8:	bf58      	it	pl
 800baea:	6963      	ldrpl	r3, [r4, #20]
 800baec:	60a3      	str	r3, [r4, #8]
 800baee:	e7f4      	b.n	800bada <__swsetup_r+0x92>
 800baf0:	2000      	movs	r0, #0
 800baf2:	e7f7      	b.n	800bae4 <__swsetup_r+0x9c>
 800baf4:	20000154 	.word	0x20000154

0800baf8 <_raise_r>:
 800baf8:	291f      	cmp	r1, #31
 800bafa:	b538      	push	{r3, r4, r5, lr}
 800bafc:	4604      	mov	r4, r0
 800bafe:	460d      	mov	r5, r1
 800bb00:	d904      	bls.n	800bb0c <_raise_r+0x14>
 800bb02:	2316      	movs	r3, #22
 800bb04:	6003      	str	r3, [r0, #0]
 800bb06:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bb0e:	b112      	cbz	r2, 800bb16 <_raise_r+0x1e>
 800bb10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb14:	b94b      	cbnz	r3, 800bb2a <_raise_r+0x32>
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 f830 	bl	800bb7c <_getpid_r>
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	4601      	mov	r1, r0
 800bb20:	4620      	mov	r0, r4
 800bb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb26:	f000 b817 	b.w	800bb58 <_kill_r>
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d00a      	beq.n	800bb44 <_raise_r+0x4c>
 800bb2e:	1c59      	adds	r1, r3, #1
 800bb30:	d103      	bne.n	800bb3a <_raise_r+0x42>
 800bb32:	2316      	movs	r3, #22
 800bb34:	6003      	str	r3, [r0, #0]
 800bb36:	2001      	movs	r0, #1
 800bb38:	e7e7      	b.n	800bb0a <_raise_r+0x12>
 800bb3a:	2400      	movs	r4, #0
 800bb3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb40:	4628      	mov	r0, r5
 800bb42:	4798      	blx	r3
 800bb44:	2000      	movs	r0, #0
 800bb46:	e7e0      	b.n	800bb0a <_raise_r+0x12>

0800bb48 <raise>:
 800bb48:	4b02      	ldr	r3, [pc, #8]	; (800bb54 <raise+0xc>)
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	6818      	ldr	r0, [r3, #0]
 800bb4e:	f7ff bfd3 	b.w	800baf8 <_raise_r>
 800bb52:	bf00      	nop
 800bb54:	20000154 	.word	0x20000154

0800bb58 <_kill_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4d07      	ldr	r5, [pc, #28]	; (800bb78 <_kill_r+0x20>)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	4611      	mov	r1, r2
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	f7f5 fb99 	bl	800129c <_kill>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	d102      	bne.n	800bb74 <_kill_r+0x1c>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	b103      	cbz	r3, 800bb74 <_kill_r+0x1c>
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	bd38      	pop	{r3, r4, r5, pc}
 800bb76:	bf00      	nop
 800bb78:	200020d8 	.word	0x200020d8

0800bb7c <_getpid_r>:
 800bb7c:	f7f5 bb86 	b.w	800128c <_getpid>

0800bb80 <__swhatbuf_r>:
 800bb80:	b570      	push	{r4, r5, r6, lr}
 800bb82:	460c      	mov	r4, r1
 800bb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb88:	2900      	cmp	r1, #0
 800bb8a:	b096      	sub	sp, #88	; 0x58
 800bb8c:	4615      	mov	r5, r2
 800bb8e:	461e      	mov	r6, r3
 800bb90:	da0d      	bge.n	800bbae <__swhatbuf_r+0x2e>
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb98:	f04f 0100 	mov.w	r1, #0
 800bb9c:	bf0c      	ite	eq
 800bb9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bba2:	2340      	movne	r3, #64	; 0x40
 800bba4:	2000      	movs	r0, #0
 800bba6:	6031      	str	r1, [r6, #0]
 800bba8:	602b      	str	r3, [r5, #0]
 800bbaa:	b016      	add	sp, #88	; 0x58
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	466a      	mov	r2, sp
 800bbb0:	f000 f848 	bl	800bc44 <_fstat_r>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	dbec      	blt.n	800bb92 <__swhatbuf_r+0x12>
 800bbb8:	9901      	ldr	r1, [sp, #4]
 800bbba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bbbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bbc2:	4259      	negs	r1, r3
 800bbc4:	4159      	adcs	r1, r3
 800bbc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbca:	e7eb      	b.n	800bba4 <__swhatbuf_r+0x24>

0800bbcc <__smakebuf_r>:
 800bbcc:	898b      	ldrh	r3, [r1, #12]
 800bbce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbd0:	079d      	lsls	r5, r3, #30
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	d507      	bpl.n	800bbe8 <__smakebuf_r+0x1c>
 800bbd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	6123      	str	r3, [r4, #16]
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	6163      	str	r3, [r4, #20]
 800bbe4:	b002      	add	sp, #8
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	ab01      	add	r3, sp, #4
 800bbea:	466a      	mov	r2, sp
 800bbec:	f7ff ffc8 	bl	800bb80 <__swhatbuf_r>
 800bbf0:	9900      	ldr	r1, [sp, #0]
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7fe febd 	bl	800a974 <_malloc_r>
 800bbfa:	b948      	cbnz	r0, 800bc10 <__smakebuf_r+0x44>
 800bbfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc00:	059a      	lsls	r2, r3, #22
 800bc02:	d4ef      	bmi.n	800bbe4 <__smakebuf_r+0x18>
 800bc04:	f023 0303 	bic.w	r3, r3, #3
 800bc08:	f043 0302 	orr.w	r3, r3, #2
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	e7e3      	b.n	800bbd8 <__smakebuf_r+0xc>
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	6020      	str	r0, [r4, #0]
 800bc14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	9b00      	ldr	r3, [sp, #0]
 800bc1c:	6163      	str	r3, [r4, #20]
 800bc1e:	9b01      	ldr	r3, [sp, #4]
 800bc20:	6120      	str	r0, [r4, #16]
 800bc22:	b15b      	cbz	r3, 800bc3c <__smakebuf_r+0x70>
 800bc24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f000 f81d 	bl	800bc68 <_isatty_r>
 800bc2e:	b128      	cbz	r0, 800bc3c <__smakebuf_r+0x70>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	f023 0303 	bic.w	r3, r3, #3
 800bc36:	f043 0301 	orr.w	r3, r3, #1
 800bc3a:	81a3      	strh	r3, [r4, #12]
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	431d      	orrs	r5, r3
 800bc40:	81a5      	strh	r5, [r4, #12]
 800bc42:	e7cf      	b.n	800bbe4 <__smakebuf_r+0x18>

0800bc44 <_fstat_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	; (800bc64 <_fstat_r+0x20>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	4611      	mov	r1, r2
 800bc50:	602b      	str	r3, [r5, #0]
 800bc52:	f7f5 fb82 	bl	800135a <_fstat>
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	d102      	bne.n	800bc60 <_fstat_r+0x1c>
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	b103      	cbz	r3, 800bc60 <_fstat_r+0x1c>
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop
 800bc64:	200020d8 	.word	0x200020d8

0800bc68 <_isatty_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4d06      	ldr	r5, [pc, #24]	; (800bc84 <_isatty_r+0x1c>)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4604      	mov	r4, r0
 800bc70:	4608      	mov	r0, r1
 800bc72:	602b      	str	r3, [r5, #0]
 800bc74:	f7f5 fb81 	bl	800137a <_isatty>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_isatty_r+0x1a>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_isatty_r+0x1a>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	200020d8 	.word	0x200020d8

0800bc88 <_init>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr

0800bc94 <_fini>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr
