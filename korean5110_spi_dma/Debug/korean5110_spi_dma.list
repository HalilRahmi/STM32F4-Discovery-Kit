
korean5110_spi_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c50  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c4  080046c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046cc  080046cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000002d0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007e0e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019b8  00000000  00000000  00027e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000758  00000000  00000000  00029850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002027e  00000000  00000000  00029fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009618  00000000  00000000  0004a226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1841  00000000  00000000  0005383e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000056a  00000000  00000000  0011507f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d68  00000000  00000000  001155ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00117354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dc0 	.word	0x08003dc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003dc0 	.word	0x08003dc0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b970 	b.w	8000adc <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9e08      	ldr	r6, [sp, #32]
 800081a:	460d      	mov	r5, r1
 800081c:	4604      	mov	r4, r0
 800081e:	460f      	mov	r7, r1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14a      	bne.n	80008ba <__udivmoddi4+0xa6>
 8000824:	428a      	cmp	r2, r1
 8000826:	4694      	mov	ip, r2
 8000828:	d965      	bls.n	80008f6 <__udivmoddi4+0xe2>
 800082a:	fab2 f382 	clz	r3, r2
 800082e:	b143      	cbz	r3, 8000842 <__udivmoddi4+0x2e>
 8000830:	fa02 fc03 	lsl.w	ip, r2, r3
 8000834:	f1c3 0220 	rsb	r2, r3, #32
 8000838:	409f      	lsls	r7, r3
 800083a:	fa20 f202 	lsr.w	r2, r0, r2
 800083e:	4317      	orrs	r7, r2
 8000840:	409c      	lsls	r4, r3
 8000842:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000846:	fa1f f58c 	uxth.w	r5, ip
 800084a:	fbb7 f1fe 	udiv	r1, r7, lr
 800084e:	0c22      	lsrs	r2, r4, #16
 8000850:	fb0e 7711 	mls	r7, lr, r1, r7
 8000854:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000858:	fb01 f005 	mul.w	r0, r1, r5
 800085c:	4290      	cmp	r0, r2
 800085e:	d90a      	bls.n	8000876 <__udivmoddi4+0x62>
 8000860:	eb1c 0202 	adds.w	r2, ip, r2
 8000864:	f101 37ff 	add.w	r7, r1, #4294967295
 8000868:	f080 811c 	bcs.w	8000aa4 <__udivmoddi4+0x290>
 800086c:	4290      	cmp	r0, r2
 800086e:	f240 8119 	bls.w	8000aa4 <__udivmoddi4+0x290>
 8000872:	3902      	subs	r1, #2
 8000874:	4462      	add	r2, ip
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	b2a4      	uxth	r4, r4
 800087a:	fbb2 f0fe 	udiv	r0, r2, lr
 800087e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000882:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000886:	fb00 f505 	mul.w	r5, r0, r5
 800088a:	42a5      	cmp	r5, r4
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x90>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f100 32ff 	add.w	r2, r0, #4294967295
 8000896:	f080 8107 	bcs.w	8000aa8 <__udivmoddi4+0x294>
 800089a:	42a5      	cmp	r5, r4
 800089c:	f240 8104 	bls.w	8000aa8 <__udivmoddi4+0x294>
 80008a0:	4464      	add	r4, ip
 80008a2:	3802      	subs	r0, #2
 80008a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008a8:	1b64      	subs	r4, r4, r5
 80008aa:	2100      	movs	r1, #0
 80008ac:	b11e      	cbz	r6, 80008b6 <__udivmoddi4+0xa2>
 80008ae:	40dc      	lsrs	r4, r3
 80008b0:	2300      	movs	r3, #0
 80008b2:	e9c6 4300 	strd	r4, r3, [r6]
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0xbc>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f000 80ed 	beq.w	8000a9e <__udivmoddi4+0x28a>
 80008c4:	2100      	movs	r1, #0
 80008c6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ca:	4608      	mov	r0, r1
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	fab3 f183 	clz	r1, r3
 80008d4:	2900      	cmp	r1, #0
 80008d6:	d149      	bne.n	800096c <__udivmoddi4+0x158>
 80008d8:	42ab      	cmp	r3, r5
 80008da:	d302      	bcc.n	80008e2 <__udivmoddi4+0xce>
 80008dc:	4282      	cmp	r2, r0
 80008de:	f200 80f8 	bhi.w	8000ad2 <__udivmoddi4+0x2be>
 80008e2:	1a84      	subs	r4, r0, r2
 80008e4:	eb65 0203 	sbc.w	r2, r5, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	4617      	mov	r7, r2
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d0e2      	beq.n	80008b6 <__udivmoddi4+0xa2>
 80008f0:	e9c6 4700 	strd	r4, r7, [r6]
 80008f4:	e7df      	b.n	80008b6 <__udivmoddi4+0xa2>
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xe6>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f382 	clz	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 8090 	bne.w	8000a24 <__udivmoddi4+0x210>
 8000904:	1a8a      	subs	r2, r1, r2
 8000906:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090a:	fa1f fe8c 	uxth.w	lr, ip
 800090e:	2101      	movs	r1, #1
 8000910:	fbb2 f5f7 	udiv	r5, r2, r7
 8000914:	fb07 2015 	mls	r0, r7, r5, r2
 8000918:	0c22      	lsrs	r2, r4, #16
 800091a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800091e:	fb0e f005 	mul.w	r0, lr, r5
 8000922:	4290      	cmp	r0, r2
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x124>
 8000926:	eb1c 0202 	adds.w	r2, ip, r2
 800092a:	f105 38ff 	add.w	r8, r5, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x122>
 8000930:	4290      	cmp	r0, r2
 8000932:	f200 80cb 	bhi.w	8000acc <__udivmoddi4+0x2b8>
 8000936:	4645      	mov	r5, r8
 8000938:	1a12      	subs	r2, r2, r0
 800093a:	b2a4      	uxth	r4, r4
 800093c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000940:	fb07 2210 	mls	r2, r7, r0, r2
 8000944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000948:	fb0e fe00 	mul.w	lr, lr, r0
 800094c:	45a6      	cmp	lr, r4
 800094e:	d908      	bls.n	8000962 <__udivmoddi4+0x14e>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	d202      	bcs.n	8000960 <__udivmoddi4+0x14c>
 800095a:	45a6      	cmp	lr, r4
 800095c:	f200 80bb 	bhi.w	8000ad6 <__udivmoddi4+0x2c2>
 8000960:	4610      	mov	r0, r2
 8000962:	eba4 040e 	sub.w	r4, r4, lr
 8000966:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800096a:	e79f      	b.n	80008ac <__udivmoddi4+0x98>
 800096c:	f1c1 0720 	rsb	r7, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 fc07 	lsr.w	ip, r2, r7
 8000976:	ea4c 0c03 	orr.w	ip, ip, r3
 800097a:	fa05 f401 	lsl.w	r4, r5, r1
 800097e:	fa20 f307 	lsr.w	r3, r0, r7
 8000982:	40fd      	lsrs	r5, r7
 8000984:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000988:	4323      	orrs	r3, r4
 800098a:	fbb5 f8f9 	udiv	r8, r5, r9
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	fb09 5518 	mls	r5, r9, r8, r5
 8000996:	0c1c      	lsrs	r4, r3, #16
 8000998:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800099c:	fb08 f50e 	mul.w	r5, r8, lr
 80009a0:	42a5      	cmp	r5, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	fa00 f001 	lsl.w	r0, r0, r1
 80009aa:	d90b      	bls.n	80009c4 <__udivmoddi4+0x1b0>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009b4:	f080 8088 	bcs.w	8000ac8 <__udivmoddi4+0x2b4>
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	f240 8085 	bls.w	8000ac8 <__udivmoddi4+0x2b4>
 80009be:	f1a8 0802 	sub.w	r8, r8, #2
 80009c2:	4464      	add	r4, ip
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	b29d      	uxth	r5, r3
 80009c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009cc:	fb09 4413 	mls	r4, r9, r3, r4
 80009d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d908      	bls.n	80009ee <__udivmoddi4+0x1da>
 80009dc:	eb1c 0404 	adds.w	r4, ip, r4
 80009e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009e4:	d26c      	bcs.n	8000ac0 <__udivmoddi4+0x2ac>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	d96a      	bls.n	8000ac0 <__udivmoddi4+0x2ac>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	4464      	add	r4, ip
 80009ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f2:	fba3 9502 	umull	r9, r5, r3, r2
 80009f6:	eba4 040e 	sub.w	r4, r4, lr
 80009fa:	42ac      	cmp	r4, r5
 80009fc:	46c8      	mov	r8, r9
 80009fe:	46ae      	mov	lr, r5
 8000a00:	d356      	bcc.n	8000ab0 <__udivmoddi4+0x29c>
 8000a02:	d053      	beq.n	8000aac <__udivmoddi4+0x298>
 8000a04:	b156      	cbz	r6, 8000a1c <__udivmoddi4+0x208>
 8000a06:	ebb0 0208 	subs.w	r2, r0, r8
 8000a0a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a12:	40ca      	lsrs	r2, r1
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	4317      	orrs	r7, r2
 8000a18:	e9c6 7400 	strd	r7, r4, [r6]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a24:	f1c3 0120 	rsb	r1, r3, #32
 8000a28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a2c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a30:	fa25 f101 	lsr.w	r1, r5, r1
 8000a34:	409d      	lsls	r5, r3
 8000a36:	432a      	orrs	r2, r5
 8000a38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a44:	fb07 1510 	mls	r5, r7, r0, r1
 8000a48:	0c11      	lsrs	r1, r2, #16
 8000a4a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a4e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a52:	428d      	cmp	r5, r1
 8000a54:	fa04 f403 	lsl.w	r4, r4, r3
 8000a58:	d908      	bls.n	8000a6c <__udivmoddi4+0x258>
 8000a5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a62:	d22f      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a64:	428d      	cmp	r5, r1
 8000a66:	d92d      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1b49      	subs	r1, r1, r5
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a74:	fb07 1115 	mls	r1, r7, r5, r1
 8000a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a80:	4291      	cmp	r1, r2
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x282>
 8000a84:	eb1c 0202 	adds.w	r2, ip, r2
 8000a88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a8c:	d216      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a8e:	4291      	cmp	r1, r2
 8000a90:	d914      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a92:	3d02      	subs	r5, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a52      	subs	r2, r2, r1
 8000a98:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a9c:	e738      	b.n	8000910 <__udivmoddi4+0xfc>
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e708      	b.n	80008b6 <__udivmoddi4+0xa2>
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e6e6      	b.n	8000876 <__udivmoddi4+0x62>
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	e6fb      	b.n	80008a4 <__udivmoddi4+0x90>
 8000aac:	4548      	cmp	r0, r9
 8000aae:	d2a9      	bcs.n	8000a04 <__udivmoddi4+0x1f0>
 8000ab0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ab4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	e7a3      	b.n	8000a04 <__udivmoddi4+0x1f0>
 8000abc:	4645      	mov	r5, r8
 8000abe:	e7ea      	b.n	8000a96 <__udivmoddi4+0x282>
 8000ac0:	462b      	mov	r3, r5
 8000ac2:	e794      	b.n	80009ee <__udivmoddi4+0x1da>
 8000ac4:	4640      	mov	r0, r8
 8000ac6:	e7d1      	b.n	8000a6c <__udivmoddi4+0x258>
 8000ac8:	46d0      	mov	r8, sl
 8000aca:	e77b      	b.n	80009c4 <__udivmoddi4+0x1b0>
 8000acc:	3d02      	subs	r5, #2
 8000ace:	4462      	add	r2, ip
 8000ad0:	e732      	b.n	8000938 <__udivmoddi4+0x124>
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	e70a      	b.n	80008ec <__udivmoddi4+0xd8>
 8000ad6:	4464      	add	r4, ip
 8000ad8:	3802      	subs	r0, #2
 8000ada:	e742      	b.n	8000962 <__udivmoddi4+0x14e>

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <HAL_SPI_TxCpltCallback>:

uint8_t FrameBuffer[N5110_PIXEL];
static const uint8_t *CurrentFont = SmallFont;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi->Instance == SPI2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_SPI_TxCpltCallback+0x30>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10a      	bne.n	8000b08 <HAL_SPI_TxCpltCallback+0x28>
  {
    SPI_Deselect();
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <HAL_SPI_TxCpltCallback+0x34>)
 8000afa:	f002 f8f5 	bl	8002ce8 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <HAL_SPI_TxCpltCallback+0x34>)
 8000b04:	f002 f909 	bl	8002d1a <HAL_GPIO_TogglePin>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40003800 	.word	0x40003800
 8000b14:	40020c00 	.word	0x40020c00

08000b18 <N5110_Write>:


static bool N5110_Write(uint8_t data, uint8_t mode)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
  SPI_Select();
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <N5110_Write+0x6c>)
 8000b30:	f002 f8da 	bl	8002ce8 <HAL_GPIO_WritePin>

  if(mode == N5110_CMD)
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d106      	bne.n	8000b48 <N5110_Write+0x30>
  {
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <N5110_Write+0x6c>)
 8000b42:	f002 f8d1 	bl	8002ce8 <HAL_GPIO_WritePin>
 8000b46:	e011      	b.n	8000b6c <N5110_Write+0x54>
  }
  else if(mode == N5110_DATA)
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d106      	bne.n	8000b5c <N5110_Write+0x44>
  {
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <N5110_Write+0x6c>)
 8000b56:	f002 f8c7 	bl	8002ce8 <HAL_GPIO_WritePin>
 8000b5a:	e007      	b.n	8000b6c <N5110_Write+0x54>
  }
  else
  {
    SPI_Deselect();
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	4808      	ldr	r0, [pc, #32]	; (8000b84 <N5110_Write+0x6c>)
 8000b64:	f002 f8c0 	bl	8002ce8 <HAL_GPIO_WritePin>
    return false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e006      	b.n	8000b7a <N5110_Write+0x62>
  }

  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <N5110_Write+0x70>)
 8000b74:	f002 fdda 	bl	800372c <HAL_SPI_Transmit_DMA>
  //HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
  //SPI_Deselect();

  return true;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	20000224 	.word	0x20000224

08000b8c <N5110_BufferWrite>:

static bool N5110_BufferWrite(uint8_t *data, uint16_t len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  SPI_Select();
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <N5110_BufferWrite+0x3c>)
 8000ba0:	f002 f8a2 	bl	8002ce8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <N5110_BufferWrite+0x3c>)
 8000bac:	f002 f89c 	bl	8002ce8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_DMA(&hspi2, data, len);
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <N5110_BufferWrite+0x40>)
 8000bb8:	f002 fdb8 	bl	800372c <HAL_SPI_Transmit_DMA>
  //HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
  //SPI_Deselect();

  return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020c00 	.word	0x40020c00
 8000bcc:	20000224 	.word	0x20000224

08000bd0 <N5110_InvertDisplay>:

  return true;
}

bool N5110_InvertDisplay(bool invert)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if(invert)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00b      	beq.n	8000bf8 <N5110_InvertDisplay+0x28>
  {
    if(!N5110_Write(PCD8544_CMD_DISPLAYCONTROL | PCD8544_BIT_DISPLAYINVERTED, N5110_CMD)) return false;
 8000be0:	2100      	movs	r1, #0
 8000be2:	200d      	movs	r0, #13
 8000be4:	f7ff ff98 	bl	8000b18 <N5110_Write>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f083 0301 	eor.w	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00d      	beq.n	8000c10 <N5110_InvertDisplay+0x40>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e00c      	b.n	8000c12 <N5110_InvertDisplay+0x42>
  }
  else
  {
    if(!N5110_Write(PCD8544_CMD_DISPLAYCONTROL | PCD8544_BIT_DISPLAYNORMAL, N5110_CMD)) return false;
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	200c      	movs	r0, #12
 8000bfc:	f7ff ff8c 	bl	8000b18 <N5110_Write>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <N5110_InvertDisplay+0x40>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e000      	b.n	8000c12 <N5110_InvertDisplay+0x42>
  }

  return true;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <N5110_Update>:

bool N5110_Update()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Move to (0,0) position */
  if(!N5110_Write(PCD8544_CMD_SETXADDR, N5110_CMD)) return false;
 8000c20:	2100      	movs	r1, #0
 8000c22:	2080      	movs	r0, #128	; 0x80
 8000c24:	f7ff ff78 	bl	8000b18 <N5110_Write>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f083 0301 	eor.w	r3, r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <N5110_Update+0x1c>
 8000c34:	2300      	movs	r3, #0
 8000c36:	e01c      	b.n	8000c72 <N5110_Update+0x56>
  if(!N5110_Write(PCD8544_CMD_SETYADDR, N5110_CMD)) return false;
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2040      	movs	r0, #64	; 0x40
 8000c3c:	f7ff ff6c 	bl	8000b18 <N5110_Write>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <N5110_Update+0x34>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e010      	b.n	8000c72 <N5110_Update+0x56>

  if(!N5110_BufferWrite(FrameBuffer, N5110_PIXEL)) return false;
 8000c50:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <N5110_Update+0x5c>)
 8000c56:	f7ff ff99 	bl	8000b8c <N5110_BufferWrite>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f083 0301 	eor.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <N5110_Update+0x4e>
 8000c66:	2300      	movs	r3, #0
 8000c68:	e003      	b.n	8000c72 <N5110_Update+0x56>
  HAL_Delay(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f001 f9d8 	bl	8002020 <HAL_Delay>

  return true;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000002c 	.word	0x2000002c

08000c7c <N5110_Clear>:

void N5110_Clear()
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  for(int i = 0; i < N5110_PIXEL; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <N5110_Clear+0x1c>
  {
    FrameBuffer[i] = 0x00;
 8000c88:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <N5110_Clear+0x34>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < N5110_PIXEL; i++)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000c9e:	dbf3      	blt.n	8000c88 <N5110_Clear+0xc>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000002c 	.word	0x2000002c

08000cb4 <N5110_SetPixel>:
    FrameBuffer[i] = 0xFF;
  }
}

void N5110_SetPixel(uint8_t x, uint8_t y, bool set)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]
  uint16_t by;
  uint8_t  bi;

  if(x < 0 || x >= N5110_MAX_WIDTH || y < 0 || y >= N5110_MAX_HEIGHT) return;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b53      	cmp	r3, #83	; 0x53
 8000cca:	d83b      	bhi.n	8000d44 <N5110_SetPixel+0x90>
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	2b2f      	cmp	r3, #47	; 0x2f
 8000cd0:	d838      	bhi.n	8000d44 <N5110_SetPixel+0x90>

  by = (y / 8) * N5110_MAX_WIDTH + x;
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	0052      	lsls	r2, r2, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	00d2      	lsls	r2, r2, #3
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4413      	add	r3, r2
 8000cf0:	81fb      	strh	r3, [r7, #14]
  bi = y % 8;
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	737b      	strb	r3, [r7, #13]

  if(set)
 8000cfa:	797b      	ldrb	r3, [r7, #5]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00f      	beq.n	8000d20 <N5110_SetPixel+0x6c>
  {
    FrameBuffer[by] |= (1 << bi);
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <N5110_SetPixel+0x9c>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	b25a      	sxtb	r2, r3
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b25a      	sxtb	r2, r3
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	b2d1      	uxtb	r1, r2
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <N5110_SetPixel+0x9c>)
 8000d1c:	54d1      	strb	r1, [r2, r3]
 8000d1e:	e012      	b.n	8000d46 <N5110_SetPixel+0x92>
  }
  else
  {
    FrameBuffer[by] &= ~(1 << bi);
 8000d20:	89fb      	ldrh	r3, [r7, #14]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <N5110_SetPixel+0x9c>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4013      	ands	r3, r2
 8000d38:	b25a      	sxtb	r2, r3
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	b2d1      	uxtb	r1, r2
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <N5110_SetPixel+0x9c>)
 8000d40:	54d1      	strb	r1, [r2, r3]
 8000d42:	e000      	b.n	8000d46 <N5110_SetPixel+0x92>
  if(x < 0 || x >= N5110_MAX_WIDTH || y < 0 || y >= N5110_MAX_HEIGHT) return;
 8000d44:	bf00      	nop
  }
}
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	2000002c 	.word	0x2000002c

08000d54 <N5110_SetFont>:

void N5110_SetFont(const uint8_t * font)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  CurrentFont = font;
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <N5110_SetFont+0x1c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000000 	.word	0x20000000

08000d74 <N5110_PrintChar>:

void N5110_PrintChar(uint8_t x, uint8_t y, char ch, bool set)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b08b      	sub	sp, #44	; 0x2c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4623      	mov	r3, r4
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	4603      	mov	r3, r0
 8000d88:	71bb      	strb	r3, [r7, #6]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	717b      	strb	r3, [r7, #5]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	713b      	strb	r3, [r7, #4]
  uint8_t f_width  = CurrentFont[0];
 8000d92:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <N5110_PrintChar+0x230>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	73fb      	strb	r3, [r7, #15]
  uint8_t f_height = CurrentFont[1];
 8000d9a:	4b82      	ldr	r3, [pc, #520]	; (8000fa4 <N5110_PrintChar+0x230>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	73bb      	strb	r3, [r7, #14]
  uint8_t f_offset = CurrentFont[2];
 8000da4:	4b7f      	ldr	r3, [pc, #508]	; (8000fa4 <N5110_PrintChar+0x230>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3302      	adds	r3, #2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	737b      	strb	r3, [r7, #13]

  if((f_height % 8) == 0)
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d17b      	bne.n	8000eb2 <N5110_PrintChar+0x13e>
  {
    uint16_t f_index = (ch - f_offset) * (f_width * f_height / 8) + FONT_HEADER_SIZE;
 8000dba:	797a      	ldrb	r2, [r7, #5]
 8000dbc:	7b7b      	ldrb	r3, [r7, #13]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	7bb9      	ldrb	r1, [r7, #14]
 8000dc6:	fb01 f303 	mul.w	r3, r1, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da00      	bge.n	8000dd0 <N5110_PrintChar+0x5c>
 8000dce:	3307      	adds	r3, #7
 8000dd0:	10db      	asrs	r3, r3, #3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	fb12 f303 	smulbb	r3, r2, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	3304      	adds	r3, #4
 8000ddc:	817b      	strh	r3, [r7, #10]
    for(int row = 0; row < f_height / 8; row++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
 8000de2:	e05e      	b.n	8000ea2 <N5110_PrintChar+0x12e>
    {
      for(int cx = 0; cx < f_width; cx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
 8000de8:	e054      	b.n	8000e94 <N5110_PrintChar+0x120>
      {
        for(int bi = 0; bi < 8; bi++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e04b      	b.n	8000e88 <N5110_PrintChar+0x114>
        {
          uint8_t cbyte = CurrentFont[f_index + cx + (row * f_width)];
 8000df0:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <N5110_PrintChar+0x230>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	8979      	ldrh	r1, [r7, #10]
 8000df6:	6a3a      	ldr	r2, [r7, #32]
 8000df8:	4411      	add	r1, r2
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dfe:	fb00 f202 	mul.w	r2, r0, r2
 8000e02:	440a      	add	r2, r1
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	727b      	strb	r3, [r7, #9]
          if((cbyte & (1 << bi)) != 0)
 8000e0a:	7a7a      	ldrb	r2, [r7, #9]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	fa42 f303 	asr.w	r3, r2, r3
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d014      	beq.n	8000e44 <N5110_PrintChar+0xd0>
          {
            N5110_SetPixel(x + cx, y + row * 8 + bi, set);
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4413      	add	r3, r2
 8000e22:	b2d8      	uxtb	r0, r3
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4413      	add	r3, r2
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	793a      	ldrb	r2, [r7, #4]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff ff39 	bl	8000cb4 <N5110_SetPixel>
 8000e42:	e01e      	b.n	8000e82 <N5110_PrintChar+0x10e>
          }
          else
          {
            N5110_SetPixel(x + cx, y + row * 8 + bi, !set);
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b2d8      	uxtb	r0, r3
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	4413      	add	r3, r2
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2d9      	uxtb	r1, r3
 8000e64:	793b      	ldrb	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bf14      	ite	ne
 8000e6a:	2301      	movne	r3, #1
 8000e6c:	2300      	moveq	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f083 0301 	eor.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f7ff ff19 	bl	8000cb4 <N5110_SetPixel>
        for(int bi = 0; bi < 8; bi++)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3301      	adds	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	ddb0      	ble.n	8000df0 <N5110_PrintChar+0x7c>
      for(int cx = 0; cx < f_width; cx++)
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	3301      	adds	r3, #1
 8000e92:	623b      	str	r3, [r7, #32]
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	6a3a      	ldr	r2, [r7, #32]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dba6      	blt.n	8000dea <N5110_PrintChar+0x76>
    for(int row = 0; row < f_height / 8; row++)
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	08db      	lsrs	r3, r3, #3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	4293      	cmp	r3, r2
 8000eae:	db99      	blt.n	8000de4 <N5110_PrintChar+0x70>
          cbyte = CurrentFont[f_index];
        }
      }
    }
  }
}
 8000eb0:	e073      	b.n	8000f9a <N5110_PrintChar+0x226>
    uint16_t f_index = (ch - f_offset) * (f_width * f_height / 8) + FONT_HEADER_SIZE;
 8000eb2:	797a      	ldrb	r2, [r7, #5]
 8000eb4:	7b7b      	ldrb	r3, [r7, #13]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	7bb9      	ldrb	r1, [r7, #14]
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da00      	bge.n	8000ec8 <N5110_PrintChar+0x154>
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	10db      	asrs	r3, r3, #3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	fb12 f303 	smulbb	r3, r2, r3
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	837b      	strh	r3, [r7, #26]
    uint8_t cbyte = CurrentFont[f_index];
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <N5110_PrintChar+0x230>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	8b7b      	ldrh	r3, [r7, #26]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	767b      	strb	r3, [r7, #25]
    int8_t bi = 7;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	763b      	strb	r3, [r7, #24]
    for(int cx = 0; cx < f_width; cx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e052      	b.n	8000f92 <N5110_PrintChar+0x21e>
      for(int cy = 0; cy < f_height; cy++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e048      	b.n	8000f84 <N5110_PrintChar+0x210>
        if((cbyte & (1 << bi)) != 0)
 8000ef2:	7e7a      	ldrb	r2, [r7, #25]
 8000ef4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000ef8:	fa42 f303 	asr.w	r3, r2, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00e      	beq.n	8000f22 <N5110_PrintChar+0x1ae>
          N5110_SetPixel(x+cx, y+cy, set);
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b2d8      	uxtb	r0, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	79bb      	ldrb	r3, [r7, #6]
 8000f14:	4413      	add	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	793a      	ldrb	r2, [r7, #4]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff feca 	bl	8000cb4 <N5110_SetPixel>
 8000f20:	e018      	b.n	8000f54 <N5110_PrintChar+0x1e0>
          N5110_SetPixel(x+cx, y+cy, !set);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	4413      	add	r3, r2
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	793b      	ldrb	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f7ff feb0 	bl	8000cb4 <N5110_SetPixel>
        bi--;
 8000f54:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	763b      	strb	r3, [r7, #24]
        if(bi < 0)
 8000f60:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	da0a      	bge.n	8000f7e <N5110_PrintChar+0x20a>
          bi = 7;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	763b      	strb	r3, [r7, #24]
          f_index++;
 8000f6c:	8b7b      	ldrh	r3, [r7, #26]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	837b      	strh	r3, [r7, #26]
          cbyte = CurrentFont[f_index];
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <N5110_PrintChar+0x230>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	8b7b      	ldrh	r3, [r7, #26]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	767b      	strb	r3, [r7, #25]
      for(int cy = 0; cy < f_height; cy++)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	3301      	adds	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	7bbb      	ldrb	r3, [r7, #14]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbb2      	blt.n	8000ef2 <N5110_PrintChar+0x17e>
    for(int cx = 0; cx < f_width; cx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dba8      	blt.n	8000eec <N5110_PrintChar+0x178>
}
 8000f9a:	bf00      	nop
 8000f9c:	372c      	adds	r7, #44	; 0x2c
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <N5110_PrintStr>:

void N5110_PrintStr(uint8_t x, uint8_t y, char *str, bool set)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	603a      	str	r2, [r7, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	717b      	strb	r3, [r7, #5]
  uint8_t f_width  = CurrentFont[0];
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <N5110_PrintStr+0x68>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	72fb      	strb	r3, [r7, #11]
  uint8_t length = strlen(str);
 8000fc6:	6838      	ldr	r0, [r7, #0]
 8000fc8:	f7ff f8fe 	bl	80001c8 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	72bb      	strb	r3, [r7, #10]

  for(int i = 0; i < length; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e013      	b.n	8000ffe <N5110_PrintStr+0x56>
  {
    N5110_PrintChar(x + (i * f_width), y, *str++, set);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	7afa      	ldrb	r2, [r7, #11]
 8000fdc:	fb12 f303 	smulbb	r3, r2, r3
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2d8      	uxtb	r0, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	603a      	str	r2, [r7, #0]
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	79b9      	ldrb	r1, [r7, #6]
 8000ff4:	f7ff febe 	bl	8000d74 <N5110_PrintChar>
  for(int i = 0; i < length; i++)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	7abb      	ldrb	r3, [r7, #10]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbe7      	blt.n	8000fd6 <N5110_PrintStr+0x2e>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000

08001014 <N5110_DrawHLine>:

void N5110_DrawHLine(uint8_t x, uint8_t y, uint8_t length, bool set)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	4604      	mov	r4, r0
 800101c:	4608      	mov	r0, r1
 800101e:	4611      	mov	r1, r2
 8001020:	461a      	mov	r2, r3
 8001022:	4623      	mov	r3, r4
 8001024:	71fb      	strb	r3, [r7, #7]
 8001026:	4603      	mov	r3, r0
 8001028:	71bb      	strb	r3, [r7, #6]
 800102a:	460b      	mov	r3, r1
 800102c:	717b      	strb	r3, [r7, #5]
 800102e:	4613      	mov	r3, r2
 8001030:	713b      	strb	r3, [r7, #4]
  for(int cx = 0; cx < length; cx++)
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e00c      	b.n	8001052 <N5110_DrawHLine+0x3e>
  {
    N5110_SetPixel(x+cx, y, set);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4413      	add	r3, r2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	793a      	ldrb	r2, [r7, #4]
 8001044:	79b9      	ldrb	r1, [r7, #6]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe34 	bl	8000cb4 <N5110_SetPixel>
  for(int cx = 0; cx < length; cx++)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	429a      	cmp	r2, r3
 8001058:	dbee      	blt.n	8001038 <N5110_DrawHLine+0x24>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}

08001064 <N5110_DrawVLine>:

void N5110_DrawVLine(uint8_t x, uint8_t y, uint8_t length, bool set)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	4604      	mov	r4, r0
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4623      	mov	r3, r4
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	4603      	mov	r3, r0
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	460b      	mov	r3, r1
 800107c:	717b      	strb	r3, [r7, #5]
 800107e:	4613      	mov	r3, r2
 8001080:	713b      	strb	r3, [r7, #4]
  for(int cy = 0; cy < length; cy++)
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e00c      	b.n	80010a2 <N5110_DrawVLine+0x3e>
  {
    N5110_SetPixel(x, y+cy, set);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	4413      	add	r3, r2
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	793a      	ldrb	r2, [r7, #4]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe0c 	bl	8000cb4 <N5110_SetPixel>
  for(int cy = 0; cy < length; cy++)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	797b      	ldrb	r3, [r7, #5]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbee      	blt.n	8001088 <N5110_DrawVLine+0x24>
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}

080010b4 <N5110_DrawLine>:

void N5110_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool set)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b08b      	sub	sp, #44	; 0x2c
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	71fb      	strb	r3, [r7, #7]
 80010c6:	4603      	mov	r3, r0
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	460b      	mov	r3, r1
 80010cc:	717b      	strb	r3, [r7, #5]
 80010ce:	4613      	mov	r3, r2
 80010d0:	713b      	strb	r3, [r7, #4]
  uint8_t tmp;
  float delta, tx, ty;

  if(x1 > x2)
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	797b      	ldrb	r3, [r7, #5]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d90b      	bls.n	80010f2 <N5110_DrawLine+0x3e>
  {
    tmp = x1;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	74fb      	strb	r3, [r7, #19]
    x1 = x2;
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	71fb      	strb	r3, [r7, #7]
    x2 = tmp;
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	717b      	strb	r3, [r7, #5]

    tmp = y1;
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	74fb      	strb	r3, [r7, #19]
    y1 = y2;
 80010ea:	793b      	ldrb	r3, [r7, #4]
 80010ec:	71bb      	strb	r3, [r7, #6]
    y2 = tmp;
 80010ee:	7cfb      	ldrb	r3, [r7, #19]
 80010f0:	713b      	strb	r3, [r7, #4]
  }

  if(y1 > y2)
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	793b      	ldrb	r3, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d90b      	bls.n	8001112 <N5110_DrawLine+0x5e>
  {
    tmp = x1;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	74fb      	strb	r3, [r7, #19]
    x1 = x2;
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	71fb      	strb	r3, [r7, #7]
    x2 = tmp;
 8001102:	7cfb      	ldrb	r3, [r7, #19]
 8001104:	717b      	strb	r3, [r7, #5]

    tmp = y1;
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	74fb      	strb	r3, [r7, #19]
    y1 = y2;
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	71bb      	strb	r3, [r7, #6]
    y2 = tmp;
 800110e:	7cfb      	ldrb	r3, [r7, #19]
 8001110:	713b      	strb	r3, [r7, #4]
  }

  if(y1 == y2)
 8001112:	79ba      	ldrb	r2, [r7, #6]
 8001114:	793b      	ldrb	r3, [r7, #4]
 8001116:	429a      	cmp	r2, r3
 8001118:	d114      	bne.n	8001144 <N5110_DrawLine+0x90>
  {
    if(x1 > x2)
 800111a:	79fa      	ldrb	r2, [r7, #7]
 800111c:	797b      	ldrb	r3, [r7, #5]
 800111e:	429a      	cmp	r2, r3
 8001120:	d905      	bls.n	800112e <N5110_DrawLine+0x7a>
    {
      tmp = x1;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	74fb      	strb	r3, [r7, #19]
      x1 = x2;
 8001126:	797b      	ldrb	r3, [r7, #5]
 8001128:	71fb      	strb	r3, [r7, #7]
      x2 = tmp;
 800112a:	7cfb      	ldrb	r3, [r7, #19]
 800112c:	717b      	strb	r3, [r7, #5]
    }

    N5110_DrawHLine(x1, y1, x2-x1, set);
 800112e:	797a      	ldrb	r2, [r7, #5]
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800113a:	79b9      	ldrb	r1, [r7, #6]
 800113c:	79f8      	ldrb	r0, [r7, #7]
 800113e:	f7ff ff69 	bl	8001014 <N5110_DrawHLine>
        N5110_SetPixel((uint8_t)(tx+0.5), i, set);
        tx=tx+delta;
      }
    }
  }
}
 8001142:	e10c      	b.n	800135e <N5110_DrawLine+0x2aa>
  else if(x1 == x2)
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	429a      	cmp	r2, r3
 800114a:	d114      	bne.n	8001176 <N5110_DrawLine+0xc2>
    if(y1 > y2)
 800114c:	79ba      	ldrb	r2, [r7, #6]
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	d905      	bls.n	8001160 <N5110_DrawLine+0xac>
      tmp = y1;
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	74fb      	strb	r3, [r7, #19]
      y1 = y2;
 8001158:	793b      	ldrb	r3, [r7, #4]
 800115a:	71bb      	strb	r3, [r7, #6]
      y2 = tmp;
 800115c:	7cfb      	ldrb	r3, [r7, #19]
 800115e:	713b      	strb	r3, [r7, #4]
    N5110_DrawVLine(x1, y1, y2-y1, set);
 8001160:	793a      	ldrb	r2, [r7, #4]
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b2da      	uxtb	r2, r3
 8001168:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800116c:	79b9      	ldrb	r1, [r7, #6]
 800116e:	79f8      	ldrb	r0, [r7, #7]
 8001170:	f7ff ff78 	bl	8001064 <N5110_DrawVLine>
}
 8001174:	e0f3      	b.n	800135e <N5110_DrawLine+0x2aa>
  else if (abs(x2-x1)>abs(y2-y1))
 8001176:	797a      	ldrb	r2, [r7, #5]
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001180:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001184:	7939      	ldrb	r1, [r7, #4]
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	1acb      	subs	r3, r1, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	bfb8      	it	lt
 800118e:	425b      	neglt	r3, r3
 8001190:	429a      	cmp	r2, r3
 8001192:	dd73      	ble.n	800127c <N5110_DrawLine+0x1c8>
    delta = (float)((float)(y2-y1)/(float)(x2-x1));
 8001194:	793a      	ldrb	r2, [r7, #4]
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a2:	797a      	ldrb	r2, [r7, #5]
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b4:	edc7 7a03 	vstr	s15, [r7, #12]
    ty = (float)y1;
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c2:	edc7 7a08 	vstr	s15, [r7, #32]
    if (x1 > x2)
 80011c6:	79fa      	ldrb	r2, [r7, #7]
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d92d      	bls.n	800122a <N5110_DrawLine+0x176>
      for (int8_t i = x1; i >= x2; i--)
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	77fb      	strb	r3, [r7, #31]
 80011d2:	e024      	b.n	800121e <N5110_DrawLine+0x16a>
        N5110_SetPixel(i, (uint8_t)(ty+0.5), set);
 80011d4:	7ffc      	ldrb	r4, [r7, #31]
 80011d6:	6a38      	ldr	r0, [r7, #32]
 80011d8:	f7ff fa8c 	bl	80006f4 <__aeabi_f2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b61      	ldr	r3, [pc, #388]	; (8001368 <N5110_DrawLine+0x2b4>)
 80011e2:	f7ff f929 	bl	8000438 <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fad9 	bl	80007a4 <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80011fa:	4619      	mov	r1, r3
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fd59 	bl	8000cb4 <N5110_SetPixel>
        ty = ty-delta;
 8001202:	ed97 7a08 	vldr	s14, [r7, #32]
 8001206:	edd7 7a03 	vldr	s15, [r7, #12]
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	edc7 7a08 	vstr	s15, [r7, #32]
      for (int8_t i = x1; i >= x2; i--)
 8001212:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	3b01      	subs	r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	77fb      	strb	r3, [r7, #31]
 800121e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	429a      	cmp	r2, r3
 8001226:	dad5      	bge.n	80011d4 <N5110_DrawLine+0x120>
}
 8001228:	e099      	b.n	800135e <N5110_DrawLine+0x2aa>
      for (uint8_t i = x1; i <= x2; i++)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	77bb      	strb	r3, [r7, #30]
 800122e:	e020      	b.n	8001272 <N5110_DrawLine+0x1be>
        N5110_SetPixel(i, (uint8_t)(ty+0.5), set);
 8001230:	6a38      	ldr	r0, [r7, #32]
 8001232:	f7ff fa5f 	bl	80006f4 <__aeabi_f2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <N5110_DrawLine+0x2b4>)
 800123c:	f7ff f8fc 	bl	8000438 <__adddf3>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff faac 	bl	80007a4 <__aeabi_d2uiz>
 800124c:	4603      	mov	r3, r0
 800124e:	b2d9      	uxtb	r1, r3
 8001250:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001254:	7fbb      	ldrb	r3, [r7, #30]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fd2c 	bl	8000cb4 <N5110_SetPixel>
        ty = ty+delta;
 800125c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001260:	edd7 7a03 	vldr	s15, [r7, #12]
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	edc7 7a08 	vstr	s15, [r7, #32]
      for (uint8_t i = x1; i <= x2; i++)
 800126c:	7fbb      	ldrb	r3, [r7, #30]
 800126e:	3301      	adds	r3, #1
 8001270:	77bb      	strb	r3, [r7, #30]
 8001272:	7fba      	ldrb	r2, [r7, #30]
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	429a      	cmp	r2, r3
 8001278:	d9da      	bls.n	8001230 <N5110_DrawLine+0x17c>
}
 800127a:	e070      	b.n	800135e <N5110_DrawLine+0x2aa>
    delta = (float)((float)(x2-x1)/(float)(y2-y1));
 800127c:	797a      	ldrb	r2, [r7, #5]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800128a:	793a      	ldrb	r2, [r7, #4]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129c:	edc7 7a03 	vstr	s15, [r7, #12]
    tx = (float)x1;
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if(y1 > y2)
 80012ae:	79ba      	ldrb	r2, [r7, #6]
 80012b0:	793b      	ldrb	r3, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d92a      	bls.n	800130c <N5110_DrawLine+0x258>
      for(int i = y2+1; i > y1; i--)
 80012b6:	793b      	ldrb	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	e021      	b.n	8001302 <N5110_DrawLine+0x24e>
        N5110_SetPixel((uint8_t)(tx+0.5), i, set);
 80012be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012c0:	f7ff fa18 	bl	80006f4 <__aeabi_f2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <N5110_DrawLine+0x2b4>)
 80012ca:	f7ff f8b5 	bl	8000438 <__adddf3>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fa65 	bl	80007a4 <__aeabi_d2uiz>
 80012da:	4603      	mov	r3, r0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	b2d1      	uxtb	r1, r2
 80012e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fce4 	bl	8000cb4 <N5110_SetPixel>
        tx = tx+delta;
 80012ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      for(int i = y2+1; i > y1; i--)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	3b01      	subs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	429a      	cmp	r2, r3
 8001308:	dcd9      	bgt.n	80012be <N5110_DrawLine+0x20a>
}
 800130a:	e028      	b.n	800135e <N5110_DrawLine+0x2aa>
      for (int i = y1; i < y2+1; i++)
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e021      	b.n	8001356 <N5110_DrawLine+0x2a2>
        N5110_SetPixel((uint8_t)(tx+0.5), i, set);
 8001312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001314:	f7ff f9ee 	bl	80006f4 <__aeabi_f2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <N5110_DrawLine+0x2b4>)
 800131e:	f7ff f88b 	bl	8000438 <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fa3b 	bl	80007a4 <__aeabi_d2uiz>
 800132e:	4603      	mov	r3, r0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	b2d1      	uxtb	r1, r2
 8001336:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fcba 	bl	8000cb4 <N5110_SetPixel>
        tx=tx+delta;
 8001340:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001344:	edd7 7a03 	vldr	s15, [r7, #12]
 8001348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      for (int i = y1; i < y2+1; i++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	793b      	ldrb	r3, [r7, #4]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	429a      	cmp	r2, r3
 800135c:	ddd9      	ble.n	8001312 <N5110_DrawLine+0x25e>
}
 800135e:	bf00      	nop
 8001360:	372c      	adds	r7, #44	; 0x2c
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	3fe00000 	.word	0x3fe00000

0800136c <N5110_DrawRect>:

void N5110_DrawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool set, bool fill)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	4604      	mov	r4, r0
 8001374:	4608      	mov	r0, r1
 8001376:	4611      	mov	r1, r2
 8001378:	461a      	mov	r2, r3
 800137a:	4623      	mov	r3, r4
 800137c:	71fb      	strb	r3, [r7, #7]
 800137e:	4603      	mov	r3, r0
 8001380:	71bb      	strb	r3, [r7, #6]
 8001382:	460b      	mov	r3, r1
 8001384:	717b      	strb	r3, [r7, #5]
 8001386:	4613      	mov	r3, r2
 8001388:	713b      	strb	r3, [r7, #4]
  uint8_t tmp;

  /* Swap position to make x2 and y2 are bigger than x1 and y1 */
  if(x2 < x1)
 800138a:	797a      	ldrb	r2, [r7, #5]
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	429a      	cmp	r2, r3
 8001390:	d205      	bcs.n	800139e <N5110_DrawRect+0x32>
  {
    tmp = x1;
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	73fb      	strb	r3, [r7, #15]
    x1 = x2;
 8001396:	797b      	ldrb	r3, [r7, #5]
 8001398:	71fb      	strb	r3, [r7, #7]
    x2 = tmp;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	717b      	strb	r3, [r7, #5]
  }

  if(y2 < y1)
 800139e:	793a      	ldrb	r2, [r7, #4]
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d205      	bcs.n	80013b2 <N5110_DrawRect+0x46>
  {
    tmp = y1;
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	73fb      	strb	r3, [r7, #15]
    y1 = y2;
 80013aa:	793b      	ldrb	r3, [r7, #4]
 80013ac:	71bb      	strb	r3, [r7, #6]
    y2 = tmp;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	713b      	strb	r3, [r7, #4]
  }

  if(fill)
 80013b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01d      	beq.n	80013f6 <N5110_DrawRect+0x8a>
  {
    for(int i = x1; i <= x2; i++)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e015      	b.n	80013ec <N5110_DrawRect+0x80>
    {
      for(int j = y1; j <= y2; j++)
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	e00b      	b.n	80013de <N5110_DrawRect+0x72>
      {
        N5110_SetPixel(i, j, set);
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	b2d1      	uxtb	r1, r2
 80013ce:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc6e 	bl	8000cb4 <N5110_SetPixel>
      for(int j = y1; j <= y2; j++)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	3301      	adds	r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	793b      	ldrb	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	ddef      	ble.n	80013c6 <N5110_DrawRect+0x5a>
    for(int i = x1; i <= x2; i++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dde5      	ble.n	80013c0 <N5110_DrawRect+0x54>
    N5110_DrawHLine(x1, y1, x2-x1, set);
    N5110_DrawHLine(x1, y2, x2-x1, set);
    N5110_DrawVLine(x1, y1, y2-y1, set);
    N5110_DrawVLine(x2, y1, y2-y1, set);
  }
}
 80013f4:	e027      	b.n	8001446 <N5110_DrawRect+0xda>
    N5110_DrawHLine(x1, y1, x2-x1, set);
 80013f6:	797a      	ldrb	r2, [r7, #5]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001402:	79b9      	ldrb	r1, [r7, #6]
 8001404:	79f8      	ldrb	r0, [r7, #7]
 8001406:	f7ff fe05 	bl	8001014 <N5110_DrawHLine>
    N5110_DrawHLine(x1, y2, x2-x1, set);
 800140a:	797a      	ldrb	r2, [r7, #5]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2da      	uxtb	r2, r3
 8001412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001416:	7939      	ldrb	r1, [r7, #4]
 8001418:	79f8      	ldrb	r0, [r7, #7]
 800141a:	f7ff fdfb 	bl	8001014 <N5110_DrawHLine>
    N5110_DrawVLine(x1, y1, y2-y1, set);
 800141e:	793a      	ldrb	r2, [r7, #4]
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800142a:	79b9      	ldrb	r1, [r7, #6]
 800142c:	79f8      	ldrb	r0, [r7, #7]
 800142e:	f7ff fe19 	bl	8001064 <N5110_DrawVLine>
    N5110_DrawVLine(x2, y1, y2-y1, set);
 8001432:	793a      	ldrb	r2, [r7, #4]
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b2da      	uxtb	r2, r3
 800143a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800143e:	79b9      	ldrb	r1, [r7, #6]
 8001440:	7978      	ldrb	r0, [r7, #5]
 8001442:	f7ff fe0f 	bl	8001064 <N5110_DrawVLine>
}
 8001446:	bf00      	nop
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}

0800144e <N5110_DrawCircle>:
    N5110_DrawVLine(x2, y1+2, y2-y1-3, set);
  }
}

void N5110_DrawCircle(uint8_t x, uint8_t y, uint8_t radius, bool set, bool fill)
{
 800144e:	b590      	push	{r4, r7, lr}
 8001450:	b087      	sub	sp, #28
 8001452:	af02      	add	r7, sp, #8
 8001454:	4604      	mov	r4, r0
 8001456:	4608      	mov	r0, r1
 8001458:	4611      	mov	r1, r2
 800145a:	461a      	mov	r2, r3
 800145c:	4623      	mov	r3, r4
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4603      	mov	r3, r0
 8001462:	71bb      	strb	r3, [r7, #6]
 8001464:	460b      	mov	r3, r1
 8001466:	717b      	strb	r3, [r7, #5]
 8001468:	4613      	mov	r3, r2
 800146a:	713b      	strb	r3, [r7, #4]
  int8_t a = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
  int8_t b = radius;
 8001470:	797b      	ldrb	r3, [r7, #5]
 8001472:	73bb      	strb	r3, [r7, #14]
  int8_t p = 1 - radius;
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	f1c3 0301 	rsb	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	737b      	strb	r3, [r7, #13]

  do
  {
    if(fill)
 800147e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d058      	beq.n	8001538 <N5110_DrawCircle+0xea>
    {
      N5110_DrawLine(x-a, y+b, x+a, y+b, set);
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b2d8      	uxtb	r0, r3
 800148e:	7bba      	ldrb	r2, [r7, #14]
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	4413      	add	r3, r2
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4413      	add	r3, r2
 800149c:	b2dc      	uxtb	r4, r3
 800149e:	7bba      	ldrb	r2, [r7, #14]
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	4413      	add	r3, r2
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	4622      	mov	r2, r4
 80014ae:	f7ff fe01 	bl	80010b4 <N5110_DrawLine>
      N5110_DrawLine(x-a, y-b, x+a, y-b, set);
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	b2d8      	uxtb	r0, r3
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	79ba      	ldrb	r2, [r7, #6]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	b2d9      	uxtb	r1, r3
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4413      	add	r3, r2
 80014c8:	b2dc      	uxtb	r4, r3
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	79ba      	ldrb	r2, [r7, #6]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	793b      	ldrb	r3, [r7, #4]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	4622      	mov	r2, r4
 80014da:	f7ff fdeb 	bl	80010b4 <N5110_DrawLine>
      N5110_DrawLine(x-b, y+a, x+b, y+a, set);
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	79fa      	ldrb	r2, [r7, #7]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	4413      	add	r3, r2
 80014ec:	b2d9      	uxtb	r1, r3
 80014ee:	7bba      	ldrb	r2, [r7, #14]
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4413      	add	r3, r2
 80014f4:	b2dc      	uxtb	r4, r3
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	4413      	add	r3, r2
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4613      	mov	r3, r2
 8001504:	4622      	mov	r2, r4
 8001506:	f7ff fdd5 	bl	80010b4 <N5110_DrawLine>
      N5110_DrawLine(x-b, y-a, x+b, y-a, set);
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	79ba      	ldrb	r2, [r7, #6]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	b2d9      	uxtb	r1, r3
 800151a:	7bba      	ldrb	r2, [r7, #14]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4413      	add	r3, r2
 8001520:	b2dc      	uxtb	r4, r3
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	79ba      	ldrb	r2, [r7, #6]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	b2da      	uxtb	r2, r3
 800152a:	793b      	ldrb	r3, [r7, #4]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	4622      	mov	r2, r4
 8001532:	f7ff fdbf 	bl	80010b4 <N5110_DrawLine>
 8001536:	e05f      	b.n	80015f8 <N5110_DrawCircle+0x1aa>
    }
    else
    {
      N5110_SetPixel(x+a, y+b, set);
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4413      	add	r3, r2
 800153e:	b2d8      	uxtb	r0, r3
 8001540:	7bba      	ldrb	r2, [r7, #14]
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	4413      	add	r3, r2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	793a      	ldrb	r2, [r7, #4]
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fbb2 	bl	8000cb4 <N5110_SetPixel>
      N5110_SetPixel(x-a, y+b, set);
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b2d8      	uxtb	r0, r3
 8001558:	7bba      	ldrb	r2, [r7, #14]
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	4413      	add	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	793a      	ldrb	r2, [r7, #4]
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fba6 	bl	8000cb4 <N5110_SetPixel>
      N5110_SetPixel(x+a, y-b, set);
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4413      	add	r3, r2
 800156e:	b2d8      	uxtb	r0, r3
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	79ba      	ldrb	r2, [r7, #6]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	793a      	ldrb	r2, [r7, #4]
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fb9a 	bl	8000cb4 <N5110_SetPixel>
      N5110_SetPixel(x-a, y-b, set);
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b2d8      	uxtb	r0, r3
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	79ba      	ldrb	r2, [r7, #6]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	793a      	ldrb	r2, [r7, #4]
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fb8e 	bl	8000cb4 <N5110_SetPixel>
      N5110_SetPixel(x+b, y+a, set);
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4413      	add	r3, r2
 800159e:	b2d8      	uxtb	r0, r3
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	4413      	add	r3, r2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	793a      	ldrb	r2, [r7, #4]
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb82 	bl	8000cb4 <N5110_SetPixel>
      N5110_SetPixel(x-b, y+a, set);
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	b2d8      	uxtb	r0, r3
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	4413      	add	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	793a      	ldrb	r2, [r7, #4]
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fb76 	bl	8000cb4 <N5110_SetPixel>
      N5110_SetPixel(x+b, y-a, set);
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4413      	add	r3, r2
 80015ce:	b2d8      	uxtb	r0, r3
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	79ba      	ldrb	r2, [r7, #6]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	793a      	ldrb	r2, [r7, #4]
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fb6a 	bl	8000cb4 <N5110_SetPixel>
      N5110_SetPixel(x-b, y-a, set);
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b2d8      	uxtb	r0, r3
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	79ba      	ldrb	r2, [r7, #6]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	793a      	ldrb	r2, [r7, #4]
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fb5e 	bl	8000cb4 <N5110_SetPixel>
    }

    if(p < 0)
 80015f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da0f      	bge.n	8001620 <N5110_DrawCircle+0x1d2>
    {
      p += (3 + 2*a);
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	7b7b      	ldrb	r3, [r7, #13]
 8001608:	4413      	add	r3, r2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3303      	adds	r3, #3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	737b      	strb	r3, [r7, #13]
      a++;
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e019      	b.n	8001654 <N5110_DrawCircle+0x206>
    }
    else
    {
      p += (5 + 2*(a-b));
 8001620:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	4413      	add	r3, r2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	3305      	adds	r3, #5
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]
      a++;
 800163c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	73fb      	strb	r3, [r7, #15]
      b--;
 8001648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	73bb      	strb	r3, [r7, #14]
    }
  } while(a <=b);
 8001654:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800165c:	429a      	cmp	r2, r3
 800165e:	f77f af0e 	ble.w	800147e <N5110_DrawCircle+0x30>
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <N5110_DrawBitmap>:

void N5110_DrawBitmap(uint8_t x, uint8_t y, uint8_t * bitmap, uint8_t width, uint8_t height)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	603a      	str	r2, [r7, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	460b      	mov	r3, r1
 800167c:	71bb      	strb	r3, [r7, #6]
 800167e:	4613      	mov	r3, r2
 8001680:	717b      	strb	r3, [r7, #5]
  uint8_t bit, data;

  for (int cy=0; cy < height; cy++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e04a      	b.n	800171e <N5110_DrawBitmap+0xb2>
  {
    bit= cy % 8;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	425a      	negs	r2, r3
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	f002 0207 	and.w	r2, r2, #7
 8001694:	bf58      	it	pl
 8001696:	4253      	negpl	r3, r2
 8001698:	73fb      	strb	r3, [r7, #15]
    for(int cx=0; cx < width; cx++)
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e037      	b.n	8001710 <N5110_DrawBitmap+0xa4>
    {
      data = bitmap[cx+(cy/8*width)];
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da00      	bge.n	80016a8 <N5110_DrawBitmap+0x3c>
 80016a6:	3307      	adds	r3, #7
 80016a8:	10db      	asrs	r3, r3, #3
 80016aa:	461a      	mov	r2, r3
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	fb03 f202 	mul.w	r2, r3, r2
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4413      	add	r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	73bb      	strb	r3, [r7, #14]
      if ((data & (1<<bit)))
 80016c0:	7bba      	ldrb	r2, [r7, #14]
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	fa42 f303 	asr.w	r3, r2, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00e      	beq.n	80016ee <N5110_DrawBitmap+0x82>
      {
        N5110_SetPixel(x+cx, y+cy, 1);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4413      	add	r3, r2
 80016d8:	b2d8      	uxtb	r0, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	4413      	add	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fae4 	bl	8000cb4 <N5110_SetPixel>
 80016ec:	e00d      	b.n	800170a <N5110_DrawBitmap+0x9e>
      }
      else
      {
        N5110_SetPixel(x+cx, y+cy, 0);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2d8      	uxtb	r0, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	4413      	add	r3, r2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fad5 	bl	8000cb4 <N5110_SetPixel>
    for(int cx=0; cx < width; cx++)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	3301      	adds	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbc3      	blt.n	80016a0 <N5110_DrawBitmap+0x34>
  for (int cy=0; cy < height; cy++)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbaf      	blt.n	8001688 <N5110_DrawBitmap+0x1c>
      }
    }
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	0000      	movs	r0, r0
 8001734:	0000      	movs	r0, r0
	...

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173e:	f000 fbfd 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001742:	f000 f9bf 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001746:	f000 fa7d 	bl	8001c44 <MX_GPIO_Init>
  MX_DMA_Init();
 800174a:	f000 fa5b 	bl	8001c04 <MX_DMA_Init>
  MX_SPI2_Init();
 800174e:	f000 fa23 	bl	8001b98 <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  N5110_Clear();
 8001752:	f7ff fa93 	bl	8000c7c <N5110_Clear>
	     N5110_SetFont(SmallFont);
 8001756:	48b2      	ldr	r0, [pc, #712]	; (8001a20 <main+0x2e8>)
 8001758:	f7ff fafc 	bl	8000d54 <N5110_SetFont>
	     N5110_PrintStr(N5110_MAX_WIDTH/2-(4.5*6), N5110_MAX_HEIGHT/2 - 4, "NOKIA5110", true);
 800175c:	2301      	movs	r3, #1
 800175e:	4ab1      	ldr	r2, [pc, #708]	; (8001a24 <main+0x2ec>)
 8001760:	2114      	movs	r1, #20
 8001762:	200f      	movs	r0, #15
 8001764:	f7ff fc20 	bl	8000fa8 <N5110_PrintStr>
	     N5110_Update();
 8001768:	f7ff fa58 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 800176c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001770:	f000 fc56 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 8001774:	f7ff fa82 	bl	8000c7c <N5110_Clear>
	     N5110_SetFont(TinyFont);
 8001778:	48ab      	ldr	r0, [pc, #684]	; (8001a28 <main+0x2f0>)
 800177a:	f7ff faeb 	bl	8000d54 <N5110_SetFont>
	     N5110_PrintStr(N5110_MAX_WIDTH/2-(4.5*4), N5110_MAX_HEIGHT/2 - 3, "NOKIA5110", true);
 800177e:	2301      	movs	r3, #1
 8001780:	4aa8      	ldr	r2, [pc, #672]	; (8001a24 <main+0x2ec>)
 8001782:	2115      	movs	r1, #21
 8001784:	2018      	movs	r0, #24
 8001786:	f7ff fc0f 	bl	8000fa8 <N5110_PrintStr>
	     N5110_Update();
 800178a:	f7ff fa47 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 800178e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001792:	f000 fc45 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 8001796:	f7ff fa71 	bl	8000c7c <N5110_Clear>
	     N5110_SetFont(MediumNumbers);
 800179a:	48a4      	ldr	r0, [pc, #656]	; (8001a2c <main+0x2f4>)
 800179c:	f7ff fada 	bl	8000d54 <N5110_SetFont>
	     N5110_PrintStr(N5110_MAX_WIDTH/2-(2.5*12), N5110_MAX_HEIGHT/2 - 8, "99-99", true);
 80017a0:	2301      	movs	r3, #1
 80017a2:	4aa3      	ldr	r2, [pc, #652]	; (8001a30 <main+0x2f8>)
 80017a4:	2110      	movs	r1, #16
 80017a6:	200c      	movs	r0, #12
 80017a8:	f7ff fbfe 	bl	8000fa8 <N5110_PrintStr>
	     N5110_Update();
 80017ac:	f7ff fa36 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 80017b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017b4:	f000 fc34 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 80017b8:	f7ff fa60 	bl	8000c7c <N5110_Clear>
	     N5110_SetFont(BigNumbers);
 80017bc:	489d      	ldr	r0, [pc, #628]	; (8001a34 <main+0x2fc>)
 80017be:	f7ff fac9 	bl	8000d54 <N5110_SetFont>
	     N5110_PrintStr(N5110_MAX_WIDTH/2-(2.5*14), N5110_MAX_HEIGHT/2 - 12, "99-99", true);
 80017c2:	2301      	movs	r3, #1
 80017c4:	4a9a      	ldr	r2, [pc, #616]	; (8001a30 <main+0x2f8>)
 80017c6:	210c      	movs	r1, #12
 80017c8:	2007      	movs	r0, #7
 80017ca:	f7ff fbed 	bl	8000fa8 <N5110_PrintStr>
	     N5110_Update();
 80017ce:	f7ff fa25 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 80017d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017d6:	f000 fc23 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 80017da:	f7ff fa4f 	bl	8000c7c <N5110_Clear>
	     N5110_SetFont(SmallFont);
 80017de:	4890      	ldr	r0, [pc, #576]	; (8001a20 <main+0x2e8>)
 80017e0:	f7ff fab8 	bl	8000d54 <N5110_SetFont>
	     N5110_PrintStr(N5110_MAX_WIDTH/2-(4.5*6), N5110_MAX_HEIGHT/2 - 4, "NOKIA5110", true);
 80017e4:	2301      	movs	r3, #1
 80017e6:	4a8f      	ldr	r2, [pc, #572]	; (8001a24 <main+0x2ec>)
 80017e8:	2114      	movs	r1, #20
 80017ea:	200f      	movs	r0, #15
 80017ec:	f7ff fbdc 	bl	8000fa8 <N5110_PrintStr>
	     N5110_Update();
 80017f0:	f7ff fa14 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 80017f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017f8:	f000 fc12 	bl	8002020 <HAL_Delay>

	     N5110_InvertDisplay(true);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff f9e7 	bl	8000bd0 <N5110_InvertDisplay>
	     HAL_Delay(DELAY);
 8001802:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001806:	f000 fc0b 	bl	8002020 <HAL_Delay>
	     N5110_InvertDisplay(false);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff f9e0 	bl	8000bd0 <N5110_InvertDisplay>
	     HAL_Delay(DELAY);
 8001810:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001814:	f000 fc04 	bl	8002020 <HAL_Delay>

	     N5110_DrawHLine(0, N5110_MAX_HEIGHT/2 - 8, N5110_MAX_WIDTH, true);
 8001818:	2301      	movs	r3, #1
 800181a:	2254      	movs	r2, #84	; 0x54
 800181c:	2110      	movs	r1, #16
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fbf8 	bl	8001014 <N5110_DrawHLine>
	     N5110_DrawHLine(0, N5110_MAX_HEIGHT/2 + 8, N5110_MAX_WIDTH, true);
 8001824:	2301      	movs	r3, #1
 8001826:	2254      	movs	r2, #84	; 0x54
 8001828:	2120      	movs	r1, #32
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fbf2 	bl	8001014 <N5110_DrawHLine>
	     N5110_DrawVLine(0, N5110_MAX_HEIGHT/2 - 8, 16, true);
 8001830:	2301      	movs	r3, #1
 8001832:	2210      	movs	r2, #16
 8001834:	2110      	movs	r1, #16
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fc14 	bl	8001064 <N5110_DrawVLine>
	     N5110_DrawVLine(N5110_MAX_WIDTH-1, N5110_MAX_HEIGHT/2 - 8, 16, true);
 800183c:	2301      	movs	r3, #1
 800183e:	2210      	movs	r2, #16
 8001840:	2110      	movs	r1, #16
 8001842:	2053      	movs	r0, #83	; 0x53
 8001844:	f7ff fc0e 	bl	8001064 <N5110_DrawVLine>
	     N5110_Update();
 8001848:	f7ff f9e8 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 800184c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001850:	f000 fbe6 	bl	8002020 <HAL_Delay>

	     N5110_DrawRect(0, N5110_MAX_HEIGHT/2 - 8, N5110_MAX_WIDTH-1, N5110_MAX_HEIGHT/2 + 8, false, false);
 8001854:	2300      	movs	r3, #0
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2320      	movs	r3, #32
 800185e:	2253      	movs	r2, #83	; 0x53
 8001860:	2110      	movs	r1, #16
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff fd82 	bl	800136c <N5110_DrawRect>
	     N5110_Update();
 8001868:	f7ff f9d8 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 800186c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001870:	f000 fbd6 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 8001874:	f7ff fa02 	bl	8000c7c <N5110_Clear>
	     N5110_Update();
 8001878:	f7ff f9d0 	bl	8000c1c <N5110_Update>

	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00b      	b.n	800189a <main+0x162>
	     {
	       N5110_DrawLine(0, 0, i, N5110_MAX_HEIGHT-1, true);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	2301      	movs	r3, #1
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	232f      	movs	r3, #47	; 0x2f
 800188c:	2100      	movs	r1, #0
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fc10 	bl	80010b4 <N5110_DrawLine>
	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3305      	adds	r3, #5
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b53      	cmp	r3, #83	; 0x53
 800189e:	ddf0      	ble.n	8001882 <main+0x14a>
	     }
	     N5110_Update();
 80018a0:	f7ff f9bc 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 80018a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018a8:	f000 fbba 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 80018ac:	f7ff f9e6 	bl	8000c7c <N5110_Clear>
	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	e00b      	b.n	80018ce <main+0x196>
	     {
	       N5110_DrawLine(0, N5110_MAX_HEIGHT-1, i, 0, true);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	2301      	movs	r3, #1
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	212f      	movs	r1, #47	; 0x2f
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fbf6 	bl	80010b4 <N5110_DrawLine>
	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	3305      	adds	r3, #5
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b53      	cmp	r3, #83	; 0x53
 80018d2:	ddf0      	ble.n	80018b6 <main+0x17e>
	     }
	     N5110_Update();
 80018d4:	f7ff f9a2 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 80018d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018dc:	f000 fba0 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 80018e0:	f7ff f9cc 	bl	8000c7c <N5110_Clear>
	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e00b      	b.n	8001902 <main+0x1ca>
	     {
	       N5110_DrawLine(N5110_MAX_WIDTH-1, 0, i, N5110_MAX_HEIGHT-1, true);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	2301      	movs	r3, #1
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	232f      	movs	r3, #47	; 0x2f
 80018f4:	2100      	movs	r1, #0
 80018f6:	2053      	movs	r0, #83	; 0x53
 80018f8:	f7ff fbdc 	bl	80010b4 <N5110_DrawLine>
	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3305      	adds	r3, #5
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b53      	cmp	r3, #83	; 0x53
 8001906:	ddf0      	ble.n	80018ea <main+0x1b2>
	     }
	     N5110_Update();
 8001908:	f7ff f988 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 800190c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001910:	f000 fb86 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 8001914:	f7ff f9b2 	bl	8000c7c <N5110_Clear>
	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	e00b      	b.n	8001936 <main+0x1fe>
	     {
	       N5110_DrawLine(N5110_MAX_WIDTH-1, N5110_MAX_HEIGHT-1, i, 0, true);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	2301      	movs	r3, #1
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2300      	movs	r3, #0
 8001928:	212f      	movs	r1, #47	; 0x2f
 800192a:	2053      	movs	r0, #83	; 0x53
 800192c:	f7ff fbc2 	bl	80010b4 <N5110_DrawLine>
	     for(int i = 0; i < N5110_MAX_WIDTH; i=i+5)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3305      	adds	r3, #5
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b53      	cmp	r3, #83	; 0x53
 800193a:	ddf0      	ble.n	800191e <main+0x1e6>
	     }
	     N5110_Update();
 800193c:	f7ff f96e 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 8001940:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001944:	f000 fb6c 	bl	8002020 <HAL_Delay>


	     N5110_Clear();
 8001948:	f7ff f998 	bl	8000c7c <N5110_Clear>
	     for(int i = 0; i < N5110_MAX_HEIGHT/2; i=i+2)
 800194c:	2300      	movs	r3, #0
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	e045      	b.n	80019de <main+0x2a6>
	     {
	       N5110_DrawRect(N5110_MAX_WIDTH/2-1.7*i,N5110_MAX_HEIGHT/2-1-i,N5110_MAX_WIDTH/2+1.7*i,N5110_MAX_HEIGHT/2+i, true, false);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe febc 	bl	80006d0 <__aeabi_i2d>
 8001958:	a32f      	add	r3, pc, #188	; (adr r3, 8001a18 <main+0x2e0>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fc3b 	bl	80001d8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	f04f 0000 	mov.w	r0, #0
 800196a:	4933      	ldr	r1, [pc, #204]	; (8001a38 <main+0x300>)
 800196c:	f7fe fd62 	bl	8000434 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7fe ff14 	bl	80007a4 <__aeabi_d2uiz>
 800197c:	4603      	mov	r3, r0
 800197e:	b2dc      	uxtb	r4, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f1c3 0317 	rsb	r3, r3, #23
 8001988:	b2dd      	uxtb	r5, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe fea0 	bl	80006d0 <__aeabi_i2d>
 8001990:	a321      	add	r3, pc, #132	; (adr r3, 8001a18 <main+0x2e0>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fc1f 	bl	80001d8 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <main+0x300>)
 80019a8:	f7fe fd46 	bl	8000438 <__adddf3>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7fe fef6 	bl	80007a4 <__aeabi_d2uiz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3318      	adds	r3, #24
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2100      	movs	r1, #0
 80019c6:	9101      	str	r1, [sp, #4]
 80019c8:	2101      	movs	r1, #1
 80019ca:	9100      	str	r1, [sp, #0]
 80019cc:	4629      	mov	r1, r5
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff fccc 	bl	800136c <N5110_DrawRect>
	       N5110_Update();
 80019d4:	f7ff f922 	bl	8000c1c <N5110_Update>
	     for(int i = 0; i < N5110_MAX_HEIGHT/2; i=i+2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3302      	adds	r3, #2
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b17      	cmp	r3, #23
 80019e2:	ddb6      	ble.n	8001952 <main+0x21a>
	     }
	     HAL_Delay(DELAY);
 80019e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019e8:	f000 fb1a 	bl	8002020 <HAL_Delay>

	     N5110_DrawRect(0, 0, N5110_MAX_WIDTH-1, N5110_MAX_HEIGHT-1, true, true);
 80019ec:	2301      	movs	r3, #1
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2301      	movs	r3, #1
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	232f      	movs	r3, #47	; 0x2f
 80019f6:	2253      	movs	r2, #83	; 0x53
 80019f8:	2100      	movs	r1, #0
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fcb6 	bl	800136c <N5110_DrawRect>
	     N5110_Update();
 8001a00:	f7ff f90c 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 8001a04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a08:	f000 fb0a 	bl	8002020 <HAL_Delay>


	     N5110_Clear();
 8001a0c:	f7ff f936 	bl	8000c7c <N5110_Clear>
	     for(int i = 0; i < N5110_MAX_HEIGHT/2; i=i+2)
 8001a10:	2300      	movs	r3, #0
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	e020      	b.n	8001a58 <main+0x320>
 8001a16:	bf00      	nop
 8001a18:	33333333 	.word	0x33333333
 8001a1c:	3ffb3333 	.word	0x3ffb3333
 8001a20:	08003f10 	.word	0x08003f10
 8001a24:	08003dd8 	.word	0x08003dd8
 8001a28:	08003dec 	.word	0x08003dec
 8001a2c:	08004150 	.word	0x08004150
 8001a30:	08003de4 	.word	0x08003de4
 8001a34:	0800428c 	.word	0x0800428c
 8001a38:	40450000 	.word	0x40450000
	     {
	       N5110_DrawCircle(N5110_MAX_WIDTH/2-1,N5110_MAX_HEIGHT/2-1, i, true, false);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2301      	movs	r3, #1
 8001a46:	2117      	movs	r1, #23
 8001a48:	2029      	movs	r0, #41	; 0x29
 8001a4a:	f7ff fd00 	bl	800144e <N5110_DrawCircle>
	       N5110_Update();
 8001a4e:	f7ff f8e5 	bl	8000c1c <N5110_Update>
	     for(int i = 0; i < N5110_MAX_HEIGHT/2; i=i+2)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	3302      	adds	r3, #2
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b17      	cmp	r3, #23
 8001a5c:	ddee      	ble.n	8001a3c <main+0x304>
	     }
	     HAL_Delay(DELAY);
 8001a5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a62:	f000 fadd 	bl	8002020 <HAL_Delay>


	     N5110_DrawCircle(N5110_MAX_WIDTH/2-1,N5110_MAX_HEIGHT/2-1, N5110_MAX_HEIGHT/2-1, true, true);
 8001a66:	2301      	movs	r3, #1
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2217      	movs	r2, #23
 8001a6e:	2117      	movs	r1, #23
 8001a70:	2029      	movs	r0, #41	; 0x29
 8001a72:	f7ff fcec 	bl	800144e <N5110_DrawCircle>
	     N5110_Update();
 8001a76:	f7ff f8d1 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 8001a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a7e:	f000 facf 	bl	8002020 <HAL_Delay>

	     N5110_PrintStr(15, N5110_MAX_HEIGHT/2 - 4, "NOKIA5110", false);
 8001a82:	2300      	movs	r3, #0
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <main+0x384>)
 8001a86:	2114      	movs	r1, #20
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f7ff fa8d 	bl	8000fa8 <N5110_PrintStr>
	     N5110_Update();
 8001a8e:	f7ff f8c5 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 8001a92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a96:	f000 fac3 	bl	8002020 <HAL_Delay>

	     N5110_Clear();
 8001a9a:	f7ff f8ef 	bl	8000c7c <N5110_Clear>
	     N5110_DrawBitmap(0, 0, (uint8_t*)Bitmap, N5110_MAX_WIDTH, N5110_MAX_HEIGHT);
 8001a9e:	2330      	movs	r3, #48	; 0x30
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2354      	movs	r3, #84	; 0x54
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <main+0x388>)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fddf 	bl	800166c <N5110_DrawBitmap>
	     N5110_Update();
 8001aae:	f7ff f8b5 	bl	8000c1c <N5110_Update>
	     HAL_Delay(DELAY);
 8001ab2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ab6:	f000 fab3 	bl	8002020 <HAL_Delay>
	  N5110_Clear();
 8001aba:	e64a      	b.n	8001752 <main+0x1a>
 8001abc:	08003dd8 	.word	0x08003dd8
 8001ac0:	080044b4 	.word	0x080044b4

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b094      	sub	sp, #80	; 0x50
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	2230      	movs	r2, #48	; 0x30
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 f948 	bl	8003d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <SystemClock_Config+0xcc>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <SystemClock_Config+0xcc>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <SystemClock_Config+0xcc>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <SystemClock_Config+0xd0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b20:	2301      	movs	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b34:	2308      	movs	r3, #8
 8001b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b42:	2307      	movs	r3, #7
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 f900 	bl	8002d50 <HAL_RCC_OscConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b56:	f000 f8c7 	bl	8001ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5a:	230f      	movs	r3, #15
 8001b5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	2105      	movs	r1, #5
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fb61 	bl	8003240 <HAL_RCC_ClockConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b84:	f000 f8b0 	bl	8001ce8 <Error_Handler>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3750      	adds	r7, #80	; 0x50
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000

08001b98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001b9e:	4a18      	ldr	r2, [pc, #96]	; (8001c00 <MX_SPI2_Init+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bcc:	2208      	movs	r2, #8
 8001bce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001be4:	220a      	movs	r2, #10
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_SPI2_Init+0x64>)
 8001bea:	f001 fd15 	bl	8003618 <HAL_SPI_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bf4:	f000 f878 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000224 	.word	0x20000224
 8001c00:	40003800 	.word	0x40003800

08001c04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_DMA_Init+0x3c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <MX_DMA_Init+0x3c>)
 8001c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_DMA_Init+0x3c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 faf7 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c30:	200f      	movs	r0, #15
 8001c32:	f000 fb10 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_GPIO_Init+0x9c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RST_Pin|CE_Pin|DC_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <MX_GPIO_Init+0xa0>)
 8001cb6:	f001 f817 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin CE_Pin DC_Pin PD15 */
  GPIO_InitStruct.Pin = RST_Pin|CE_Pin|DC_Pin|GPIO_PIN_15;
 8001cba:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8001cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <MX_GPIO_Init+0xa0>)
 8001cd4:	f000 fe6c 	bl	80029b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020c00 	.word	0x40020c00

08001ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <Error_Handler+0x8>
	...

08001cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d32:	2007      	movs	r0, #7
 8001d34:	f000 fa68 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a34      	ldr	r2, [pc, #208]	; (8001e34 <HAL_SPI_MspInit+0xf0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d161      	bne.n	8001e2a <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HAL_SPI_MspInit+0xf4>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_SPI_MspInit+0xf4>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_SPI_MspInit+0xf4>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_SPI_MspInit+0xf4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <HAL_SPI_MspInit+0xf4>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <HAL_SPI_MspInit+0xf4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d9e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001db0:	2305      	movs	r3, #5
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	4820      	ldr	r0, [pc, #128]	; (8001e3c <HAL_SPI_MspInit+0xf8>)
 8001dbc:	f000 fdf8 	bl	80029b0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001dc2:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_SPI_MspInit+0x100>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001dfe:	4810      	ldr	r0, [pc, #64]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001e00:	f000 fa44 	bl	800228c <HAL_DMA_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001e0a:	f7ff ff6d 	bl	8001ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001e12:	649a      	str	r2, [r3, #72]	; 0x48
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_SPI_MspInit+0xfc>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2024      	movs	r0, #36	; 0x24
 8001e20:	f000 f9fd 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e24:	2024      	movs	r0, #36	; 0x24
 8001e26:	f000 fa16 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3728      	adds	r7, #40	; 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40003800 	.word	0x40003800
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	2000027c 	.word	0x2000027c
 8001e44:	40026070 	.word	0x40026070

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <NMI_Handler+0x4>

08001e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e94:	f000 f8a4 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <DMA1_Stream4_IRQHandler+0x10>)
 8001ea2:	f000 fb1b 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000027c 	.word	0x2000027c

08001eb0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <SPI2_IRQHandler+0x10>)
 8001eb6:	f001 fcef 	bl	8003898 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000224 	.word	0x20000224

08001ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f04:	4c0b      	ldr	r4, [pc, #44]	; (8001f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f12:	f7ff ffd7 	bl	8001ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f16:	f001 ff2f 	bl	8003d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1a:	f7ff fc0d 	bl	8001738 <main>
  bx  lr    
 8001f1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f2c:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 8001f30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f34:	200002e0 	.word	0x200002e0

08001f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_Init+0x40>)
 8001f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_Init+0x40>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_Init+0x40>)
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	2003      	movs	r0, #3
 8001f66:	f000 f94f 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f808 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f70:	f7ff fec0 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f967 	bl	8002272 <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 f92f 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000004 	.word	0x20000004
 8001fd8:	2000000c 	.word	0x2000000c
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c
 8002004:	200002dc 	.word	0x200002dc

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200002dc 	.word	0x200002dc

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000000c 	.word	0x2000000c

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff29 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff3e 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff31 	bl	80020cc <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa2 	bl	80021c4 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff feb6 	bl	8002008 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e099      	b.n	80023dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	e00f      	b.n	80022ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ca:	f7ff fe9d 	bl	8002008 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d908      	bls.n	80022ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e078      	b.n	80023dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e8      	bne.n	80022ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_DMA_Init+0x158>)
 8002304:	4013      	ands	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b04      	cmp	r3, #4
 8002342:	d107      	bne.n	8002354 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4313      	orrs	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f023 0307 	bic.w	r3, r3, #7
 800236a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b04      	cmp	r3, #4
 800237c:	d117      	bne.n	80023ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00e      	beq.n	80023ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fa91 	bl	80028b8 <DMA_CheckFifoParam>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023aa:	2301      	movs	r3, #1
 80023ac:	e016      	b.n	80023dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa48 	bl	800284c <DMA_CalcBaseAndBitshift>
 80023bc:	4603      	mov	r3, r0
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	223f      	movs	r2, #63	; 0x3f
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	f010803f 	.word	0xf010803f

080023e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_DMA_Start_IT+0x26>
 800240a:	2302      	movs	r3, #2
 800240c:	e040      	b.n	8002490 <HAL_DMA_Start_IT+0xa8>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d12f      	bne.n	8002482 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f9da 	bl	80027f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	223f      	movs	r2, #63	; 0x3f
 8002442:	409a      	lsls	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0216 	orr.w	r2, r2, #22
 8002456:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0208 	orr.w	r2, r2, #8
 800246e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e005      	b.n	800248e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00c      	b.n	80024d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2205      	movs	r2, #5
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024e8:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <HAL_DMA_IRQHandler+0x248>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a8e      	ldr	r2, [pc, #568]	; (8002728 <HAL_DMA_IRQHandler+0x24c>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2208      	movs	r2, #8
 8002508:	409a      	lsls	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01a      	beq.n	8002548 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0204 	bic.w	r2, r2, #4
 800252e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2208      	movs	r2, #8
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2201      	movs	r2, #1
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d012      	beq.n	800257e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2201      	movs	r2, #1
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2204      	movs	r2, #4
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00b      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2204      	movs	r2, #4
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2210      	movs	r2, #16
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d043      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03c      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	2210      	movs	r2, #16
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d018      	beq.n	800261e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d108      	bne.n	800260c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d024      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
 800260a:	e01f      	b.n	800264c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e016      	b.n	800264c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0208 	bic.w	r2, r2, #8
 800263a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2220      	movs	r2, #32
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 808f 	beq.w	800277c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8087 	beq.w	800277c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	2220      	movs	r2, #32
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b05      	cmp	r3, #5
 8002684:	d136      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0216 	bic.w	r2, r2, #22
 8002694:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_DMA_IRQHandler+0x1da>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	223f      	movs	r2, #63	; 0x3f
 80026cc:	409a      	lsls	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07e      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
        }
        return;
 80026f2:	e079      	b.n	80027e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01d      	beq.n	800273e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10d      	bne.n	800272c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	2b00      	cmp	r3, #0
 8002716:	d031      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	e02c      	b.n	800277c <HAL_DMA_IRQHandler+0x2a0>
 8002722:	bf00      	nop
 8002724:	20000004 	.word	0x20000004
 8002728:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e01e      	b.n	800277c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10f      	bne.n	800276c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0210 	bic.w	r2, r2, #16
 800275a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	2b00      	cmp	r3, #0
 8002782:	d032      	beq.n	80027ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2205      	movs	r2, #5
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d307      	bcc.n	80027c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f2      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x2cc>
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
 80027e6:	e000      	b.n	80027ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80027e8:	bf00      	nop
    }
  }
}
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800280c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d108      	bne.n	8002830 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800282e:	e007      	b.n	8002840 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	60da      	str	r2, [r3, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3b10      	subs	r3, #16
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <DMA_CalcBaseAndBitshift+0x64>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d909      	bls.n	800288e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	659a      	str	r2, [r3, #88]	; 0x58
 800288c:	e007      	b.n	800289e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	080046bc 	.word	0x080046bc

080028b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11f      	bne.n	8002912 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d856      	bhi.n	8002986 <DMA_CheckFifoParam+0xce>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <DMA_CheckFifoParam+0x28>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	080028f1 	.word	0x080028f1
 80028e4:	08002903 	.word	0x08002903
 80028e8:	080028f1 	.word	0x080028f1
 80028ec:	08002987 	.word	0x08002987
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d046      	beq.n	800298a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e043      	b.n	800298a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800290a:	d140      	bne.n	800298e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e03d      	b.n	800298e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291a:	d121      	bne.n	8002960 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d837      	bhi.n	8002992 <DMA_CheckFifoParam+0xda>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <DMA_CheckFifoParam+0x70>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	08002939 	.word	0x08002939
 800292c:	0800293f 	.word	0x0800293f
 8002930:	08002939 	.word	0x08002939
 8002934:	08002951 	.word	0x08002951
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e030      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d025      	beq.n	8002996 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e022      	b.n	8002996 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002958:	d11f      	bne.n	800299a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800295e:	e01c      	b.n	800299a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d903      	bls.n	800296e <DMA_CheckFifoParam+0xb6>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800296c:	e018      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      break;
 8002972:	e015      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e00b      	b.n	800299e <DMA_CheckFifoParam+0xe6>
      break;
 8002986:	bf00      	nop
 8002988:	e00a      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e008      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
 8002990:	e006      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
    }
  } 
  
  return status; 
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e16b      	b.n	8002ca4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 815a 	bne.w	8002c9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80b4 	beq.w	8002c9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b60      	ldr	r3, [pc, #384]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a5b      	ldr	r2, [pc, #364]	; (8002cc0 <HAL_GPIO_Init+0x310>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_GPIO_Init+0x314>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x226>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <HAL_GPIO_Init+0x318>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x222>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a50      	ldr	r2, [pc, #320]	; (8002ccc <HAL_GPIO_Init+0x31c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x21e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4f      	ldr	r2, [pc, #316]	; (8002cd0 <HAL_GPIO_Init+0x320>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4e      	ldr	r2, [pc, #312]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <HAL_GPIO_Init+0x328>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4c      	ldr	r2, [pc, #304]	; (8002cdc <HAL_GPIO_Init+0x32c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4b      	ldr	r2, [pc, #300]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x20a>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e00e      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	e00c      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e00a      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e008      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f002 0203 	and.w	r2, r2, #3
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be8:	4935      	ldr	r1, [pc, #212]	; (8002cc0 <HAL_GPIO_Init+0x310>)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1a:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c44:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	f67f ae90 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	40020800 	.word	0x40020800
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40021400 	.word	0x40021400
 8002cdc:	40021800 	.word	0x40021800
 8002ce0:	40021c00 	.word	0x40021c00
 8002ce4:	40013c00 	.word	0x40013c00

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d2c:	887a      	ldrh	r2, [r7, #2]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	041a      	lsls	r2, r3, #16
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	619a      	str	r2, [r3, #24]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e267      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d075      	beq.n	8002e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6e:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d00c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b82      	ldr	r3, [pc, #520]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d92:	d10b      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4b7e      	ldr	r3, [pc, #504]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d05b      	beq.n	8002e58 <HAL_RCC_OscConfig+0x108>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d157      	bne.n	8002e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e242      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x74>
 8002db6:	4b76      	ldr	r3, [pc, #472]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a75      	ldr	r2, [pc, #468]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e01d      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x98>
 8002dce:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6f      	ldr	r2, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b6d      	ldr	r3, [pc, #436]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6c      	ldr	r2, [pc, #432]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002de8:	4b69      	ldr	r3, [pc, #420]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a68      	ldr	r2, [pc, #416]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b66      	ldr	r3, [pc, #408]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a65      	ldr	r2, [pc, #404]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7ff f8fe 	bl	8002008 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7ff f8fa 	bl	8002008 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e207      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0xc0>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff f8ea 	bl	8002008 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7ff f8e6 	bl	8002008 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1f3      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	4b51      	ldr	r3, [pc, #324]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0xe8>
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d063      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e66:	4b4a      	ldr	r3, [pc, #296]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d11c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b44      	ldr	r3, [pc, #272]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1c7      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4937      	ldr	r1, [pc, #220]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	e03a      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec0:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <HAL_RCC_OscConfig+0x244>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7ff f89f 	bl	8002008 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ece:	f7ff f89b 	bl	8002008 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1a8      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4925      	ldr	r1, [pc, #148]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_RCC_OscConfig+0x244>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7ff f87e 	bl	8002008 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f10:	f7ff f87a 	bl	8002008 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e187      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d036      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_RCC_OscConfig+0x248>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7ff f85e 	bl	8002008 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f50:	f7ff f85a 	bl	8002008 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e167      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x200>
 8002f6e:	e01b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_OscConfig+0x248>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7ff f847 	bl	8002008 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	e00e      	b.n	8002f9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7e:	f7ff f843 	bl	8002008 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d907      	bls.n	8002f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e150      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	42470000 	.word	0x42470000
 8002f98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	4b88      	ldr	r3, [pc, #544]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ea      	bne.n	8002f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8097 	beq.w	80030e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	4b7d      	ldr	r3, [pc, #500]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a7c      	ldr	r2, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd6:	4b7a      	ldr	r3, [pc, #488]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b77      	ldr	r3, [pc, #476]	; (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff2:	4b74      	ldr	r3, [pc, #464]	; (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a73      	ldr	r2, [pc, #460]	; (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7ff f803 	bl	8002008 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fe ffff 	bl	8002008 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e10c      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_OscConfig+0x474>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x2ea>
 800302c:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a63      	ldr	r2, [pc, #396]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	e01c      	b.n	8003074 <HAL_RCC_OscConfig+0x324>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b05      	cmp	r3, #5
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x30c>
 8003042:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a5e      	ldr	r2, [pc, #376]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
 800304e:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a5b      	ldr	r2, [pc, #364]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0x324>
 800305c:	4b58      	ldr	r3, [pc, #352]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4a57      	ldr	r2, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	; 0x70
 8003068:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a54      	ldr	r2, [pc, #336]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0304 	bic.w	r3, r3, #4
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d015      	beq.n	80030a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe ffc4 	bl	8002008 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe ffc0 	bl	8002008 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0cb      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	4b49      	ldr	r3, [pc, #292]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0ee      	beq.n	8003084 <HAL_RCC_OscConfig+0x334>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe ffae 	bl	8002008 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe ffaa 	bl	8002008 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0b5      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ee      	bne.n	80030b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d8:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	4a38      	ldr	r2, [pc, #224]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80a1 	beq.w	8003230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ee:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d05c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d141      	bne.n	8003186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <HAL_RCC_OscConfig+0x478>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe ff7e 	bl	8002008 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe ff7a 	bl	8002008 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e087      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	3b01      	subs	r3, #1
 8003148:	041b      	lsls	r3, r3, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	491b      	ldr	r1, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x478>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe ff53 	bl	8002008 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe ff4f 	bl	8002008 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e05c      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x416>
 8003184:	e054      	b.n	8003230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_RCC_OscConfig+0x478>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe ff3c 	bl	8002008 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe ff38 	bl	8002008 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e045      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x470>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x444>
 80031b2:	e03d      	b.n	8003230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e038      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40007000 	.word	0x40007000
 80031c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_RCC_OscConfig+0x4ec>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d028      	beq.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d121      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d11a      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	4293      	cmp	r3, r2
 8003206:	d111      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	3b01      	subs	r3, #1
 8003216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cc      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d90c      	bls.n	800327c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800329e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a52      	ldr	r2, [pc, #328]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d044      	beq.n	8003360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e06f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e067      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4934      	ldr	r1, [pc, #208]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7fe fe6a 	bl	8002008 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fe fe66 	bl	8002008 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	; 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e04f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d20c      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f821 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fdca 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023c00 	.word	0x40023c00
 80033fc:	40023800 	.word	0x40023800
 8003400:	080046ac 	.word	0x080046ac
 8003404:	20000004 	.word	0x20000004
 8003408:	20000008 	.word	0x20000008

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b094      	sub	sp, #80	; 0x50
 8003412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	647b      	str	r3, [r7, #68]	; 0x44
 8003418:	2300      	movs	r3, #0
 800341a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800341c:	2300      	movs	r3, #0
 800341e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003424:	4b79      	ldr	r3, [pc, #484]	; (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d00d      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x40>
 8003430:	2b08      	cmp	r3, #8
 8003432:	f200 80e1 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 800343a:	2b04      	cmp	r3, #4
 800343c:	d003      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x3a>
 800343e:	e0db      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b73      	ldr	r3, [pc, #460]	; (8003610 <HAL_RCC_GetSysClockFreq+0x204>)
 8003442:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003444:	e0db      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003446:	4b73      	ldr	r3, [pc, #460]	; (8003614 <HAL_RCC_GetSysClockFreq+0x208>)
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800344a:	e0d8      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800344c:	4b6f      	ldr	r3, [pc, #444]	; (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003454:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003462:	4b6a      	ldr	r3, [pc, #424]	; (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	2200      	movs	r2, #0
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
 800346c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
 800347a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800347e:	4622      	mov	r2, r4
 8003480:	462b      	mov	r3, r5
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4621      	mov	r1, r4
 8003498:	1a51      	subs	r1, r2, r1
 800349a:	6139      	str	r1, [r7, #16]
 800349c:	4629      	mov	r1, r5
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b0:	4659      	mov	r1, fp
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ba:	4651      	mov	r1, sl
 80034bc:	018a      	lsls	r2, r1, #6
 80034be:	4651      	mov	r1, sl
 80034c0:	ebb2 0801 	subs.w	r8, r2, r1
 80034c4:	4659      	mov	r1, fp
 80034c6:	eb63 0901 	sbc.w	r9, r3, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034de:	4690      	mov	r8, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	eb18 0303 	adds.w	r3, r8, r3
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	462b      	mov	r3, r5
 80034ec:	eb49 0303 	adc.w	r3, r9, r3
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034fe:	4629      	mov	r1, r5
 8003500:	024b      	lsls	r3, r1, #9
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003508:	4621      	mov	r1, r4
 800350a:	024a      	lsls	r2, r1, #9
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
 8003516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800351c:	f7fd f962 	bl	80007e4 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003528:	e058      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352a:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	2200      	movs	r2, #0
 8003532:	4618      	mov	r0, r3
 8003534:	4611      	mov	r1, r2
 8003536:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	f04f 0000 	mov.w	r0, #0
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003556:	0150      	lsls	r0, r2, #5
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4641      	mov	r1, r8
 800355e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003562:	4649      	mov	r1, r9
 8003564:	eb63 0b01 	sbc.w	fp, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003574:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003578:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800357c:	ebb2 040a 	subs.w	r4, r2, sl
 8003580:	eb63 050b 	sbc.w	r5, r3, fp
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	00eb      	lsls	r3, r5, #3
 800358e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003592:	00e2      	lsls	r2, r4, #3
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	4643      	mov	r3, r8
 800359a:	18e3      	adds	r3, r4, r3
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	464b      	mov	r3, r9
 80035a0:	eb45 0303 	adc.w	r3, r5, r3
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b2:	4629      	mov	r1, r5
 80035b4:	028b      	lsls	r3, r1, #10
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035bc:	4621      	mov	r1, r4
 80035be:	028a      	lsls	r2, r1, #10
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	61fa      	str	r2, [r7, #28]
 80035cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d0:	f7fd f908 	bl	80007e4 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetSysClockFreq+0x204>)
 80035fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003600:	4618      	mov	r0, r3
 8003602:	3750      	adds	r7, #80	; 0x50
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e07b      	b.n	8003722 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363a:	d009      	beq.n	8003650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
 8003642:	e005      	b.n	8003650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe fb6a 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	ea42 0103 	orr.w	r1, r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0104 	and.w	r1, r3, #4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f003 0210 	and.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_SPI_Transmit_DMA+0x20>
 8003748:	2302      	movs	r3, #2
 800374a:	e09b      	b.n	8003884 <HAL_SPI_Transmit_DMA+0x158>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d002      	beq.n	8003766 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003760:	2302      	movs	r3, #2
 8003762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003764:	e089      	b.n	800387a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_Transmit_DMA+0x46>
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003776:	e080      	b.n	800387a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2203      	movs	r2, #3
 800377c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037be:	d10f      	bne.n	80037e0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	4a29      	ldr	r2, [pc, #164]	; (800388c <HAL_SPI_Transmit_DMA+0x160>)
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_SPI_Transmit_DMA+0x164>)
 80037ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <HAL_SPI_Transmit_DMA+0x168>)
 80037f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fc:	2200      	movs	r2, #0
 80037fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	4619      	mov	r1, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003816:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003818:	f7fe fde6 	bl	80023e8 <HAL_DMA_Start_IT>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00c      	beq.n	800383c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f043 0210 	orr.w	r2, r3, #16
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800383a:	e01e      	b.n	800387a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d007      	beq.n	800385a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0220 	orr.w	r2, r2, #32
 8003868:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0202 	orr.w	r2, r2, #2
 8003878:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003882:	7dfb      	ldrb	r3, [r7, #23]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	08003b51 	.word	0x08003b51
 8003890:	08003aa9 	.word	0x08003aa9
 8003894:	08003b6d 	.word	0x08003b6d

08003898 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10e      	bne.n	80038d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
    return;
 80038d6:	e0ce      	b.n	8003a76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <HAL_SPI_IRQHandler+0x5e>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
    return;
 80038f4:	e0bf      	b.n	8003a76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <HAL_SPI_IRQHandler+0x7e>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b0 	beq.w	8003a76 <HAL_SPI_IRQHandler+0x1de>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80aa 	beq.w	8003a76 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d023      	beq.n	8003974 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d011      	beq.n	800395c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	e00b      	b.n	8003974 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
        return;
 8003972:	e080      	b.n	8003a76 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d014      	beq.n	80039a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d04f      	beq.n	8003a74 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <HAL_SPI_IRQHandler+0x168>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d034      	beq.n	8003a6a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0203 	bic.w	r2, r2, #3
 8003a0e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d011      	beq.n	8003a3c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <HAL_SPI_IRQHandler+0x1e4>)
 8003a1e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fd37 	bl	8002498 <HAL_DMA_Abort_IT>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_SPI_IRQHandler+0x1e4>)
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fd21 	bl	8002498 <HAL_DMA_Abort_IT>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003a68:	e003      	b.n	8003a72 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f812 	bl	8003a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a70:	e000      	b.n	8003a74 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a72:	bf00      	nop
    return;
 8003a74:	bf00      	nop
  }
}
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	08003bad 	.word	0x08003bad

08003a80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab6:	f7fe faa7 	bl	8002008 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	d03b      	beq.n	8003b44 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0220 	bic.w	r2, r2, #32
 8003ada:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0202 	bic.w	r2, r2, #2
 8003aea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f000 f8f7 	bl	8003ce4 <SPI_EndRxTxTransaction>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f7ff ffa9 	bl	8003a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b42:	e002      	b.n	8003b4a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003b44:	6978      	ldr	r0, [r7, #20]
 8003b46:	f7fc ffcb 	bl	8000ae0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff ff8e 	bl	8003a80 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0203 	bic.w	r2, r2, #3
 8003b88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff ff78 	bl	8003a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff ff64 	bl	8003a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003be4:	f7fe fa10 	bl	8002008 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bf4:	f7fe fa08 	bl	8002008 <HAL_GetTick>
 8003bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bfa:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	015b      	lsls	r3, r3, #5
 8003c00:	0d1b      	lsrs	r3, r3, #20
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	fb02 f303 	mul.w	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c0a:	e054      	b.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d050      	beq.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c14:	f7fe f9f8 	bl	8002008 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d902      	bls.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d13d      	bne.n	8003ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c42:	d111      	bne.n	8003c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4c:	d004      	beq.n	8003c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d107      	bne.n	8003c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c70:	d10f      	bne.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e017      	b.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	bf0c      	ite	eq
 8003cc6:	2301      	moveq	r3, #1
 8003cc8:	2300      	movne	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d19b      	bne.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000004 	.word	0x20000004

08003ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <SPI_EndRxTxTransaction+0x7c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <SPI_EndRxTxTransaction+0x80>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0d5b      	lsrs	r3, r3, #21
 8003cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d00:	fb02 f303 	mul.w	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0e:	d112      	bne.n	8003d36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2200      	movs	r2, #0
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff ff5a 	bl	8003bd4 <SPI_WaitFlagStateUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e00f      	b.n	8003d56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d0f2      	beq.n	8003d36 <SPI_EndRxTxTransaction+0x52>
 8003d50:	e000      	b.n	8003d54 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d52:	bf00      	nop
  }

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000004 	.word	0x20000004
 8003d64:	165e9f81 	.word	0x165e9f81

08003d68 <memset>:
 8003d68:	4402      	add	r2, r0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d100      	bne.n	8003d72 <memset+0xa>
 8003d70:	4770      	bx	lr
 8003d72:	f803 1b01 	strb.w	r1, [r3], #1
 8003d76:	e7f9      	b.n	8003d6c <memset+0x4>

08003d78 <__libc_init_array>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	4d0d      	ldr	r5, [pc, #52]	; (8003db0 <__libc_init_array+0x38>)
 8003d7c:	4c0d      	ldr	r4, [pc, #52]	; (8003db4 <__libc_init_array+0x3c>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	2600      	movs	r6, #0
 8003d84:	42a6      	cmp	r6, r4
 8003d86:	d109      	bne.n	8003d9c <__libc_init_array+0x24>
 8003d88:	4d0b      	ldr	r5, [pc, #44]	; (8003db8 <__libc_init_array+0x40>)
 8003d8a:	4c0c      	ldr	r4, [pc, #48]	; (8003dbc <__libc_init_array+0x44>)
 8003d8c:	f000 f818 	bl	8003dc0 <_init>
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	2600      	movs	r6, #0
 8003d96:	42a6      	cmp	r6, r4
 8003d98:	d105      	bne.n	8003da6 <__libc_init_array+0x2e>
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da0:	4798      	blx	r3
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7ee      	b.n	8003d84 <__libc_init_array+0xc>
 8003da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003daa:	4798      	blx	r3
 8003dac:	3601      	adds	r6, #1
 8003dae:	e7f2      	b.n	8003d96 <__libc_init_array+0x1e>
 8003db0:	080046cc 	.word	0x080046cc
 8003db4:	080046cc 	.word	0x080046cc
 8003db8:	080046cc 	.word	0x080046cc
 8003dbc:	080046d0 	.word	0x080046d0

08003dc0 <_init>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr

08003dcc <_fini>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr
