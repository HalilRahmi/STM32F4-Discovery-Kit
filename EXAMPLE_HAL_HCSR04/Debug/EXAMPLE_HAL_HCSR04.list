
EXAMPLE_HAL_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d08  08003d08  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d10  08003d10  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000000d4  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c1bd  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b87  00000000  00000000  0002c24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d28  00000000  00000000  0002ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a4f  00000000  00000000  0002eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020447  00000000  00000000  0002f54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e98d  00000000  00000000  0004f996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7420  00000000  00000000  0005e323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000038d0  00000000  00000000  00125744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00129014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cbc 	.word	0x08003cbc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003cbc 	.word	0x08003cbc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b970 	b.w	8000c9c <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	460f      	mov	r7, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4694      	mov	ip, r2
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0xe2>
 80009ea:	fab2 f382 	clz	r3, r2
 80009ee:	b143      	cbz	r3, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f4:	f1c3 0220 	rsb	r2, r3, #32
 80009f8:	409f      	lsls	r7, r3
 80009fa:	fa20 f202 	lsr.w	r2, r0, r2
 80009fe:	4317      	orrs	r7, r2
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a06:	fa1f f58c 	uxth.w	r5, ip
 8000a0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a0e:	0c22      	lsrs	r2, r4, #16
 8000a10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a18:	fb01 f005 	mul.w	r0, r1, r5
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a28:	f080 811c 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8119 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a46:	fb00 f505 	mul.w	r5, r0, r5
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x90>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x294>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x294>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xbc>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ed 	beq.w	8000c5e <__udivmoddi4+0x28a>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d149      	bne.n	8000b2c <__udivmoddi4+0x158>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xce>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2be>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4617      	mov	r7, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xe6>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8090 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ad4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ade:	fb0e f005 	mul.w	r0, lr, r5
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2b8>
 8000af6:	4645      	mov	r5, r8
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b00:	fb07 2210 	mls	r2, r7, r0, r2
 8000b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x14e>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x14c>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2c2>
 8000b20:	4610      	mov	r0, r2
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b2a:	e79f      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b2c:	f1c1 0720 	rsb	r7, r1, #32
 8000b30:	408b      	lsls	r3, r1
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b42:	40fd      	lsrs	r5, r7
 8000b44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb09 5518 	mls	r5, r9, r8, r5
 8000b56:	0c1c      	lsrs	r4, r3, #16
 8000b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	fa00 f001 	lsl.w	r0, r0, r1
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2b4>
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2b4>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4464      	add	r4, ip
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	b29d      	uxth	r5, r3
 8000b88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2ac>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2ac>
 8000baa:	3b02      	subs	r3, #2
 8000bac:	4464      	add	r4, ip
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46ae      	mov	lr, r5
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x29c>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x298>
 8000bc4:	b156      	cbz	r6, 8000bdc <__udivmoddi4+0x208>
 8000bc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd2:	40ca      	lsrs	r2, r1
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	f1c3 0120 	rsb	r1, r3, #32
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	fa20 f201 	lsr.w	r2, r0, r1
 8000bf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bf4:	409d      	lsls	r5, r3
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1510 	mls	r5, r7, r0, r1
 8000c08:	0c11      	lsrs	r1, r2, #16
 8000c0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c12:	428d      	cmp	r5, r1
 8000c14:	fa04 f403 	lsl.w	r4, r4, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x258>
 8000c1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c24:	428d      	cmp	r5, r1
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1b49      	subs	r1, r1, r5
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c34:	fb07 1115 	mls	r1, r7, r5, r1
 8000c38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x282>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000c4e:	4291      	cmp	r1, r2
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000c52:	3d02      	subs	r5, #2
 8000c54:	4462      	add	r2, ip
 8000c56:	1a52      	subs	r2, r2, r1
 8000c58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0xfc>
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e708      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000c64:	4639      	mov	r1, r7
 8000c66:	e6e6      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x90>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c80:	462b      	mov	r3, r5
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x258>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xd8>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x14e>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000caa:	4a38      	ldr	r2, [pc, #224]	; (8000d8c <HD44780_Init+0xec>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <HD44780_Init+0xf0>)
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000cb6:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <HD44780_Init+0xf4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <HD44780_Init+0xec>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d907      	bls.n	8000cd4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <HD44780_Init+0xf4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HD44780_Init+0xf4>)
 8000cd0:	701a      	strb	r2, [r3, #0]
 8000cd2:	e006      	b.n	8000ce2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <HD44780_Init+0xf4>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <HD44780_Init+0xf4>)
 8000ce0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000ce2:	f000 f993 	bl	800100c <DelayInit>
  HAL_Delay(50);
 8000ce6:	2032      	movs	r0, #50	; 0x32
 8000ce8:	f000 fdf8 	bl	80018dc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000cec:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <HD44780_Init+0xf0>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f951 	bl	8000f98 <ExpanderWrite>
  HAL_Delay(1000);
 8000cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfa:	f000 fdef 	bl	80018dc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000cfe:	2030      	movs	r0, #48	; 0x30
 8000d00:	f000 f938 	bl	8000f74 <Write4Bits>
  DelayUS(4500);
 8000d04:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d08:	f000 f9aa 	bl	8001060 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d0c:	2030      	movs	r0, #48	; 0x30
 8000d0e:	f000 f931 	bl	8000f74 <Write4Bits>
  DelayUS(4500);
 8000d12:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d16:	f000 f9a3 	bl	8001060 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d1a:	2030      	movs	r0, #48	; 0x30
 8000d1c:	f000 f92a 	bl	8000f74 <Write4Bits>
  DelayUS(4500);
 8000d20:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d24:	f000 f99c 	bl	8001060 <DelayUS>

  Write4Bits(0x02 << 4);
 8000d28:	2020      	movs	r0, #32
 8000d2a:	f000 f923 	bl	8000f74 <Write4Bits>
  DelayUS(100);
 8000d2e:	2064      	movs	r0, #100	; 0x64
 8000d30:	f000 f996 	bl	8001060 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HD44780_Init+0xf4>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f8db 	bl	8000efa <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HD44780_Init+0xf8>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000d4a:	f000 f875 	bl	8000e38 <HD44780_Display>
  HD44780_Clear();
 8000d4e:	f000 f82b 	bl	8000da8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HD44780_Init+0xfc>)
 8000d54:	2202      	movs	r2, #2
 8000d56:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HD44780_Init+0xfc>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f8c9 	bl	8000efa <SendCommand>
  DelayUS(4500);
 8000d68:	f241 1094 	movw	r0, #4500	; 0x1194
 8000d6c:	f000 f978 	bl	8001060 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000d70:	490b      	ldr	r1, [pc, #44]	; (8000da0 <HD44780_Init+0x100>)
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f876 	bl	8000e64 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000d78:	490a      	ldr	r1, [pc, #40]	; (8000da4 <HD44780_Init+0x104>)
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 f872 	bl	8000e64 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000d80:	f000 f81d 	bl	8000dbe <HD44780_Home>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000003b 	.word	0x2000003b
 8000d90:	2000003c 	.word	0x2000003c
 8000d94:	20000038 	.word	0x20000038
 8000d98:	20000039 	.word	0x20000039
 8000d9c:	2000003a 	.word	0x2000003a
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000008 	.word	0x20000008

08000da8 <HD44780_Clear>:

void HD44780_Clear()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f000 f8a4 	bl	8000efa <SendCommand>
  DelayUS(2000);
 8000db2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000db6:	f000 f953 	bl	8001060 <DelayUS>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HD44780_Home>:

void HD44780_Home()
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f000 f899 	bl	8000efa <SendCommand>
  DelayUS(2000);
 8000dc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dcc:	f000 f948 	bl	8001060 <DelayUS>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HD44780_SetCursor+0x5c>)
 8000de6:	f107 0408 	add.w	r4, r7, #8
 8000dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HD44780_SetCursor+0x60>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	79ba      	ldrb	r2, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d303      	bcc.n	8000e02 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HD44780_SetCursor+0x60>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	3318      	adds	r3, #24
 8000e08:	443b      	add	r3, r7
 8000e0a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f86a 	bl	8000efa <SendCommand>
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08003cd4 	.word	0x08003cd4
 8000e34:	2000003b 	.word	0x2000003b

08000e38 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HD44780_Display+0x28>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HD44780_Display+0x28>)
 8000e48:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HD44780_Display+0x28>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f850 	bl	8000efa <SendCommand>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000039 	.word	0x20000039

08000e64 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f837 	bl	8000efa <SendCommand>
  for (int i=0; i<8; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e009      	b.n	8000ea6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f83b 	bl	8000f16 <SendChar>
  for (int i=0; i<8; i++)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b07      	cmp	r3, #7
 8000eaa:	ddf2      	ble.n	8000e92 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f827 	bl	8000f16 <SendChar>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000ed8:	e006      	b.n	8000ee8 <HD44780_PrintStr+0x18>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f817 	bl	8000f16 <SendChar>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f4      	bne.n	8000eda <HD44780_PrintStr+0xa>
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f812 	bl	8000f32 <Send>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f804 	bl	8000f32 <Send>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f80b 	bl	8000f74 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f5e:	7bba      	ldrb	r2, [r7, #14]
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f804 	bl	8000f74 <Write4Bits>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f809 	bl	8000f98 <ExpanderWrite>
  PulseEnable(value);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f821 	bl	8000fd0 <PulseEnable>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <ExpanderWrite+0x30>)
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000fae:	f107 020f 	add.w	r2, r7, #15
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	214e      	movs	r1, #78	; 0x4e
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <ExpanderWrite+0x34>)
 8000fbc:	f001 f8be 	bl	800213c <HAL_I2C_Master_Transmit>
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000003c 	.word	0x2000003c
 8000fcc:	20000040 	.word	0x20000040

08000fd0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffd8 	bl	8000f98 <ExpanderWrite>
  DelayUS(20);
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f000 f839 	bl	8001060 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffce 	bl	8000f98 <ExpanderWrite>
  DelayUS(20);
 8000ffc:	2014      	movs	r0, #20
 8000ffe:	f000 f82f 	bl	8001060 <DelayUS>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <DelayInit>:

static void DelayInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <DelayInit+0x4c>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <DelayInit+0x4c>)
 8001016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800101a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <DelayInit+0x4c>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <DelayInit+0x4c>)
 8001022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001026:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <DelayInit+0x50>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <DelayInit+0x50>)
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <DelayInit+0x50>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <DelayInit+0x50>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <DelayInit+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001046:	bf00      	nop
  __ASM volatile ("NOP");
 8001048:	bf00      	nop
  __ASM volatile ("NOP");
 800104a:	bf00      	nop
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000edf0 	.word	0xe000edf0
 800105c:	e0001000 	.word	0xe0001000

08001060 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <DelayUS+0x44>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <DelayUS+0x48>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9a      	lsrs	r2, r3, #18
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <DelayUS+0x4c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <DelayUS+0x4c>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f6      	bhi.n	8001082 <DelayUS+0x22>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000010 	.word	0x20000010
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	e0001000 	.word	0xe0001000

080010b0 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 void delay (uint16_t time)
  {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	 __HAL_TIM_SET_COUNTER(&htim1,0);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <delay+0x30>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
	 while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 80010c2:	bf00      	nop
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <delay+0x30>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3f9      	bcc.n	80010c4 <delay+0x14>
 }
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000094 	.word	0x20000094
 80010e4:	00000000 	.word	0x00000000

080010e8 <HAL_TIM_IC_CaptureCallback>:

 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7f1b      	ldrb	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	f040 8083 	bne.w	8001200 <HAL_TIM_IC_CaptureCallback+0x118>
 	{
 		if (Is_First_Captured==0) // if the first value is not captured
 80010fa:	4b45      	ldr	r3, [pc, #276]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11a      	bne.n	8001138 <HAL_TIM_IC_CaptureCallback+0x50>
 		{
 			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001102:	2100      	movs	r1, #0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 fac1 	bl	800368c <HAL_TIM_ReadCapturedValue>
 800110a:	4603      	mov	r3, r0
 800110c:	4a41      	ldr	r2, [pc, #260]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800110e:	6013      	str	r3, [r2, #0]
 			Is_First_Captured = 1;  // set the first captured as true
 8001110:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
 			// Now change the polarity to falling edge
 			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 020a 	bic.w	r2, r2, #10
 8001124:	621a      	str	r2, [r3, #32]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a1a      	ldr	r2, [r3, #32]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0202 	orr.w	r2, r2, #2
 8001134:	621a      	str	r2, [r3, #32]
 			// set polarity to rising edge
 			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 		}
 	}
 }
 8001136:	e063      	b.n	8001200 <HAL_TIM_IC_CaptureCallback+0x118>
 		else if (Is_First_Captured==1)   // if the first is already captured
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x128>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d15f      	bne.n	8001200 <HAL_TIM_IC_CaptureCallback+0x118>
 			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f002 faa2 	bl	800368c <HAL_TIM_ReadCapturedValue>
 8001148:	4603      	mov	r3, r0
 800114a:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x130>)
 800114c:	6013      	str	r3, [r2, #0]
 			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
 			if (IC_Val2 > IC_Val1)
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d907      	bls.n	8001172 <HAL_TIM_IC_CaptureCallback+0x8a>
 				Difference = IC_Val2-IC_Val1;
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4a2b      	ldr	r2, [pc, #172]	; (800121c <HAL_TIM_IC_CaptureCallback+0x134>)
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e00f      	b.n	8001192 <HAL_TIM_IC_CaptureCallback+0xaa>
 			else if (IC_Val1 > IC_Val2)
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d909      	bls.n	8001192 <HAL_TIM_IC_CaptureCallback+0xaa>
 				Difference = (0xffff - IC_Val1) + IC_Val2;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800118c:	33ff      	adds	r3, #255	; 0xff
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001190:	6013      	str	r3, [r2, #0]
 			Distance = Difference * .034/2;
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f958 	bl	800044c <__aeabi_ui2d>
 800119c:	a31a      	add	r3, pc, #104	; (adr r3, 8001208 <HAL_TIM_IC_CaptureCallback+0x120>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f9cd 	bl	8000540 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b6:	f7ff faed 	bl	8000794 <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fbcf 	bl	8000964 <__aeabi_d2uiz>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011cc:	701a      	strb	r2, [r3, #0]
 			Is_First_Captured = 0; // set it back to false
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
 			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020a 	bic.w	r2, r2, #10
 80011e2:	621a      	str	r2, [r3, #32]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6a12      	ldr	r2, [r2, #32]
 80011ee:	621a      	str	r2, [r3, #32]
 			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0202 	bic.w	r2, r2, #2
 80011fe:	60da      	str	r2, [r3, #12]
 }
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	b020c49c 	.word	0xb020c49c
 800120c:	3fa16872 	.word	0x3fa16872
 8001210:	200000e8 	.word	0x200000e8
 8001214:	200000dc 	.word	0x200000dc
 8001218:	200000e0 	.word	0x200000e0
 800121c:	200000e4 	.word	0x200000e4
 8001220:	200000e9 	.word	0x200000e9
 8001224:	20000094 	.word	0x20000094

08001228 <HCSR04_Read>:

 void HCSR04_Read (void)
 {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <HCSR04_Read+0x38>)
 8001234:	f000 fe24 	bl	8001e80 <HAL_GPIO_WritePin>
 	delay(10);  // wait for 10 us
 8001238:	200a      	movs	r0, #10
 800123a:	f7ff ff39 	bl	80010b0 <delay>
 	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <HCSR04_Read+0x38>)
 8001246:	f000 fe1b 	bl	8001e80 <HAL_GPIO_WritePin>

 	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HCSR04_Read+0x3c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HCSR04_Read+0x3c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0202 	orr.w	r2, r2, #2
 8001258:	60da      	str	r2, [r3, #12]
 }
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	20000094 	.word	0x20000094

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fac4 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f84c 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 f938 	bl	80014e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001278:	f000 f8b2 	bl	80013e0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800127c:	f000 f8de 	bl	800143c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 8001280:	2002      	movs	r0, #2
 8001282:	f7ff fd0d 	bl	8000ca0 <HD44780_Init>
  HD44780_Clear();
 8001286:	f7ff fd8f 	bl	8000da8 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 800128a:	2100      	movs	r1, #0
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fda1 	bl	8000dd4 <HD44780_SetCursor>
  HD44780_PrintStr("DIST=");
 8001292:	4819      	ldr	r0, [pc, #100]	; (80012f8 <main+0x90>)
 8001294:	f7ff fe1c 	bl	8000ed0 <HD44780_PrintStr>

 HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001298:	2100      	movs	r1, #0
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <main+0x94>)
 800129c:	f001 ff2a 	bl	80030f4 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read();
 80012a0:	f7ff ffc2 	bl	8001228 <HCSR04_Read>
	  HD44780_PrintStr("DIST=");
 80012a4:	4814      	ldr	r0, [pc, #80]	; (80012f8 <main+0x90>)
 80012a6:	f7ff fe13 	bl	8000ed0 <HD44780_PrintStr>

	//  Distance = (Distance/10)+48;
	//  Distance = (Distance%10)+48;
	  HD44780_PrintSpecialChar((Distance/10)+48);
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <main+0x98>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <main+0x9c>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3330      	adds	r3, #48	; 0x30
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fdfa 	bl	8000eb6 <HD44780_PrintSpecialChar>
	  HD44780_PrintSpecialChar((Distance%10)+48);
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <main+0x98>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <main+0x9c>)
 80012c8:	fba3 1302 	umull	r1, r3, r3, r2
 80012cc:	08d9      	lsrs	r1, r3, #3
 80012ce:	460b      	mov	r3, r1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3330      	adds	r3, #48	; 0x30
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fde9 	bl	8000eb6 <HD44780_PrintSpecialChar>

	//  HD44780_PrintSpecialChar((Distance/10)+48);
	//  HD44780_PrintSpecialChar((Distance%10)+48);
	  HD44780_PrintStr(" cm");
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <main+0xa0>)
 80012e6:	f7ff fdf3 	bl	8000ed0 <HD44780_PrintStr>
	  HAL_Delay(200);
 80012ea:	20c8      	movs	r0, #200	; 0xc8
 80012ec:	f000 faf6 	bl	80018dc <HAL_Delay>
	  HD44780_Clear();
 80012f0:	f7ff fd5a 	bl	8000da8 <HD44780_Clear>
	  HCSR04_Read();
 80012f4:	e7d4      	b.n	80012a0 <main+0x38>
 80012f6:	bf00      	nop
 80012f8:	08003ce4 	.word	0x08003ce4
 80012fc:	20000094 	.word	0x20000094
 8001300:	200000e9 	.word	0x200000e9
 8001304:	cccccccd 	.word	0xcccccccd
 8001308:	08003cec 	.word	0x08003cec

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	; 0x50
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2230      	movs	r2, #48	; 0x30
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fca2 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <SystemClock_Config+0xcc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <SystemClock_Config+0xcc>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <SystemClock_Config+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <SystemClock_Config+0xd0>)
 8001356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <SystemClock_Config+0xd0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001368:	2301      	movs	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001376:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800137c:	2308      	movs	r3, #8
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001380:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800138a:	2307      	movs	r3, #7
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	4618      	mov	r0, r3
 8001394:	f001 f9da 	bl	800274c <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800139e:	f000 f8f5 	bl	800158c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2105      	movs	r1, #5
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fc3b 	bl	8002c3c <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013cc:	f000 f8de 	bl	800158c <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3750      	adds	r7, #80	; 0x50
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_I2C1_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <MX_I2C1_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_I2C1_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_I2C1_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_I2C1_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_I2C1_Init+0x50>)
 800141e:	f000 fd49 	bl	8001eb4 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 f8b0 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000040 	.word	0x20000040
 8001434:	40005400 	.word	0x40005400
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_TIM1_Init+0xa4>)
 800145a:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <MX_TIM1_Init+0xa8>)
 800145c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <MX_TIM1_Init+0xa4>)
 8001460:	2253      	movs	r2, #83	; 0x53
 8001462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_TIM1_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_TIM1_Init+0xa4>)
 800146c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001470:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_TIM1_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_TIM1_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_TIM1_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001484:	4816      	ldr	r0, [pc, #88]	; (80014e0 <MX_TIM1_Init+0xa4>)
 8001486:	f001 fde5 	bl	8003054 <HAL_TIM_IC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001490:	f000 f87c 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4619      	mov	r1, r3
 80014a2:	480f      	ldr	r0, [pc, #60]	; (80014e0 <MX_TIM1_Init+0xa4>)
 80014a4:	f002 fb4e 	bl	8003b44 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014ae:	f000 f86d 	bl	800158c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_TIM1_Init+0xa4>)
 80014ca:	f002 f843 	bl	8003554 <HAL_TIM_IC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80014d4:	f000 f85a 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000094 	.word	0x20000094
 80014e4:	40010000 	.word	0x40010000

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_GPIO_Init+0x9c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <MX_GPIO_Init+0x9c>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_GPIO_Init+0x9c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_GPIO_Init+0x9c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MX_GPIO_Init+0x9c>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_GPIO_Init+0x9c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_GPIO_Init+0x9c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a11      	ldr	r2, [pc, #68]	; (8001584 <MX_GPIO_Init+0x9c>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_GPIO_Init+0x9c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <MX_GPIO_Init+0xa0>)
 800155a:	f000 fc91 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 800155e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_GPIO_Init+0xa0>)
 8001578:	f000 fae6 	bl	8001b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40021000 	.word	0x40021000

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001594:	e7fe      	b.n	8001594 <Error_Handler+0x8>
	...

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_MspInit+0x4c>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_MspInit+0x4c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_MspInit+0x4c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015d6:	2007      	movs	r0, #7
 80015d8:	f000 fa74 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_I2C_MspInit+0x84>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12c      	bne.n	8001664 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162c:	2312      	movs	r3, #18
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <HAL_I2C_MspInit+0x8c>)
 8001644:	f000 fa80 	bl	8001b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_I2C_MspInit+0x88>)
 8001652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_I2C_MspInit+0x88>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40005400 	.word	0x40005400
 8001670:	40023800 	.word	0x40023800
 8001674:	40020400 	.word	0x40020400

08001678 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_TIM_IC_MspInit+0x94>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d134      	bne.n	8001704 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_TIM_IC_MspInit+0x98>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_TIM_IC_MspInit+0x98>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_TIM_IC_MspInit+0x98>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_TIM_IC_MspInit+0x98>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_TIM_IC_MspInit+0x98>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_TIM_IC_MspInit+0x98>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4809      	ldr	r0, [pc, #36]	; (8001714 <HAL_TIM_IC_MspInit+0x9c>)
 80016f0:	f000 fa2a 	bl	8001b48 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	201b      	movs	r0, #27
 80016fa:	f000 f9ee 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016fe:	201b      	movs	r0, #27
 8001700:	f000 fa07 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40010000 	.word	0x40010000
 8001710:	40023800 	.word	0x40023800
 8001714:	40021000 	.word	0x40021000

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001764:	f000 f89a 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM1_CC_IRQHandler+0x10>)
 8001772:	f001 fde7 	bl	8003344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000094 	.word	0x20000094

08001780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c0:	4c0b      	ldr	r4, [pc, #44]	; (80017f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffd7 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f002 fa4f 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fd47 	bl	8001268 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80017e8:	08003d18 	.word	0x08003d18
  ldr r2, =_sbss
 80017ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80017f0:	200000f0 	.word	0x200000f0

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f94f 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff feb4 	bl	8001598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f967 	bl	8001b2e <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f92f 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000010 	.word	0x20000010
 8001894:	20000018 	.word	0x20000018
 8001898:	20000014 	.word	0x20000014

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000018 	.word	0x20000018
 80018c0:	200000ec 	.word	0x200000ec

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200000ec 	.word	0x200000ec

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000018 	.word	0x20000018

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4907      	ldr	r1, [pc, #28]	; (80019c0 <__NVIC_EnableIRQ+0x38>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff29 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff3e 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff31 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e16b      	b.n	8001e3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 815a 	bne.w	8001e36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d005      	beq.n	8001b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d130      	bne.n	8001bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d017      	beq.n	8001c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d123      	bne.n	8001c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80b4 	beq.w	8001e36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b60      	ldr	r3, [pc, #384]	; (8001e54 <HAL_GPIO_Init+0x30c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a5f      	ldr	r2, [pc, #380]	; (8001e54 <HAL_GPIO_Init+0x30c>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_GPIO_Init+0x30c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cea:	4a5b      	ldr	r2, [pc, #364]	; (8001e58 <HAL_GPIO_Init+0x310>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_GPIO_Init+0x314>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <HAL_GPIO_Init+0x226>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <HAL_GPIO_Init+0x318>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x222>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a50      	ldr	r2, [pc, #320]	; (8001e64 <HAL_GPIO_Init+0x31c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x21e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4f      	ldr	r2, [pc, #316]	; (8001e68 <HAL_GPIO_Init+0x320>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x21a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4e      	ldr	r2, [pc, #312]	; (8001e6c <HAL_GPIO_Init+0x324>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x216>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4d      	ldr	r2, [pc, #308]	; (8001e70 <HAL_GPIO_Init+0x328>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x212>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4c      	ldr	r2, [pc, #304]	; (8001e74 <HAL_GPIO_Init+0x32c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x20e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4b      	ldr	r2, [pc, #300]	; (8001e78 <HAL_GPIO_Init+0x330>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x20a>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e00e      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d52:	2308      	movs	r3, #8
 8001d54:	e00c      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d56:	2306      	movs	r3, #6
 8001d58:	e00a      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x228>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d80:	4935      	ldr	r1, [pc, #212]	; (8001e58 <HAL_GPIO_Init+0x310>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e06:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f67f ae90 	bls.w	8001b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40021400 	.word	0x40021400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40021c00 	.word	0x40021c00
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e12b      	b.n	800211e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fb84 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f18:	f001 f888 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8001f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4a81      	ldr	r2, [pc, #516]	; (8002128 <HAL_I2C_Init+0x274>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d807      	bhi.n	8001f38 <HAL_I2C_Init+0x84>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a80      	ldr	r2, [pc, #512]	; (800212c <HAL_I2C_Init+0x278>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	bf94      	ite	ls
 8001f30:	2301      	movls	r3, #1
 8001f32:	2300      	movhi	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e006      	b.n	8001f46 <HAL_I2C_Init+0x92>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a7d      	ldr	r2, [pc, #500]	; (8002130 <HAL_I2C_Init+0x27c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0e7      	b.n	800211e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4a78      	ldr	r2, [pc, #480]	; (8002134 <HAL_I2C_Init+0x280>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0c9b      	lsrs	r3, r3, #18
 8001f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <HAL_I2C_Init+0x274>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d802      	bhi.n	8001f88 <HAL_I2C_Init+0xd4>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3301      	adds	r3, #1
 8001f86:	e009      	b.n	8001f9c <HAL_I2C_Init+0xe8>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a69      	ldr	r2, [pc, #420]	; (8002138 <HAL_I2C_Init+0x284>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	495c      	ldr	r1, [pc, #368]	; (8002128 <HAL_I2C_Init+0x274>)
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	d819      	bhi.n	8001ff0 <HAL_I2C_Init+0x13c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e59      	subs	r1, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_I2C_Init+0x138>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1e59      	subs	r1, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fea:	e051      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 8001fec:	2304      	movs	r3, #4
 8001fee:	e04f      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d111      	bne.n	800201c <HAL_I2C_Init+0x168>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	440b      	add	r3, r1
 8002006:	fbb0 f3f3 	udiv	r3, r0, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	e012      	b.n	8002042 <HAL_I2C_Init+0x18e>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e58      	subs	r0, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6859      	ldr	r1, [r3, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	0099      	lsls	r1, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Init+0x196>
 8002046:	2301      	movs	r3, #1
 8002048:	e022      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10e      	bne.n	8002070 <HAL_I2C_Init+0x1bc>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1e58      	subs	r0, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	440b      	add	r3, r1
 8002060:	fbb0 f3f3 	udiv	r3, r0, r3
 8002064:	3301      	adds	r3, #1
 8002066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206e:	e00f      	b.n	8002090 <HAL_I2C_Init+0x1dc>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1e58      	subs	r0, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	0099      	lsls	r1, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	6809      	ldr	r1, [r1, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6911      	ldr	r1, [r2, #16]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68d2      	ldr	r2, [r2, #12]
 80020ca:	4311      	orrs	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	000186a0 	.word	0x000186a0
 800212c:	001e847f 	.word	0x001e847f
 8002130:	003d08ff 	.word	0x003d08ff
 8002134:	431bde83 	.word	0x431bde83
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	461a      	mov	r2, r3
 8002148:	460b      	mov	r3, r1
 800214a:	817b      	strh	r3, [r7, #10]
 800214c:	4613      	mov	r3, r2
 800214e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff fbb8 	bl	80018c4 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b20      	cmp	r3, #32
 8002160:	f040 80e0 	bne.w	8002324 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2319      	movs	r3, #25
 800216a:	2201      	movs	r2, #1
 800216c:	4970      	ldr	r1, [pc, #448]	; (8002330 <HAL_I2C_Master_Transmit+0x1f4>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f964 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800217a:	2302      	movs	r3, #2
 800217c:	e0d3      	b.n	8002326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_I2C_Master_Transmit+0x50>
 8002188:	2302      	movs	r3, #2
 800218a:	e0cc      	b.n	8002326 <HAL_I2C_Master_Transmit+0x1ea>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d007      	beq.n	80021b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2221      	movs	r2, #33	; 0x21
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2210      	movs	r2, #16
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	893a      	ldrh	r2, [r7, #8]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a50      	ldr	r2, [pc, #320]	; (8002334 <HAL_I2C_Master_Transmit+0x1f8>)
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021f4:	8979      	ldrh	r1, [r7, #10]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f89c 	bl	8002338 <I2C_MasterRequestWrite>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e08d      	b.n	8002326 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002220:	e066      	b.n	80022f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	6a39      	ldr	r1, [r7, #32]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f9de 	bl	80025e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	2b04      	cmp	r3, #4
 8002238:	d107      	bne.n	800224a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11b      	bne.n	80022c4 <HAL_I2C_Master_Transmit+0x188>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d017      	beq.n	80022c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	6a39      	ldr	r1, [r7, #32]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f9ce 	bl	800266a <I2C_WaitOnBTFFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d107      	bne.n	80022ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e01a      	b.n	8002326 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d194      	bne.n	8002222 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	00100002 	.word	0x00100002
 8002334:	ffff0000 	.word	0xffff0000

08002338 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	460b      	mov	r3, r1
 8002346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d006      	beq.n	8002362 <I2C_MasterRequestWrite+0x2a>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d003      	beq.n	8002362 <I2C_MasterRequestWrite+0x2a>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002360:	d108      	bne.n	8002374 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e00b      	b.n	800238c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	2b12      	cmp	r3, #18
 800237a:	d107      	bne.n	800238c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f84f 	bl	800243c <I2C_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b2:	d103      	bne.n	80023bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e035      	b.n	800242c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023c8:	d108      	bne.n	80023dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ca:	897b      	ldrh	r3, [r7, #10]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	e01b      	b.n	8002414 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023dc:	897b      	ldrh	r3, [r7, #10]
 80023de:	11db      	asrs	r3, r3, #7
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f003 0306 	and.w	r3, r3, #6
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f063 030f 	orn	r3, r3, #15
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	490e      	ldr	r1, [pc, #56]	; (8002434 <I2C_MasterRequestWrite+0xfc>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f875 	bl	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e010      	b.n	800242c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4907      	ldr	r1, [pc, #28]	; (8002438 <I2C_MasterRequestWrite+0x100>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f865 	bl	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	00010008 	.word	0x00010008
 8002438:	00010002 	.word	0x00010002

0800243c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244c:	e025      	b.n	800249a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d021      	beq.n	800249a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7ff fa35 	bl	80018c4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e023      	b.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d10d      	bne.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4013      	ands	r3, r2
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	e00c      	b.n	80024da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4013      	ands	r3, r2
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d0b6      	beq.n	800244e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f8:	e051      	b.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002508:	d123      	bne.n	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002518:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002522:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f043 0204 	orr.w	r2, r3, #4
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e046      	b.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d021      	beq.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7ff f9b3 	bl	80018c4 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e020      	b.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d10c      	bne.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4013      	ands	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	e00b      	b.n	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d18d      	bne.n	80024fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f4:	e02d      	b.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f878 	bl	80026ec <I2C_IsAcknowledgeFailed>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e02d      	b.n	8002662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d021      	beq.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7ff f959 	bl	80018c4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e007      	b.n	8002662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d1ca      	bne.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002676:	e02d      	b.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f837 	bl	80026ec <I2C_IsAcknowledgeFailed>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e02d      	b.n	80026e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d021      	beq.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002690:	f7ff f918 	bl	80018c4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d116      	bne.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e007      	b.n	80026e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d1ca      	bne.n	8002678 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002702:	d11b      	bne.n	800273c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800270c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f043 0204 	orr.w	r2, r3, #4
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e267      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d075      	beq.n	8002856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800276a:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x240>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b04      	cmp	r3, #4
 8002774:	d00c      	beq.n	8002790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002776:	4b85      	ldr	r3, [pc, #532]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277e:	2b08      	cmp	r3, #8
 8002780:	d112      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002782:	4b82      	ldr	r3, [pc, #520]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800278e:	d10b      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	4b7e      	ldr	r3, [pc, #504]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d05b      	beq.n	8002854 <HAL_RCC_OscConfig+0x108>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d157      	bne.n	8002854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e242      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x74>
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a75      	ldr	r2, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x98>
 80027ca:	4b70      	ldr	r3, [pc, #448]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6f      	ldr	r2, [pc, #444]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6c      	ldr	r2, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xb0>
 80027e4:	4b69      	ldr	r3, [pc, #420]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a68      	ldr	r2, [pc, #416]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b66      	ldr	r3, [pc, #408]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a65      	ldr	r2, [pc, #404]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff f85e 	bl	80018c4 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff f85a 	bl	80018c4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e207      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xc0>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff f84a 	bl	80018c4 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff f846 	bl	80018c4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1f3      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0xe8>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002862:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287a:	4b44      	ldr	r3, [pc, #272]	; (800298c <HAL_RCC_OscConfig+0x240>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1c7      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4937      	ldr	r1, [pc, #220]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	e03a      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_RCC_OscConfig+0x244>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe ffff 	bl	80018c4 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7fe fffb 	bl	80018c4 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1a8      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4925      	ldr	r1, [pc, #148]	; (800298c <HAL_RCC_OscConfig+0x240>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x244>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe ffde 	bl	80018c4 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290c:	f7fe ffda 	bl	80018c4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e187      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d036      	beq.n	80029a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d016      	beq.n	800296c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_RCC_OscConfig+0x248>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe ffbe 	bl	80018c4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294c:	f7fe ffba 	bl	80018c4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e167      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_OscConfig+0x240>)
 8002960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x200>
 800296a:	e01b      	b.n	80029a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x248>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe ffa7 	bl	80018c4 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002978:	e00e      	b.n	8002998 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297a:	f7fe ffa3 	bl	80018c4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d907      	bls.n	8002998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e150      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
 800298c:	40023800 	.word	0x40023800
 8002990:	42470000 	.word	0x42470000
 8002994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 800299a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ea      	bne.n	800297a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8097 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b6:	4b81      	ldr	r3, [pc, #516]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10f      	bne.n	80029e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	4b7d      	ldr	r3, [pc, #500]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a7c      	ldr	r2, [pc, #496]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b7a      	ldr	r3, [pc, #488]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e2:	4b77      	ldr	r3, [pc, #476]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d118      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ee:	4b74      	ldr	r3, [pc, #464]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a73      	ldr	r2, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fa:	f7fe ff63 	bl	80018c4 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a02:	f7fe ff5f 	bl	80018c4 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e10c      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x474>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x2ea>
 8002a28:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	4a63      	ldr	r2, [pc, #396]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6713      	str	r3, [r2, #112]	; 0x70
 8002a34:	e01c      	b.n	8002a70 <HAL_RCC_OscConfig+0x324>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x30c>
 8002a3e:	4b5f      	ldr	r3, [pc, #380]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a5e      	ldr	r2, [pc, #376]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0x324>
 8002a58:	4b58      	ldr	r3, [pc, #352]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a57      	ldr	r2, [pc, #348]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	4b55      	ldr	r3, [pc, #340]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a54      	ldr	r2, [pc, #336]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe ff24 	bl	80018c4 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe ff20 	bl	80018c4 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0cb      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ee      	beq.n	8002a80 <HAL_RCC_OscConfig+0x334>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe ff0e 	bl	80018c4 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe ff0a 	bl	80018c4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e0b5      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ee      	bne.n	8002aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	4a38      	ldr	r2, [pc, #224]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80a1 	beq.w	8002c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aea:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d05c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d141      	bne.n	8002b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCC_OscConfig+0x478>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fede 	bl	80018c4 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe feda 	bl	80018c4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e087      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	3b01      	subs	r3, #1
 8002b44:	041b      	lsls	r3, r3, #16
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	491b      	ldr	r1, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x478>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe feb3 	bl	80018c4 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe feaf 	bl	80018c4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e05c      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x416>
 8002b80:	e054      	b.n	8002c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_RCC_OscConfig+0x478>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fe9c 	bl	80018c4 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fe98 	bl	80018c4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e045      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCC_OscConfig+0x470>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x444>
 8002bae:	e03d      	b.n	8002c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e038      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x4ec>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d028      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d121      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d11a      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d111      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0cc      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d90c      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b65      	ldr	r3, [pc, #404]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d044      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d119      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e06f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e067      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 0203 	bic.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4934      	ldr	r1, [pc, #208]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fdca 	bl	80018c4 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d34:	f7fe fdc6 	bl	80018c4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1eb      	bne.n	8002d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d20c      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 f821 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490a      	ldr	r1, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fd2a 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	08003cf0 	.word	0x08003cf0
 8002e00:	20000010 	.word	0x20000010
 8002e04:	20000014 	.word	0x20000014

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0c:	b094      	sub	sp, #80	; 0x50
 8002e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	647b      	str	r3, [r7, #68]	; 0x44
 8002e14:	2300      	movs	r3, #0
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e18:	2300      	movs	r3, #0
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e20:	4b79      	ldr	r3, [pc, #484]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d00d      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x40>
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	f200 80e1 	bhi.w	8002ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x34>
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e3a:	e0db      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e40:	e0db      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e42:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e46:	e0d8      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e48:	4b6f      	ldr	r3, [pc, #444]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d063      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	2200      	movs	r2, #0
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
 8002e72:	2300      	movs	r3, #0
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
 8002e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	0159      	lsls	r1, r3, #5
 8002e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8c:	0150      	lsls	r0, r2, #5
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4621      	mov	r1, r4
 8002e94:	1a51      	subs	r1, r2, r1
 8002e96:	6139      	str	r1, [r7, #16]
 8002e98:	4629      	mov	r1, r5
 8002e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eac:	4659      	mov	r1, fp
 8002eae:	018b      	lsls	r3, r1, #6
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	018a      	lsls	r2, r1, #6
 8002eba:	4651      	mov	r1, sl
 8002ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eda:	4690      	mov	r8, r2
 8002edc:	4699      	mov	r9, r3
 8002ede:	4623      	mov	r3, r4
 8002ee0:	eb18 0303 	adds.w	r3, r8, r3
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	eb49 0303 	adc.w	r3, r9, r3
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002efa:	4629      	mov	r1, r5
 8002efc:	024b      	lsls	r3, r1, #9
 8002efe:	4621      	mov	r1, r4
 8002f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f04:	4621      	mov	r1, r4
 8002f06:	024a      	lsls	r2, r1, #9
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	2200      	movs	r2, #0
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f18:	f7fd fd44 	bl	80009a4 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4613      	mov	r3, r2
 8002f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f24:	e058      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4611      	mov	r1, r2
 8002f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f36:	623b      	str	r3, [r7, #32]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f40:	4642      	mov	r2, r8
 8002f42:	464b      	mov	r3, r9
 8002f44:	f04f 0000 	mov.w	r0, #0
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	0159      	lsls	r1, r3, #5
 8002f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f52:	0150      	lsls	r0, r2, #5
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4641      	mov	r1, r8
 8002f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f5e:	4649      	mov	r1, r9
 8002f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f78:	ebb2 040a 	subs.w	r4, r2, sl
 8002f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	00eb      	lsls	r3, r5, #3
 8002f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f8e:	00e2      	lsls	r2, r4, #3
 8002f90:	4614      	mov	r4, r2
 8002f92:	461d      	mov	r5, r3
 8002f94:	4643      	mov	r3, r8
 8002f96:	18e3      	adds	r3, r4, r3
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	eb45 0303 	adc.w	r3, r5, r3
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fae:	4629      	mov	r1, r5
 8002fb0:	028b      	lsls	r3, r1, #10
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb8:	4621      	mov	r1, r4
 8002fba:	028a      	lsls	r2, r1, #10
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	61fa      	str	r2, [r7, #28]
 8002fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fcc:	f7fd fcea 	bl	80009a4 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff2:	e002      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetSysClockFreq+0x204>)
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3750      	adds	r7, #80	; 0x50
 8003000:	46bd      	mov	sp, r7
 8003002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	00f42400 	.word	0x00f42400
 8003010:	007a1200 	.word	0x007a1200

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_RCC_GetHCLKFreq+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000010 	.word	0x20000010

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003030:	f7ff fff0 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0a9b      	lsrs	r3, r3, #10
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4903      	ldr	r1, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	08003d00 	.word	0x08003d00

08003054 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fafc 	bl	8001678 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fb66 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_TIM_IC_Start_IT+0x1e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e013      	b.n	800313a <HAL_TIM_IC_Start_IT+0x46>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d104      	bne.n	8003122 <HAL_TIM_IC_Start_IT+0x2e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e00b      	b.n	800313a <HAL_TIM_IC_Start_IT+0x46>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d104      	bne.n	8003132 <HAL_TIM_IC_Start_IT+0x3e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e003      	b.n	800313a <HAL_TIM_IC_Start_IT+0x46>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d104      	bne.n	800314c <HAL_TIM_IC_Start_IT+0x58>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e013      	b.n	8003174 <HAL_TIM_IC_Start_IT+0x80>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d104      	bne.n	800315c <HAL_TIM_IC_Start_IT+0x68>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e00b      	b.n	8003174 <HAL_TIM_IC_Start_IT+0x80>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d104      	bne.n	800316c <HAL_TIM_IC_Start_IT+0x78>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e003      	b.n	8003174 <HAL_TIM_IC_Start_IT+0x80>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003172:	b2db      	uxtb	r3, r3
 8003174:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003176:	7bbb      	ldrb	r3, [r7, #14]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d102      	bne.n	8003182 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800317c:	7b7b      	ldrb	r3, [r7, #13]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d001      	beq.n	8003186 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0cc      	b.n	8003320 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d104      	bne.n	8003196 <HAL_TIM_IC_Start_IT+0xa2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003194:	e013      	b.n	80031be <HAL_TIM_IC_Start_IT+0xca>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_IC_Start_IT+0xb2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a4:	e00b      	b.n	80031be <HAL_TIM_IC_Start_IT+0xca>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_IC_Start_IT+0xc2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b4:	e003      	b.n	80031be <HAL_TIM_IC_Start_IT+0xca>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_IC_Start_IT+0xda>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031cc:	e013      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0x102>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d104      	bne.n	80031de <HAL_TIM_IC_Start_IT+0xea>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031dc:	e00b      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0x102>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_IC_Start_IT+0xfa>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ec:	e003      	b.n	80031f6 <HAL_TIM_IC_Start_IT+0x102>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d841      	bhi.n	8003280 <HAL_TIM_IC_Start_IT+0x18c>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <HAL_TIM_IC_Start_IT+0x110>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003239 	.word	0x08003239
 8003208:	08003281 	.word	0x08003281
 800320c:	08003281 	.word	0x08003281
 8003210:	08003281 	.word	0x08003281
 8003214:	0800324b 	.word	0x0800324b
 8003218:	08003281 	.word	0x08003281
 800321c:	08003281 	.word	0x08003281
 8003220:	08003281 	.word	0x08003281
 8003224:	0800325d 	.word	0x0800325d
 8003228:	08003281 	.word	0x08003281
 800322c:	08003281 	.word	0x08003281
 8003230:	08003281 	.word	0x08003281
 8003234:	0800326f 	.word	0x0800326f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0202 	orr.w	r2, r2, #2
 8003246:	60da      	str	r2, [r3, #12]
      break;
 8003248:	e01d      	b.n	8003286 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0204 	orr.w	r2, r2, #4
 8003258:	60da      	str	r2, [r3, #12]
      break;
 800325a:	e014      	b.n	8003286 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	60da      	str	r2, [r3, #12]
      break;
 800326c:	e00b      	b.n	8003286 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0210 	orr.w	r2, r2, #16
 800327c:	60da      	str	r2, [r3, #12]
      break;
 800327e:	e002      	b.n	8003286 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	bf00      	nop
  }

  if (status == HAL_OK)
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d148      	bne.n	800331e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	6839      	ldr	r1, [r7, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fc2f 	bl	8003af8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a22      	ldr	r2, [pc, #136]	; (8003328 <HAL_TIM_IC_Start_IT+0x234>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d022      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x1f6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d01d      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x1f6>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_TIM_IC_Start_IT+0x238>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d018      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x1f6>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_TIM_IC_Start_IT+0x23c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x1f6>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_TIM_IC_Start_IT+0x240>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x1f6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_TIM_IC_Start_IT+0x244>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x1f6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a18      	ldr	r2, [pc, #96]	; (800333c <HAL_TIM_IC_Start_IT+0x248>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_TIM_IC_Start_IT+0x1f6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_TIM_IC_Start_IT+0x24c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d111      	bne.n	800330e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b06      	cmp	r3, #6
 80032fa:	d010      	beq.n	800331e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330c:	e007      	b.n	800331e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40010000 	.word	0x40010000
 800332c:	40000400 	.word	0x40000400
 8003330:	40000800 	.word	0x40000800
 8003334:	40000c00 	.word	0x40000c00
 8003338:	40010400 	.word	0x40010400
 800333c:	40014000 	.word	0x40014000
 8003340:	40001800 	.word	0x40001800

08003344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d122      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b02      	cmp	r3, #2
 8003366:	d11b      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0202 	mvn.w	r2, #2
 8003370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd feae 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9ca 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f9d1 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0204 	mvn.w	r2, #4
 80033c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fe84 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f9a0 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f9a7 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0208 	mvn.w	r2, #8
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2204      	movs	r2, #4
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fe5a 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f976 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f97d 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b10      	cmp	r3, #16
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0210 	mvn.w	r2, #16
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2208      	movs	r2, #8
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fe30 	bl	80010e8 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f94c 	bl	8003728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f953 	bl	800373c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d10e      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0201 	mvn.w	r2, #1
 80034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f926 	bl	8003714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d10e      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d107      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fbae 	bl	8003c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d10e      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d107      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f918 	bl	8003750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b20      	cmp	r3, #32
 800352c:	d10e      	bne.n	800354c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d107      	bne.n	800354c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0220 	mvn.w	r2, #32
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fb78 	bl	8003c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_TIM_IC_ConfigChannel+0x1e>
 800356e:	2302      	movs	r3, #2
 8003570:	e088      	b.n	8003684 <HAL_TIM_IC_ConfigChannel+0x130>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f000 f988 	bl	80038a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 020c 	bic.w	r2, r2, #12
 80035a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6999      	ldr	r1, [r3, #24]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	619a      	str	r2, [r3, #24]
 80035b6:	e060      	b.n	800367a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d11c      	bne.n	80035f8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 f9dd 	bl	800398c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6999      	ldr	r1, [r3, #24]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	021a      	lsls	r2, r3, #8
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
 80035f6:	e040      	b.n	800367a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11b      	bne.n	8003636 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f000 f9fa 	bl	8003a06 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 020c 	bic.w	r2, r2, #12
 8003620:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	61da      	str	r2, [r3, #28]
 8003634:	e021      	b.n	800367a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b0c      	cmp	r3, #12
 800363a:	d11c      	bne.n	8003676 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f000 fa17 	bl	8003a7e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800365e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69d9      	ldr	r1, [r3, #28]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
 8003674:	e001      	b.n	800367a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d831      	bhi.n	8003704 <HAL_TIM_ReadCapturedValue+0x78>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	08003705 	.word	0x08003705
 80036b0:	08003705 	.word	0x08003705
 80036b4:	08003705 	.word	0x08003705
 80036b8:	080036e7 	.word	0x080036e7
 80036bc:	08003705 	.word	0x08003705
 80036c0:	08003705 	.word	0x08003705
 80036c4:	08003705 	.word	0x08003705
 80036c8:	080036f1 	.word	0x080036f1
 80036cc:	08003705 	.word	0x08003705
 80036d0:	08003705 	.word	0x08003705
 80036d4:	08003705 	.word	0x08003705
 80036d8:	080036fb 	.word	0x080036fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	60fb      	str	r3, [r7, #12]

      break;
 80036e4:	e00f      	b.n	8003706 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	60fb      	str	r3, [r7, #12]

      break;
 80036ee:	e00a      	b.n	8003706 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	60fb      	str	r3, [r7, #12]

      break;
 80036f8:	e005      	b.n	8003706 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	60fb      	str	r3, [r7, #12]

      break;
 8003702:	e000      	b.n	8003706 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003704:	bf00      	nop
  }

  return tmpreg;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <TIM_Base_SetConfig+0x114>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d00f      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3d      	ldr	r2, [pc, #244]	; (800387c <TIM_Base_SetConfig+0x118>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00b      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <TIM_Base_SetConfig+0x11c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <TIM_Base_SetConfig+0x120>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3a      	ldr	r2, [pc, #232]	; (8003888 <TIM_Base_SetConfig+0x124>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <TIM_Base_SetConfig+0x114>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d027      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <TIM_Base_SetConfig+0x118>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d023      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <TIM_Base_SetConfig+0x11c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <TIM_Base_SetConfig+0x120>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a29      	ldr	r2, [pc, #164]	; (8003888 <TIM_Base_SetConfig+0x124>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d017      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a28      	ldr	r2, [pc, #160]	; (800388c <TIM_Base_SetConfig+0x128>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a27      	ldr	r2, [pc, #156]	; (8003890 <TIM_Base_SetConfig+0x12c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <TIM_Base_SetConfig+0x130>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a25      	ldr	r2, [pc, #148]	; (8003898 <TIM_Base_SetConfig+0x134>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <TIM_Base_SetConfig+0x138>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <TIM_Base_SetConfig+0x13c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <TIM_Base_SetConfig+0x114>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0xf8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <TIM_Base_SetConfig+0x124>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d103      	bne.n	8003864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	615a      	str	r2, [r3, #20]
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	40001800 	.word	0x40001800
 800389c:	40001c00 	.word	0x40001c00
 80038a0:	40002000 	.word	0x40002000

080038a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0201 	bic.w	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a28      	ldr	r2, [pc, #160]	; (8003970 <TIM_TI1_SetConfig+0xcc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01b      	beq.n	800390a <TIM_TI1_SetConfig+0x66>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d017      	beq.n	800390a <TIM_TI1_SetConfig+0x66>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a25      	ldr	r2, [pc, #148]	; (8003974 <TIM_TI1_SetConfig+0xd0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <TIM_TI1_SetConfig+0x66>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a24      	ldr	r2, [pc, #144]	; (8003978 <TIM_TI1_SetConfig+0xd4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00f      	beq.n	800390a <TIM_TI1_SetConfig+0x66>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a23      	ldr	r2, [pc, #140]	; (800397c <TIM_TI1_SetConfig+0xd8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <TIM_TI1_SetConfig+0x66>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a22      	ldr	r2, [pc, #136]	; (8003980 <TIM_TI1_SetConfig+0xdc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <TIM_TI1_SetConfig+0x66>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <TIM_TI1_SetConfig+0xe0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_TI1_SetConfig+0x66>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a20      	ldr	r2, [pc, #128]	; (8003988 <TIM_TI1_SetConfig+0xe4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <TIM_TI1_SetConfig+0x6a>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <TIM_TI1_SetConfig+0x6c>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e003      	b.n	800392e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	b2db      	uxtb	r3, r3
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f023 030a 	bic.w	r3, r3, #10
 8003948:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 030a 	and.w	r3, r3, #10
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40010000 	.word	0x40010000
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40010400 	.word	0x40010400
 8003984:	40014000 	.word	0x40014000
 8003988:	40001800 	.word	0x40001800

0800398c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0210 	bic.w	r2, r3, #16
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	031b      	lsls	r3, r3, #12
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	621a      	str	r2, [r3, #32]
}
 8003a72:	bf00      	nop
 8003a74:	371c      	adds	r7, #28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003abc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	031b      	lsls	r3, r3, #12
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	031b      	lsls	r3, r3, #12
 8003ad6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1a      	ldr	r2, [r3, #32]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e05a      	b.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d01d      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d10c      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40010400 	.word	0x40010400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40001800 	.word	0x40001800

08003c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <memset>:
 8003c64:	4402      	add	r2, r0
 8003c66:	4603      	mov	r3, r0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	4d0d      	ldr	r5, [pc, #52]	; (8003cac <__libc_init_array+0x38>)
 8003c78:	4c0d      	ldr	r4, [pc, #52]	; (8003cb0 <__libc_init_array+0x3c>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	2600      	movs	r6, #0
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	4d0b      	ldr	r5, [pc, #44]	; (8003cb4 <__libc_init_array+0x40>)
 8003c86:	4c0c      	ldr	r4, [pc, #48]	; (8003cb8 <__libc_init_array+0x44>)
 8003c88:	f000 f818 	bl	8003cbc <_init>
 8003c8c:	1b64      	subs	r4, r4, r5
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	2600      	movs	r6, #0
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	08003d10 	.word	0x08003d10
 8003cb0:	08003d10 	.word	0x08003d10
 8003cb4:	08003d10 	.word	0x08003d10
 8003cb8:	08003d14 	.word	0x08003d14

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
